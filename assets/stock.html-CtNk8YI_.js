import{_ as a,o as e,c as n,a as s}from"./app-BRTHG7K9.js";const i={},c=s('<h1 id="【库存】产品库存、库存明细" tabindex="-1"><a class="header-anchor" href="#【库存】产品库存、库存明细"><span>【库存】产品库存、库存明细</span></a></h1><p>库存模块，由 <code>yudao-module-erp-biz</code> 后端模块的 <code>stock</code> 包实现，主要包括如下菜单：</p><figure><img src="https://cloud.iocoder.cn/img/ERP手册/库存模块01/库存管理.png" alt="库存管理" tabindex="0" loading="lazy"><figcaption>库存管理</figcaption></figure><p>本文，我们主要讲解仓库、产品库存、库存明细三个功能。它们的表关系如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/ERP手册/库存模块01/表关系.png" alt="表关系" tabindex="0" loading="lazy"><figcaption>表关系</figcaption></figure><h2 id="_1-仓库" tabindex="-1"><a class="header-anchor" href="#_1-仓库"><span><a href="#_1-%E4%BB%93%E5%BA%93">#</a> 1. 仓库</span></a></h2><p>仓库，由 ErpWarehouseController 提供接口。</p><h3 id="_1-表结构" tabindex="-1"><a class="header-anchor" href="#_1-表结构"><span><a href="#_1-%E8%A1%A8%E7%BB%93%E6%9E%84">#</a> 1. 表结构</span></a></h3><blockquote><p>省略 creator/create_time/updater/update_time/deleted/tenant_id 等通用字段</p></blockquote><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>CREATE TABLE `erp_warehouse` (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;仓库编号&#39;,</span></span>\n<span class="line"><span>  `name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;仓库名称&#39;,</span></span>\n<span class="line"><span>  `address` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &#39;仓库地址&#39;,</span></span>\n<span class="line"><span>  `sort` bigint NOT NULL COMMENT &#39;排序&#39;,</span></span>\n<span class="line"><span>  `remark` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &#39;备注&#39;,</span></span>\n<span class="line"><span>  `principal` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &#39;负责人&#39;,</span></span>\n<span class="line"><span>  `warehouse_price` decimal(24,6) DEFAULT NULL COMMENT &#39;仓储费，单位：元&#39;,</span></span>\n<span class="line"><span>  `truckage_price` decimal(24,6) DEFAULT NULL COMMENT &#39;搬运费，单位：元&#39;,</span></span>\n<span class="line"><span>  `status` tinyint NOT NULL COMMENT &#39;开启状态&#39;,</span></span>\n<span class="line"><span>  `default_status` bit(1) DEFAULT b&#39;0&#39; COMMENT &#39;是否默认&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`)</span></span>\n<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&#39;ERP 仓库表&#39;;</span></span></code></pre></div><p>都是一些信息字段，仅仅用于展示，没有什么特殊逻辑。</p><h3 id="_2-管理后台" tabindex="-1"><a class="header-anchor" href="#_2-管理后台"><span><a href="#_2-%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0">#</a> 2. 管理后台</span></a></h3><p>对应 [ERP 系统 -&gt; 库存管理 -&gt; 仓库信息] 菜单，对应 <code>yudao-ui-admin-vue3</code> 项目的 <code>@/views/erp/stock/warehouse</code> 目录。</p><figure><img src="https://cloud.iocoder.cn/img/ERP手册/库存模块01/仓库信息.png" alt="管理后台 - 仓库信息" tabindex="0" loading="lazy"><figcaption>管理后台 - 仓库信息</figcaption></figure><h2 id="_2-产品库存" tabindex="-1"><a class="header-anchor" href="#_2-产品库存"><span><a href="#_2-%E4%BA%A7%E5%93%81%E5%BA%93%E5%AD%98">#</a> 2. 产品库存</span></a></h2><p>产品库存，由 ErpProductStockController 提供接口。</p><h3 id="_2-1-表结构" tabindex="-1"><a class="header-anchor" href="#_2-1-表结构"><span><a href="#_2-1-%E8%A1%A8%E7%BB%93%E6%9E%84">#</a> 2.1 表结构</span></a></h3><blockquote><p>省略 creator/create_time/updater/update_time/deleted/tenant_id 等通用字段</p></blockquote><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>CREATE TABLE `erp_stock` (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;编号&#39;,</span></span>\n<span class="line"><span>  `product_id` bigint NOT NULL COMMENT &#39;产品编号&#39;,</span></span>\n<span class="line"><span>  `warehouse_id` bigint NOT NULL COMMENT &#39;仓库编号&#39;,</span></span>\n<span class="line"><span>  `count` decimal(24,6) NOT NULL COMMENT &#39;库存数量&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`)</span></span>\n<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&#39;ERP 产品库存表&#39;;</span></span></code></pre></div><p>① <code>product_id</code> 和 <code>warehouse_id</code> 分别关联对应的产品和仓库。本质上，它就是记录一个产品在某个仓库的库存数量。</p><p>② <code>count</code> 是库存数量，注意它使用的是 <code>decimal</code> 类型，默认保留 3 位小数，并不是一个整数。</p><h3 id="_2-2-管理后台" tabindex="-1"><a class="header-anchor" href="#_2-2-管理后台"><span><a href="#_2-2-%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0">#</a> 2.2 管理后台</span></a></h3><p>对应 [ERP 系统 -&gt; 库存管理 -&gt; 产品库存] 菜单，对应 <code>yudao-ui-admin-vue3</code> 项目的 <code>@/views/erp/stock/product-stock</code> 目录。</p><figure><img src="https://cloud.iocoder.cn/img/ERP手册/库存模块01/产品库存.png" alt="管理后台 - 产品库存" tabindex="0" loading="lazy"><figcaption>管理后台 - 产品库存</figcaption></figure><h2 id="_3-库存明细" tabindex="-1"><a class="header-anchor" href="#_3-库存明细"><span><a href="#_3-%E5%BA%93%E5%AD%98%E6%98%8E%E7%BB%86">#</a> 3. 库存明细</span></a></h2><p>库存明细，由 ErpStockRecordController 提供接口。</p><h3 id="_3-1-表结构" tabindex="-1"><a class="header-anchor" href="#_3-1-表结构"><span><a href="#_3-1-%E8%A1%A8%E7%BB%93%E6%9E%84">#</a> 3.1 表结构</span></a></h3><blockquote><p>省略 creator/create_time/updater/update_time/deleted/tenant_id 等通用字段</p></blockquote><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>CREATE TABLE `erp_stock_record` (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;编号&#39;,</span></span>\n<span class="line"><span>  `product_id` bigint NOT NULL COMMENT &#39;产品编号&#39;,</span></span>\n<span class="line"><span>  `warehouse_id` bigint NOT NULL COMMENT &#39;仓库编号&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `count` decimal(24,6) NOT NULL COMMENT &#39;出入库数量&#39;,</span></span>\n<span class="line"><span>  `total_count` decimal(24,6) NOT NULL COMMENT &#39;总库存量&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `biz_type` tinyint NOT NULL COMMENT &#39;业务类型&#39;,</span></span>\n<span class="line"><span>  `biz_id` bigint NOT NULL COMMENT &#39;业务编号&#39;,</span></span>\n<span class="line"><span>  `biz_item_id` bigint NOT NULL COMMENT &#39;业务项编号&#39;,</span></span>\n<span class="line"><span>  `biz_no` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;业务单号&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`)</span></span>\n<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=41 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&#39;ERP 产品库存明细表&#39;;</span></span></code></pre></div><p>① <code>product_id</code> 和 <code>warehouse_id</code> 分别关联对应的产品和仓库。<code>count</code> 是出入库数量，<code>total_count</code> 是总库存量。</p><p>本质上，它是记录一个产品在某个仓库的库存变化（出入库）数量。其中 <code>count</code> 为正数表示入库，为负数表示出库。</p><p>② <code>biz_type</code> 是业务类型，比如采购入库、销售出库等。由 ErpStockRecordBizTypeEnum 枚举，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/ERP手册/库存模块01/ErpStockRecordBizTypeEnum.png" alt="业务类型" tabindex="0" loading="lazy"><figcaption>业务类型</figcaption></figure><p><code>biz_id</code> 和 <code>biz_item_id</code>、<code>biz_no</code> 用于关联对应的业务单据信息。</p><p>有一点要注意，每个出入库操作是可以取消的，所以在 <code>biz_type</code> 都有一个 <code>_CANCEL</code> 的对应类型。例如说采购入库 <code>PURCHASE_IN</code> 对应的取消类型是 <code>PURCHASE_IN_CANCEL</code>。此时，会有两条记录：</p><ul><li>一条是 <code>PURCHASE_IN</code> 的 <code>count</code> 正数入库</li><li>一条是 <code>PURCHASE_IN_CANCEL</code> 的 <code>count</code> 负数出库</li></ul><p>它的具体实现，可见 ErpStockRecordService 的 <code>#createStockRecord(...)</code> 方法，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/ERP手册/库存模块01/createStockRecord.png" alt="创建库存明细" tabindex="0" loading="lazy"><figcaption>创建库存明细</figcaption></figure><h3 id="_3-2-管理后台" tabindex="-1"><a class="header-anchor" href="#_3-2-管理后台"><span><a href="#_3-2-%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0">#</a> 3.2 管理后台</span></a></h3><p>对应 [ERP 系统 -&gt; 库存管理 -&gt; 库存明细] 菜单，对应 <code>yudao-ui-admin-vue3</code> 项目的 <code>@/views/erp/stock/record</code> 目录。</p><figure><img src="https://cloud.iocoder.cn/img/ERP手册/库存模块01/库存明细.png" alt="管理后台 - 库存明细" tabindex="0" loading="lazy"><figcaption>管理后台 - 库存明细</figcaption></figure>',41),p=[c];function o(t,d){return e(),n("div",null,p)}const r=a(i,[["render",o],["__file","stock.html.vue"]]),E=JSON.parse('{"path":"/project/yudao-cloud/erp/stock.html","title":"【库存】产品库存、库存明细","lang":"en-US","frontmatter":{"title":"【库存】产品库存、库存明细","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":116,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 仓库","slug":"_1-仓库","link":"#_1-仓库","children":[{"level":3,"title":"# 1. 表结构","slug":"_1-表结构","link":"#_1-表结构","children":[]},{"level":3,"title":"# 2. 管理后台","slug":"_2-管理后台","link":"#_2-管理后台","children":[]}]},{"level":2,"title":"# 2. 产品库存","slug":"_2-产品库存","link":"#_2-产品库存","children":[{"level":3,"title":"# 2.1 表结构","slug":"_2-1-表结构","link":"#_2-1-表结构","children":[]},{"level":3,"title":"# 2.2 管理后台","slug":"_2-2-管理后台","link":"#_2-2-管理后台","children":[]}]},{"level":2,"title":"# 3. 库存明细","slug":"_3-库存明细","link":"#_3-库存明细","children":[{"level":3,"title":"# 3.1 表结构","slug":"_3-1-表结构","link":"#_3-1-表结构","children":[]},{"level":3,"title":"# 3.2 管理后台","slug":"_3-2-管理后台","link":"#_3-2-管理后台","children":[]}]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":3.91,"words":1172},"filePathRelative":"project/yudao-cloud/erp/stock.md","localizedDate":"July 7, 2024"}');export{r as comp,E as data};
