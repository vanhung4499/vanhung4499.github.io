import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as a,e as i}from"./app-C-_dXKvP.js";const l={},e=i(`<h1 id="cau-lenh-try-catch" tabindex="-1"><a class="header-anchor" href="#cau-lenh-try-catch"><span>Câu lệnh try-catch</span></a></h1><p>Câu lệnh <code>try…catch</code> được sử dụng để đặt mã có thể gây ra lỗi vào trong khối <code>try</code> và xử lý ngoại lệ tương ứng.</p><p>Câu lệnh <code>try…catch</code> bao gồm một khối <code>try</code> chứa một hoặc nhiều câu lệnh, và ít nhất một khối <code>catch</code> hoặc một khối <code>finally</code>, hoặc cả hai.</p><p>Dưới đây là ba dạng khai báo <code>try</code>:</p><ul><li><code>try…catch</code></li><li><code>try…finally</code></li><li><code>try…catch…finally</code></li></ul><h2 id="catch" tabindex="-1"><a class="header-anchor" href="#catch"><span>catch</span></a></h2><p>Khối <code>catch</code> chứa các câu lệnh được thực thi khi một ngoại lệ được ném ra từ khối <code>try</code>. Nếu có bất kỳ câu lệnh nào trong khối <code>try</code> (hoặc trong hàm được gọi từ khối <code>try</code>) ném ra một ngoại lệ, quyền điều khiển sẽ ngay lập tức chuyển đến khối <code>catch</code>. Nếu không có ngoại lệ nào được ném ra từ khối <code>try</code>, khối <code>catch</code> sẽ được bỏ qua.</p><p>🌰 <strong>Ví dụ:</strong></p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">try</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&#39;1: start&#39;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  throw</span><span style="color:#032F62;--shiki-dark:#98C379;"> &#39;Đây là một lỗi&#39;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&#39;2: end&#39;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">} </span><span style="color:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#24292E;--shiki-dark:#E06C75;">err</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&#39;3:&#39;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#E06C75;">err</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// Kết quả:</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 1: start</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 3: Đây là một lỗi</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Khối <code>catch</code> chỉ định một biến (trong ví dụ trên là <code>err</code>) để lưu giá trị được chỉ định bởi câu lệnh <code>throw</code>. Biến này chỉ tồn tại trong khối <code>catch</code> và được thêm vào phạm vi hiện tại khi khối <code>catch</code> được thực thi. Sau khi khối <code>catch</code> thực thi xong, biến này không còn khả dụng.</p><p>Từ kết quả, ta có thể thấy rằng nếu có bất kỳ câu lệnh nào trong khối <code>try</code> (hoặc trong hàm được gọi từ khối <code>try</code>) ném ra một ngoại lệ, quyền điều khiển sẽ ngay lập tức chuyển đến khối <code>catch</code>.</p><h2 id="finally" tabindex="-1"><a class="header-anchor" href="#finally"><span>finally</span></a></h2><p>Khối <code>finally</code> được thực thi sau khối <code>try</code> và khối <code>catch</code>, nhưng trước khi khối <code>try</code> tiếp theo được khai báo.</p><p>⚠️ <strong>Lưu ý</strong>: Khối <code>finally</code> luôn được thực thi, bất kể có ngoại lệ nào được ném ra hay không.</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">function</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  try</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  } </span><span style="color:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#24292E;--shiki-dark:#E06C75;">err</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  } </span><span style="color:#D73A49;--shiki-dark:#C678DD;">finally</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">    console</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">console</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// Kết quả:</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 3</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 1</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Từ kết quả, ta thấy rằng khối <code>finally</code> được thực thi trước khi giá trị được trả về từ khối <code>try</code>.</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">function</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  try</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    throw</span><span style="color:#032F62;--shiki-dark:#98C379;"> &#39;Đây là một lỗi&#39;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  } </span><span style="color:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#24292E;--shiki-dark:#E06C75;">err</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">    console</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#E06C75;">err</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  } </span><span style="color:#24292E;--shiki-dark:#E06C75;">finnally</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">    console</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">console</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// Kết quả:</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 1 Đây là một lỗi</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 3</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 2</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Các câu lệnh trước <code>return</code> được thực thi trước, sau đó là khối <code>finally</code>, và cuối cùng là giá trị được trả về từ <code>return</code>.</p><blockquote><p>⚠️ <strong>Lưu ý</strong>: Nếu khối <code>finally</code> trả về một giá trị, giá trị đó sẽ trở thành giá trị trả về của toàn bộ câu lệnh <code>try-catch-finally</code>, bất kể có câu lệnh <code>return</code> trong khối <code>try</code> và <code>catch</code> hay không. Điều này bao gồm cả việc ném ra ngoại lệ từ khối <code>catch</code>.</p></blockquote><h2 id="xu-ly-long-nhau" tabindex="-1"><a class="header-anchor" href="#xu-ly-long-nhau"><span>Xử lý lồng nhau</span></a></h2><p>Bạn có thể lồng nhau một hoặc nhiều câu lệnh <code>try</code>. Nếu câu lệnh <code>try</code> bên trong không có khối <code>catch</code>, thì chương trình sẽ chuyển đến khối <code>catch</code> của câu lệnh <code>try</code> bên ngoài.</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">try</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  try</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    throw</span><span style="color:#032F62;--shiki-dark:#98C379;"> &#39;Đây là một lỗi&#39;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  } </span><span style="color:#D73A49;--shiki-dark:#C678DD;">finally</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">    console</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">} </span><span style="color:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#24292E;--shiki-dark:#E06C75;">err</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#E06C75;">err</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// Kết quả:</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 2 Đây là một lỗi</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lồng một câu lệnh <code>try-catch-finally</code> trong khối <code>try</code>.</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">try</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  try</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    throw</span><span style="color:#032F62;--shiki-dark:#98C379;"> &#39;Đây là một lỗi&#39;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  } </span><span style="color:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#24292E;--shiki-dark:#E06C75;">err</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">    console</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">error</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#E06C75;">err</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    throw</span><span style="color:#24292E;--shiki-dark:#E06C75;"> err</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  } </span><span style="color:#D73A49;--shiki-dark:#C678DD;">finally</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">    console</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">} </span><span style="color:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#24292E;--shiki-dark:#E06C75;">err</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">error</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">4</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#E5C07B;">err</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E06C75;">message</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// Kết quả:</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 1 Đây là một lỗi</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 2</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vì câu lệnh <code>return</code> trong khối <code>finally</code>, nên ngoại lệ <code>this is a error</code> bên ngoài không được ném ra. Giá trị trả về từ khối <code>catch</code> cũng áp dụng tương tự.</p><h2 id="bien-đinh-danh-ngoai-le" tabindex="-1"><a class="header-anchor" href="#bien-đinh-danh-ngoai-le"><span>Biến định danh ngoại lệ</span></a></h2><p>Khi một ngoại lệ được ném ra từ khối <code>try</code>, <em><code>exception_var</code></em> (như <code>err</code> trong <code>catch (err)</code>) được sử dụng để lưu trữ giá trị được chỉ định bởi câu lệnh <code>throw</code>. Bạn có thể sử dụng biến này để lấy thông tin về ngoại lệ được ném ra.</p><p>Biến này chỉ tồn tại trong khối <code>catch</code>. Nghĩa là khi bạn vào khối <code>catch</code>, biến này được tạo ra và thêm vào phạm vi hiện tại, và sau khi khối <code>catch</code> thực thi xong, biến này không còn khả dụng.</p>`,28),r=[e];function c(o,t){return a(),n("div",null,r)}const h=s(l,[["render",c],["__file","try.html.vue"]]),k=JSON.parse('{"path":"/programming/js/basic/statements/try.html","title":"Try Statement","lang":"en-US","frontmatter":{"title":"Try Statement","tags":["js","programming"],"categories":["js","programming"],"date created":"2023-08-01T00:00:00.000Z","date modified":"2023-08-01T00:00:00.000Z","order":10,"description":"Câu lệnh try-catch Câu lệnh try…catch được sử dụng để đặt mã có thể gây ra lỗi vào trong khối try và xử lý ngoại lệ tương ứng. Câu lệnh try…catch bao gồm một khối try chứa một h...","head":[["meta",{"property":"og:url","content":"https://vanhung4499.github.io/programming/js/basic/statements/try.html"}],["meta",{"property":"og:site_name","content":"vanhung4499"}],["meta",{"property":"og:title","content":"Try Statement"}],["meta",{"property":"og:description","content":"Câu lệnh try-catch Câu lệnh try…catch được sử dụng để đặt mã có thể gây ra lỗi vào trong khối try và xử lý ngoại lệ tương ứng. Câu lệnh try…catch bao gồm một khối try chứa một h..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-20T12:02:51.000Z"}],["meta",{"property":"article:author","content":"Hung Nguyen"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"programming"}],["meta",{"property":"article:modified_time","content":"2024-06-20T12:02:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Try Statement\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-20T12:02:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hung Nguyen\\",\\"url\\":\\"https://vanhung4499.github.io\\",\\"email\\":\\"vanhung4499@gmail.com\\"}]}"]]},"headers":[{"level":2,"title":"catch","slug":"catch","link":"#catch","children":[]},{"level":2,"title":"finally","slug":"finally","link":"#finally","children":[]},{"level":2,"title":"Xử lý lồng nhau","slug":"xu-ly-long-nhau","link":"#xu-ly-long-nhau","children":[]},{"level":2,"title":"Biến định danh ngoại lệ","slug":"bien-đinh-danh-ngoai-le","link":"#bien-đinh-danh-ngoai-le","children":[]}],"git":{"createdTime":1718884971000,"updatedTime":1718884971000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":3.25,"words":976},"filePathRelative":"programming/js/basic/statements/try.md","localizedDate":"June 20, 2024","excerpt":"\\n<p>Câu lệnh <code>try…catch</code> được sử dụng để đặt mã có thể gây ra lỗi vào trong khối <code>try</code> và xử lý ngoại lệ tương ứng.</p>\\n<p>Câu lệnh <code>try…catch</code> bao gồm một khối <code>try</code> chứa một hoặc nhiều câu lệnh, và ít nhất một khối <code>catch</code> hoặc một khối <code>finally</code>, hoặc cả hai.</p>","autoDesc":true}');export{h as comp,k as data};
