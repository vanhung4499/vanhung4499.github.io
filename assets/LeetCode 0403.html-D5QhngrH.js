import{_ as t,o as l,c as e,d as n,a as s,e as a}from"./app-D_tMBEO-.js";const i={},o=n('<h1 id="_0403-frog-jump" tabindex="-1"><a class="header-anchor" href="#_0403-frog-jump"><span><a href="https://leetcode.com/problems/frog-jump/" target="_blank" rel="noopener noreferrer">0403. Frog Jump</a></span></a></h1><ul><li>Nhãn: Mảng, Quy hoạch động</li><li>Độ khó: Khó</li></ul><h2 id="tom-tat-đe-bai" tabindex="-1"><a class="header-anchor" href="#tom-tat-đe-bai"><span>Tóm tắt đề bài</span></a></h2><p><strong>Mô tả</strong>: Một con ếch muốn băng qua sông, sông được chia thành các ô, mỗi ô có thể chứa một viên đá (hoặc không có đá). Con ếch chỉ có thể nhảy vào các ô có đá, không thể nhảy vào các ô không có đá.</p><p>Cho một mảng <code>stones</code> được sắp xếp theo thứ tự tăng dần, trong đó <code>stones[i]</code> đại diện cho số thứ tự của viên đá thứ <code>i</code>. Giả sử số thứ tự của viên đá đầu tiên là <code>0</code> (tức <code>stones[0] == 0</code>).</p><p>Ban đầu, con ếch đứng trên viên đá thứ nhất (tức <code>stones[0]</code>), và chỉ có thể nhảy <code>1</code> đơn vị (tức chỉ có thể nhảy từ ô thứ <code>0</code> đến ô thứ <code>1</code>).</p><p>Nếu con ếch nhảy về phía trước <code>k</code> đơn vị ở bước trước thì nó chỉ có thể nhảy về phía trước <code>k - 1</code>, <code>k</code> hoặc <code>k + 1</code> đơn vị ở bước tiếp theo.</p><p><strong>Yêu cầu</strong>: Xác định xem con ếch có thể băng qua sông thành công không (tức có thể nhảy lên viên đá cuối cùng không). Nếu có, trả về <code>True</code> ; nếu không, trả về <code>False</code>.</p><p><strong>Giới hạn</strong>:</p>',9),c=s("ul",null,[s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2"),s("mo",null,"≤"),s("mtext",null,"stones.length"),s("mo",null,"≤"),s("mn",null,"2000")]),s("annotation",{encoding:"application/x-tex"},"2 \\le \\text{stones.length} \\le 2000")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7804em","vertical-align":"-0.136em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"stones.length")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2000")])])]),a(".")]),s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0"),s("mo",null,"≤"),s("mtext",null,"stones[i]"),s("mo",null,"≤"),s("msup",null,[s("mn",null,"2"),s("mn",null,"31")]),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"0 \\le \\text{stones[i]} \\le 2^{31} - 1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7804em","vertical-align":"-0.136em"}}),s("span",{class:"mord"},"0"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"stones[i]")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"31")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(".")]),s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"s"),s("mi",null,"t"),s("mi",null,"o"),s("mi",null,"n"),s("mi",null,"e"),s("mi",null,"s"),s("mo",{stretchy:"false"},"["),s("mn",null,"0"),s("mo",{stretchy:"false"},"]"),s("mo",null,"="),s("mo",null,"="),s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"stones[0] == 0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal"},"es"),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0"),s("span",{class:"mclose"},"]"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"=="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(".")]),s("li",null,[a("Mảng "),s("code",null,"stones"),a(" được sắp xếp theo thứ tự tăng dần.")])],-1),p=n('<p><strong>Ví dụ</strong>:</p><ul><li>Ví dụ 1:</li></ul><div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">Input: stones </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">8</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">12</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">17</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">Output: true</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">Explanation: Con ếch có thể băng qua sông thành công bằng cách nhảy như sau: nhảy </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">`</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> đơn vị đến viên đá thứ </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">`</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, sau đó nhảy </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">`</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> đơn vị đến viên đá thứ </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">`</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, tiếp theo nhảy </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">`</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> đơn vị đến viên đá thứ </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">`</span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, sau đó nhảy </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">`</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> đơn vị đến viên đá thứ </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">`</span><span style="color:#D19A66;--shiki-dark:#D19A66;">6</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, nhảy </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">`</span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> đơn vị đến viên đá thứ </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">`</span><span style="color:#D19A66;--shiki-dark:#D19A66;">7</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, cuối cùng, nhảy </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">`</span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> đơn vị đến viên đá thứ </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">`</span><span style="color:#D19A66;--shiki-dark:#D19A66;">8</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (tức viên đá cuối cùng).</span></span></code></pre></div><h2 id="y-tuong-giai-quyet" tabindex="-1"><a class="header-anchor" href="#y-tuong-giai-quyet"><span>Ý tưởng giải quyết</span></a></h2><h3 id="y-tuong-1-quy-hoach-đong" tabindex="-1"><a class="header-anchor" href="#y-tuong-1-quy-hoach-đong"><span>Ý tưởng 1: Quy hoạch động</span></a></h3><p>Theo đề bài, nếu con ếch nhảy <code>k</code> đơn vị từ ô trước đó, thì ở bước tiếp theo, con ếch chỉ có thể nhảy <code>k - 1</code>, <code>k</code> hoặc <code>k + 1</code> đơn vị.</p><p>Chúng ta có thể sử dụng quy hoạch động để xác định xem con ếch có thể nhảy đến ô cuối cùng hay không. Ta có thể chia bài toán thành các giai đoạn, định nghĩa trạng thái và tìm công thức chuyển trạng thái.</p><h6 id="_1-chia-giai-đoan" tabindex="-1"><a class="header-anchor" href="#_1-chia-giai-đoan"><span>1. Chia giai đoạn</span></a></h6><p>Chia giai đoạn dựa trên số lượng viên đá.</p><h6 id="_2-đinh-nghia-trang-thai" tabindex="-1"><a class="header-anchor" href="#_2-đinh-nghia-trang-thai"><span>2. Định nghĩa trạng thái</span></a></h6><p>Định nghĩa trạng thái <code>dp[i][k]</code> để biểu diễn: con ếch có thể nhảy <code>k</code> đơn vị để đến viên đá thứ <code>i</code> hay không.</p><h6 id="_3-cong-thuc-chuyen-trang-thai" tabindex="-1"><a class="header-anchor" href="#_3-cong-thuc-chuyen-trang-thai"><span>3. Công thức chuyển trạng thái</span></a></h6><ol><li>Vòng lặp bên ngoài duyệt qua từng viên đá <code>i</code>, với mỗi viên đá <code>i</code>, sử dụng vòng lặp bên trong duyệt qua tất cả các viên đá <code>j</code> trước đó.</li><li>Tính khoảng cách từ viên đá <code>j</code> trước đó đến viên đá <code>i</code> hiện tại là <code>k</code>.</li><li>Nếu con ếch có thể nhảy từ viên đá <code>j</code> trước đó đến viên đá <code>i</code> hiện tại bằng cách nhảy <code>k - 1</code>, <code>k</code> hoặc <code>k + 1</code> đơn vị, thì con ếch cũng có thể nhảy từ viên đá <code>j</code> đến viên đá <code>i</code> bằng cách nhảy <code>k</code> đơn vị. Điều này có nghĩa là, nếu <code>dp[j][k - 1]</code> hoặc <code>dp[j][k]</code> hoặc <code>dp[j][k + 1]</code> là <code>True</code>, thì <code>dp[i][k]</code> cũng là <code>True</code>. <ul><li>Tức là: <code>dp[i][k] = dp[j][k - 1] or dp[j][k] or dp[j][k + 1]</code>.</li></ul></li></ol><h6 id="_4-đieu-kien-ban-đau" tabindex="-1"><a class="header-anchor" href="#_4-đieu-kien-ban-đau"><span>4. Điều kiện ban đầu</span></a></h6><p>Ban đầu, con ếch đứng trên viên đá đầu tiên (tức <code>stones[0]</code>), và chỉ có thể nhảy <code>0</code> đơn vị để đến viên đá đầu tiên, nên <code>dp[0][0] = True</code>.</p><h6 id="_5-ket-qua-cuoi-cung" tabindex="-1"><a class="header-anchor" href="#_5-ket-qua-cuoi-cung"><span>5. Kết quả cuối cùng</span></a></h6><p>Dựa trên định nghĩa trạng thái, <code>dp[i][k]</code> biểu diễn: con ếch có thể nhảy <code>k</code> đơn vị để đến viên đá thứ <code>i</code> hay không. Nếu <code>dp[size - 1][k]</code> là <code>True</code>, thì con ếch có thể nhảy đến viên đá cuối cùng thành công (tức có thể nhảy lên viên đá cuối cùng). Nếu không, thì con ếch không thể nhảy đến viên đá cuối cùng.</p><h3 id="y-tuong-1-cai-đat-quy-hoach-đong" tabindex="-1"><a class="header-anchor" href="#y-tuong-1-cai-đat-quy-hoach-đong"><span>Ý tưởng 1: Cài đặt quy hoạch động</span></a></h3><div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Solution</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> canCross</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;font-style:italic;--shiki-dark-font-style:italic;">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;font-style:italic;--shiki-dark-font-style:italic;">stones</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: List[</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]) -&gt; </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">bool</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        n </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> len</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(stones)</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        dp </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [[</span><span style="color:#D19A66;--shiki-dark:#D19A66;">False</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (n </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _ </span><span style="color:#C678DD;--shiki-dark:#C678DD;">in</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> range</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(n)]</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        dp[</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">][</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> True</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> i </span><span style="color:#C678DD;--shiki-dark:#C678DD;">in</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> range</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(n):</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> j </span><span style="color:#C678DD;--shiki-dark:#C678DD;">in</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> range</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(i):</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                k </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> stones[i] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> stones[j]</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> k </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&lt;=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> or</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> k </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> j </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                    continue</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                dp[i][k] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> dp[j][k </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#C678DD;--shiki-dark:#C678DD;">or</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> dp[j][k] </span><span style="color:#C678DD;--shiki-dark:#C678DD;">or</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> dp[j][k </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> dp[n </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">][k]:</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                    return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> True</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> False</span></span></code></pre></div><h3 id="y-tuong-1-đo-phuc-tap" tabindex="-1"><a class="header-anchor" href="#y-tuong-1-đo-phuc-tap"><span>Ý tưởng 1: Độ phức tạp</span></a></h3>',20),h=s("ul",null,[s("li",null,[s("strong",null,"Độ phức tạp thời gian"),a(": "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])]),a(". Vòng lặp lồng nhau có độ phức tạp "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])]),a(", do đó tổng độ phức tạp thời gian là "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])]),a(".")]),s("li",null,[s("strong",null,"Độ phức tạp không gian"),a(": "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])]),a(". Sử dụng một mảng hai chiều để lưu trạng thái, do đó tổng độ phức tạp không gian là "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])]),a(".")])],-1),r=[o,c,p,h];function d(k,F){return l(),e("div",null,r)}const m=t(i,[["render",d],["__file","LeetCode 0403.html.vue"]]),g=JSON.parse('{"path":"/dsa/leetcode/LeetCode%200403.html","title":"LeetCode 0403","lang":"en-US","frontmatter":{"title":"LeetCode 0403","tags":["dsa","leetcode"],"categories":["dsa","leetcode"],"date created":"2023-09-24T00:00:00.000Z","date modified":"2023-10-03T00:00:00.000Z","description":"0403. Frog Jump Nhãn: Mảng, Quy hoạch động Độ khó: Khó Tóm tắt đề bài Mô tả: Một con ếch muốn băng qua sông, sông được chia thành các ô, mỗi ô có thể chứa một viên đá (hoặc khôn...","head":[["meta",{"property":"og:url","content":"https://vanhung4499.github.io/dsa/leetcode/LeetCode%200403.html"}],["meta",{"property":"og:site_name","content":"VanHung4499"}],["meta",{"property":"og:title","content":"LeetCode 0403"}],["meta",{"property":"og:description","content":"0403. Frog Jump Nhãn: Mảng, Quy hoạch động Độ khó: Khó Tóm tắt đề bài Mô tả: Một con ếch muốn băng qua sông, sông được chia thành các ô, mỗi ô có thể chứa một viên đá (hoặc khôn..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-28T15:54:38.000Z"}],["meta",{"property":"article:author","content":"Hung Nguyen"}],["meta",{"property":"article:tag","content":"dsa"}],["meta",{"property":"article:tag","content":"leetcode"}],["meta",{"property":"article:modified_time","content":"2024-06-28T15:54:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LeetCode 0403\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-28T15:54:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hung Nguyen\\",\\"url\\":\\"https://vanhung4499.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Tóm tắt đề bài","slug":"tom-tat-đe-bai","link":"#tom-tat-đe-bai","children":[]},{"level":2,"title":"Ý tưởng giải quyết","slug":"y-tuong-giai-quyet","link":"#y-tuong-giai-quyet","children":[{"level":3,"title":"Ý tưởng 1: Quy hoạch động","slug":"y-tuong-1-quy-hoach-đong","link":"#y-tuong-1-quy-hoach-đong","children":[]},{"level":3,"title":"Ý tưởng 1: Cài đặt quy hoạch động","slug":"y-tuong-1-cai-đat-quy-hoach-đong","link":"#y-tuong-1-cai-đat-quy-hoach-đong","children":[]},{"level":3,"title":"Ý tưởng 1: Độ phức tạp","slug":"y-tuong-1-đo-phuc-tap","link":"#y-tuong-1-đo-phuc-tap","children":[]}]}],"git":{"createdTime":1719590078000,"updatedTime":1719590078000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":3.77,"words":1130},"filePathRelative":"dsa/leetcode/LeetCode 0403.md","localizedDate":"June 28, 2024","excerpt":"\\n<ul>\\n<li>Nhãn: Mảng, Quy hoạch động</li>\\n<li>Độ khó: Khó</li>\\n</ul>\\n<h2>Tóm tắt đề bài</h2>\\n<p><strong>Mô tả</strong>: Một con ếch muốn băng qua sông, sông được chia thành các ô, mỗi ô có thể chứa một viên đá (hoặc không có đá). Con ếch chỉ có thể nhảy vào các ô có đá, không thể nhảy vào các ô không có đá.</p>","autoDesc":true}');export{m as comp,g as data};
