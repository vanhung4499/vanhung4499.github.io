import{_ as n,o as s,c as e,a as i}from"./app-5QVbWi7Z.js";const l={};function d(t,a){return s(),e("div",null,a[0]||(a[0]=[i(`<h1 id="参数校验" tabindex="-1"><a class="header-anchor" href="#参数校验"><span>参数校验</span></a></h1><p>项目使用 <a href="https://hibernate.org/validator/" target="_blank" rel="noopener noreferrer">Hibernate Validator</a> 框架，对 RESTful API 接口进行参数的校验，以保证最终数据入库的正确性。例如说，用户注册时，会校验手机格式的正确性，密码非弱密码。</p><p>如果参数校验不通过，会抛出 ConstraintViolationException 异常，被全局的<a href="/exception">异常处理</a>捕获，返回“请求参数不正确”的响应。示例如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;code&quot;: 400,</span></span>
<span class="line"><span>  &quot;data&quot;: null,</span></span>
<span class="line"><span>  &quot;msg&quot;: &quot;请求参数不正确:密码不能为空&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="_1-参数校验注解" tabindex="-1"><a class="header-anchor" href="#_1-参数校验注解"><span><a href="#_1-%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C%E6%B3%A8%E8%A7%A3">#</a> 1. 参数校验注解</span></a></h2><p>Validator 内置了 20+ 个参数校验注解，整理成常用与不常用的注解。</p><h3 id="_1-1-常用注解" tabindex="-1"><a class="header-anchor" href="#_1-1-常用注解"><span><a href="#_1-1-%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3">#</a> 1.1 常用注解</span></a></h3><table><thead><tr><th>注解</th><th>功能</th></tr></thead><tbody><tr><td><code>@NotBlank</code></td><td>只能用于字符串不为 <code>null</code> ，并且字符串 <code>#trim()</code> 以后 length 要大于 0</td></tr><tr><td><code>@NotEmpty</code></td><td>集合对象的元素不为 0 ，即集合不为空，也可以用于字符串不为 <code>null</code></td></tr><tr><td><code>@NotNull</code></td><td>不能为 <code>null</code></td></tr><tr><td><code>@Pattern(value)</code></td><td>被注释的元素必须符合指定的正则表达式</td></tr><tr><td><code>@Max(value)</code></td><td>该字段的值只能小于或等于该值</td></tr><tr><td><code>@Min(value)</code></td><td>该字段的值只能大于或等于该值</td></tr><tr><td><code>@Range(min=, max=)</code></td><td>检被注释的元素必须在合适的范围内</td></tr><tr><td><code>@Size(max, min)</code></td><td>检查该字段的 <code>size</code> 是否在 <code>min</code> 和 <code>max</code> 之间，可以是字符串、数组、集合、Map 等</td></tr><tr><td><code>@Length(max, min)</code></td><td>被注释的字符串的大小必须在指定的范围内。</td></tr><tr><td><code>@AssertFalse</code></td><td>被注释的元素必须为 <code>true</code></td></tr><tr><td><code>@AssertTrue</code></td><td>被注释的元素必须为 <code>false</code></td></tr><tr><td><code>@Email</code></td><td>被注释的元素必须是电子邮箱地址</td></tr><tr><td><code>@URL(protocol=,host=,port=,regexp=,flags=)</code></td><td>被注释的字符串必须是一个有效的 URL</td></tr></tbody></table><h3 id="_1-2-不常用注解" tabindex="-1"><a class="header-anchor" href="#_1-2-不常用注解"><span><a href="#_1-2-%E4%B8%8D%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3">#</a> 1.2 不常用注解</span></a></h3><table><thead><tr><th>注解</th><th>功能</th></tr></thead><tbody><tr><td><code>@Null</code></td><td>必须为 <code>null</code></td></tr><tr><td><code>@DecimalMax(value)</code></td><td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td><code>@DecimalMin(value)</code></td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td><code>@Digits(integer, fraction)</code></td><td>被注释的元素必须是一个数字，其值必须在可接受的范围内</td></tr><tr><td><code>@Positive</code></td><td>判断正数</td></tr><tr><td><code>@PositiveOrZero</code></td><td>判断正数或 0</td></tr><tr><td><code>@Negative</code></td><td>判断负数</td></tr><tr><td><code>@NegativeOrZero</code></td><td>判断负数或 0</td></tr><tr><td><code>@Future</code></td><td>被注释的元素必须是一个将来的日期</td></tr><tr><td><code>@FutureOrPresent</code></td><td>判断日期是否是将来或现在日期</td></tr><tr><td><code>@Past</code></td><td>检查该字段的日期是在过去</td></tr><tr><td><code>@PastOrPresent</code></td><td>判断日期是否是过去或现在日期</td></tr><tr><td><code>@SafeHtml</code></td><td>判断提交的 HTML 是否安全。例如说，不能包含 JavaScript 脚本等等</td></tr></tbody></table><h2 id="_2-参数校验使用" tabindex="-1"><a class="header-anchor" href="#_2-参数校验使用"><span><a href="#_2-%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C%E4%BD%BF%E7%94%A8">#</a> 2. 参数校验使用</span></a></h2><p>只需要三步，即可开启参数校验的功能。</p><p>〇 第零步，引入参数校验的 <a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation" target="_blank" rel="noopener noreferrer"><code>spring-boot-starter-validation</code></a> 依赖。<strong>一般不需要做</strong>，项目默认已经引入。</p><p>① 第一步，在需要参数校验的类上，添加 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-context/src/main/java/org/springframework/validation/annotation/Validated.java" target="_blank" rel="noopener noreferrer"><code>@Validated</code></a> 注解，例如说 Controller、Service 类。代码如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>// Controller 示例</span></span>
<span class="line"><span>@Validated</span></span>
<span class="line"><span>public class AuthController {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Service 示例，一般放在实现类上</span></span>
<span class="line"><span>@Service</span></span>
<span class="line"><span>@Validated</span></span>
<span class="line"><span>public class AdminAuthServiceImpl implements AdminAuthService {}</span></span></code></pre></div><p>② 第二步（情况一）如果方法的参数是 Bean 类型，则在方法参数上添加 <a href="https://docs.oracle.com/javaee/7/api/javax/validation/Valid.html" target="_blank" rel="noopener noreferrer"><code>@Valid</code></a> 注解，并在 Bean 类上添加参数校验的注解。代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>// Controller 示例</span></span>
<span class="line"><span>@Validated</span></span>
<span class="line"><span>public class AuthController {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @PostMapping(&quot;/login&quot;)</span></span>
<span class="line"><span>    public CommonResult&lt;AuthLoginRespVO&gt; login(@RequestBody @Valid AuthLoginReqVO reqVO) {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>// Service 示例，一般放在接口上</span></span>
<span class="line"><span>public interface AdminAuthService {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    String login(@Valid AuthLoginReqVO reqVO, String userIp, String userAgent);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Bean 类的示例。一般建议添加参数注解到属性上。原因：采用 Lombok 后，很少使用 getter 方法</span></span>
<span class="line"><span>public class AuthLoginReqVO {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @NotEmpty(message = &quot;登录账号不能为空&quot;)</span></span>
<span class="line"><span>    @Length(min = 4, max = 16, message = &quot;账号长度为 4-16 位&quot;)</span></span>
<span class="line"><span>    @Pattern(regexp = &quot;^[A-Za-z0-9]+$&quot;, message = &quot;账号格式为数字以及字母&quot;)</span></span>
<span class="line"><span>    private String username;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @NotEmpty(message = &quot;密码不能为空&quot;)</span></span>
<span class="line"><span>    @Length(min = 4, max = 16, message = &quot;密码长度为 4-16 位&quot;)</span></span>
<span class="line"><span>    private String password;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 第二步（情况二）如果方法的参数是普通类型，则在方法参数上直接添加参数校验的注解。代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>// Controller 示例</span></span>
<span class="line"><span>@Validated</span></span>
<span class="line"><span>public class DictDataController {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @GetMapping(value = &quot;/get&quot;)</span></span>
<span class="line"><span>    public CommonResult&lt;DictDataRespVO&gt; getDictData(@RequestParam(&quot;id&quot;) @NotNull(message = &quot;编号不能为空&quot;) Long id) {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Service 示例，一般放在接口上</span></span>
<span class="line"><span>public interface DictDataService {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    DictDataDO getDictData(@NotNull(message = &quot;编号不能为空&quot;) Long id);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③ 启动项目，模拟调用 RESTful API 接口，少填写几个参数，看看参数校验是否生效。</p><p>疑问：Controller 做了参数校验后，Service 是否需要做参数校验？</p><p>是需要的。Service 可能会被别的 Service 进行调用，也会存在参数不正确的情况，所以必须进行参数校验。</p><h2 id="_3-自定义注解" tabindex="-1"><a class="header-anchor" href="#_3-自定义注解"><span><a href="#_3-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3">#</a> 3. 自定义注解</span></a></h2><p>如果 Validator 内置的参数校验注解不满足需求时，我们也可以<strong>自定义</strong>参数校验的注解。</p><p>在项目的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-common/" target="_blank" rel="noopener noreferrer"><code>yudao-common</code></a> 的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/validation/" target="_blank" rel="noopener noreferrer"><code>validation</code></a> 包下，就自定义了多个参数校验的注解，以 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/validation/Mobile.java" target="_blank" rel="noopener noreferrer"><code>@Mobile</code></a> 注解来举例，它提供了手机格式的校验。</p><p>① 第一步，新建 <code>@Mobile</code> 注解，并设置自定义校验器为 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/validation/MobileValidator.java" target="_blank" rel="noopener noreferrer">MobileValidator</a> 类。代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>@Target({</span></span>
<span class="line"><span>        ElementType.METHOD,</span></span>
<span class="line"><span>        ElementType.FIELD,</span></span>
<span class="line"><span>        ElementType.ANNOTATION_TYPE,</span></span>
<span class="line"><span>        ElementType.CONSTRUCTOR,</span></span>
<span class="line"><span>        ElementType.PARAMETER,</span></span>
<span class="line"><span>        ElementType.TYPE_USE</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span>@Retention(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span>@Documented</span></span>
<span class="line"><span>@Constraint(</span></span>
<span class="line"><span>        validatedBy = MobileValidator.class // 设置校验器</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>public @interface Mobile {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    String message() default &quot;手机号格式不正确&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    Class&lt;?&gt;[] groups() default {};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    Class&lt;? extends Payload&gt;[] payload() default {};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 第二步，新建 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/validation/MobileValidator.java" target="_blank" rel="noopener noreferrer">MobileValidator</a> 校验器。代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>public class MobileValidator implements ConstraintValidator&lt;Mobile, String&gt; {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void initialize(Mobile annotation) {</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public boolean isValid(String value, ConstraintValidatorContext context) {</span></span>
<span class="line"><span>        // 如果手机号为空，默认不校验，即校验通过</span></span>
<span class="line"><span>        if (StrUtil.isEmpty(value)) {</span></span>
<span class="line"><span>            return true;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        // 校验手机</span></span>
<span class="line"><span>        return ValidationUtils.isMobile(value);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③ 第三步，在需要手机格式校验的参数上添加 <code>@Mobile</code> 注解。示例代码如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>public class AppAuthLoginReqVO {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @NotEmpty(message = &quot;手机号不能为空&quot;)</span></span>
<span class="line"><span>    @Mobile // &lt;=== here</span></span>
<span class="line"><span>    private String mobile;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="_4-更多使用文档" tabindex="-1"><a class="header-anchor" href="#_4-更多使用文档"><span><a href="#_4-%E6%9B%B4%E5%A4%9A%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3">#</a> 4. 更多使用文档</span></a></h2><p>更多关于 Validator 的使用，可以系统阅读 <a href="https://www.iocoder.cn/Spring-Boot/Validation/?yudao" target="_blank" rel="noopener noreferrer">《芋道 Spring Boot 参数校验 Validation 入门 》</a> 文章。</p><p>例如说，手动参数校验、分组校验、国际化 i18n 等等。</p><h2 id="_5-时间传参" tabindex="-1"><a class="header-anchor" href="#_5-时间传参"><span><a href="#_5-%E6%97%B6%E9%97%B4%E4%BC%A0%E5%8F%82">#</a> 5. 时间传参</span></a></h2><h3 id="_5-1-query-时间传参" tabindex="-1"><a class="header-anchor" href="#_5-1-query-时间传参"><span><a href="#_5-1-query-%E6%97%B6%E9%97%B4%E4%BC%A0%E5%8F%82">#</a> 5.1 Query 时间传参</span></a></h3><p>Query 时间传参，指的是 <code>GET</code> 请求、或者 <code>POST</code> 的 form-data 请求。</p><p>① 后端接收时间参数时，需要添加 SpringMVC 的 <code>@DateTimeFormat</code> 注解，并设置时间格式。例如说：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>// JobLogPageReqVO.java</span></span>
<span class="line"><span>@DateTimeFormat(pattern = FORMAT_YEAR_MONTH_DAY_HOUR_MINUTE_SECOND)</span></span>
<span class="line"><span>private LocalDateTime beginTime;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// UserPageReqVO.java</span></span>
<span class="line"><span>@DateTimeFormat(pattern = FORMAT_YEAR_MONTH_DAY_HOUR_MINUTE_SECOND)</span></span>
<span class="line"><span>private LocalDateTime[] createTime;</span></span></code></pre></div><p>② 前端传递时间参数时，需要时间格式为 <code>yyyy-MM-dd HH:mm:ss</code>，和上面的 <code>FORMAT_YEAR_MONTH_DAY_HOUR_MINUTE_SECOND</code> 对应。例如说前端 <code>yudao-ui-admin-vue3</code> 项目：</p><ul><li><code>views/infra/job/logger/index.vue</code> 的 <code>beginTime</code> 或 <code>endTime</code> 参数<br><img src="https://cloud.iocoder.cn/img/后端手册/参数校验/单个时间传参.png" alt="单个时间传参" loading="lazy"></li><li><code>views/system/user/index.vue</code> 的 <code>createTime</code> 参数<br><img src="https://cloud.iocoder.cn/img/后端手册/参数校验/多个时间传参.png" alt="多个时间传参" loading="lazy"></li></ul><h3 id="_5-2-request-body-时间传参" tabindex="-1"><a class="header-anchor" href="#_5-2-request-body-时间传参"><span><a href="#_5-2-request-body-%E6%97%B6%E9%97%B4%E4%BC%A0%E5%8F%82">#</a> 5.2 Request Body 时间传参</span></a></h3><p>Request Body 时间传参，指的是 <code>Post</code>、<code>PUT</code> 等请求，通过 JSON 格式。</p><p>① 后端接收时间参数时，需要添加 SpringMVC 的 <code>@RequestBody</code> 注解，使用 LocalDateTime 属性进行接收。例如说：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/参数校验/RequestBody-server.png" alt=" 注解" tabindex="0" loading="lazy"><figcaption> 注解</figcaption></figure><p>② 前端传递时间参数时，需要时间格式为 Long 时间戳。例如说：</p><ul><li><code>views/system/tenant/TenantForm.vue</code> 的 <code>expireTime</code> 参数</li></ul><figure><img src="https://cloud.iocoder.cn/img/后端手册/参数校验/RequestBody-client.png" alt=" 时间参数" tabindex="0" loading="lazy"><figcaption> 时间参数</figcaption></figure><h3 id="_5-3-response-body-时间响应" tabindex="-1"><a class="header-anchor" href="#_5-3-response-body-时间响应"><span><a href="#_5-3-response-body-%E6%97%B6%E9%97%B4%E5%93%8D%E5%BA%94">#</a> 5.3 Response Body 时间响应</span></a></h3><p>JSON 返回的时间，使用 LocalDateTime 定义属性，会被序列化为 Long 时间戳进行相应。</p><p>例如说 TenantRespVO 的 <code>createTime</code> 属性，效果如下图：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/参数校验/ResponseBody-client.png" alt="Response Body 时间响应" tabindex="0" loading="lazy"><figcaption>Response Body 时间响应</figcaption></figure><h3 id="_5-4-如何自定义-json-时间格式" tabindex="-1"><a class="header-anchor" href="#_5-4-如何自定义-json-时间格式"><span><a href="#_5-4-%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89-json-%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F">#</a> 5.4 如何自定义 JSON 时间格式？</span></a></h3><h4 id="_5-4-1-为什么使用-long-时间戳呢" tabindex="-1"><a class="header-anchor" href="#_5-4-1-为什么使用-long-时间戳呢"><span><a href="#_5-4-1-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8-long-%E6%97%B6%E9%97%B4%E6%88%B3%E5%91%A2">#</a> 5.4.1 为什么使用 Long 时间戳呢？</span></a></h4><p>每个项目希望展示的时间格式可能不同，有希望 <code>yyyy-MM-dd HH:mm:ss</code>，也有希望 <code>yyyy/MM/dd HH:mm:ss</code>，又或者是其它。</p><p>而 Long 时间戳是比较标准的，没有任何“产品需求”的味道，所以使用它。 至于业务希望展示成什么样子，可以通过前端封装统一的 format 方法去实现，更加规范。</p><p>它是通过 LocalDateTime 自定义的 TimestampLocalDateTimeSerializer 和 TimestampLocalDateTimeDeserializer 实现，之后进行如下配置：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/参数校验/YudaoJacksonAutoConfiguration.png" alt="YudaoJacksonAutoConfiguration" tabindex="0" loading="lazy"><figcaption>YudaoJacksonAutoConfiguration</figcaption></figure><h4 id="_5-4-1-全局配置时间格式" tabindex="-1"><a class="header-anchor" href="#_5-4-1-全局配置时间格式"><span><a href="#_5-4-1-%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F">#</a> 5.4.1 全局配置时间格式</span></a></h4><p>如果你想 JSON 全局配置成 <code>yyyy-MM-dd HH:mm:ss</code> 或其它时间格式，通过使用 Jackson 内置的 LocalDateTimeSerializer 和 LocalDateTimeDeserializer 即可，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/参数校验/全局配置时间格式.png" alt="全局配置时间格式" tabindex="0" loading="lazy"><figcaption>全局配置时间格式</figcaption></figure><h4 id="_5-4-2-局部配置时间格式" tabindex="-1"><a class="header-anchor" href="#_5-4-2-局部配置时间格式"><span><a href="#_5-4-2-%E5%B1%80%E9%83%A8%E9%85%8D%E7%BD%AE%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F">#</a> 5.4.2 局部配置时间格式</span></a></h4><p>如果只是部分 VO 的字段想自定义 <code>yyyy-MM-dd HH:mm:ss</code> 或其它时间格式，可通过 Jackson 内置的 <code>@JsonFormat</code> 注解，如下所示：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>// UserRespVO.java</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@JsonSerialize(using = LocalDateTimeSerializer.class) // 序列化（响应）</span></span>
<span class="line"><span>@JsonDeserialize(using = LocalDateDeserializer.class) // 反序列化（请求）</span></span>
<span class="line"><span>@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span>
<span class="line"><span>private LocalDateTime createTime;</span></span></code></pre></div>`,64)]))}const r=n(l,[["render",d],["__file","validator.html.vue"]]),o=JSON.parse('{"path":"/project/yudao-cloud/validator.html","title":"参数校验","lang":"en-US","frontmatter":{"title":"参数校验","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":31,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 参数校验注解","slug":"_1-参数校验注解","link":"#_1-参数校验注解","children":[{"level":3,"title":"# 1.1 常用注解","slug":"_1-1-常用注解","link":"#_1-1-常用注解","children":[]},{"level":3,"title":"# 1.2 不常用注解","slug":"_1-2-不常用注解","link":"#_1-2-不常用注解","children":[]}]},{"level":2,"title":"# 2. 参数校验使用","slug":"_2-参数校验使用","link":"#_2-参数校验使用","children":[]},{"level":2,"title":"# 3. 自定义注解","slug":"_3-自定义注解","link":"#_3-自定义注解","children":[]},{"level":2,"title":"# 4. 更多使用文档","slug":"_4-更多使用文档","link":"#_4-更多使用文档","children":[]},{"level":2,"title":"# 5. 时间传参","slug":"_5-时间传参","link":"#_5-时间传参","children":[{"level":3,"title":"# 5.1 Query 时间传参","slug":"_5-1-query-时间传参","link":"#_5-1-query-时间传参","children":[]},{"level":3,"title":"# 5.2 Request Body 时间传参","slug":"_5-2-request-body-时间传参","link":"#_5-2-request-body-时间传参","children":[]},{"level":3,"title":"# 5.3 Response Body 时间响应","slug":"_5-3-response-body-时间响应","link":"#_5-3-response-body-时间响应","children":[]},{"level":3,"title":"# 5.4 如何自定义 JSON 时间格式？","slug":"_5-4-如何自定义-json-时间格式","link":"#_5-4-如何自定义-json-时间格式","children":[]}]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":7.96,"words":2387},"filePathRelative":"project/yudao-cloud/validator.md","localizedDate":"July 7, 2024"}');export{r as comp,o as data};
