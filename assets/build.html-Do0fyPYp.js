import{_ as l,g as t,o as d,c,e,h as a,f as i,w as n,a as o}from"./app-BRTHG7K9.js";const p={},u=o('<h1 id="功能开启" tabindex="-1"><a class="header-anchor" href="#功能开启"><span>功能开启</span></a></h1><p>项目提供统一的支付中心，提供微信、支付宝等支付渠道的支付、退款等能力，方便业务模块进行快速接入，无需关注各种繁琐的支付 API。</p><figure><img src="https://cloud.iocoder.cn/img/支付手册/功能开启/统一接入.png" alt="统一接入" tabindex="0" loading="lazy"><figcaption>统一接入</figcaption></figure><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span><a href="#_1-%E6%A6%82%E8%BF%B0">#</a> 1. 概述</span></a></h2><p>它由如下 3 部分组成：</p><p>① <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-spring-boot-starter-biz-pay/" target="_blank" rel="noopener noreferrer"><code>yudao-spring-boot-starter-biz-pay</code></a> 组件：对接微信、支付宝等支付，提供统一的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-spring-boot-starter-biz-pay/src/main/java/cn/iocoder/yudao/framework/pay/core/client/PayClient.java" target="_blank" rel="noopener noreferrer">PayClient 支付客户端</a>。</p><figure><img src="https://cloud.iocoder.cn/img/支付手册/功能开启/PayClient类图.png" alt="PayClient 类图" tabindex="0" loading="lazy"><figcaption>PayClient 类图</figcaption></figure><p>② <a href="https://github.com/YunaiV/yudao-cloud/tree/master/yudao-module-pay" target="_blank" rel="noopener noreferrer"><code>yudao-module-pay</code></a> 后端模块：实现支付中心的后端功能，包括支付、退款等能力。</p><ul><li>基于 PayClient 支付客户端，对接微信、支付宝等支付渠道。</li><li>对内提供 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-pay/yudao-module-pay-api/src/main/java/cn/iocoder/yudao/module/pay/api/order/PayOrderApi.java" target="_blank" rel="noopener noreferrer">PayOrderApi</a> 统一支付 API 能力、<a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-pay/yudao-module-pay-api/src/main/java/cn/iocoder/yudao/module/pay/api/refund/PayRefundApi.java" target="_blank" rel="noopener noreferrer">PayRefundApi</a> 统一退款 API 能力。</li></ul><p>③ 支付中心的前端，提供支付中心的管理后台，可进行支付渠道的配置、支付订单、退款单的查看等操作。</p><ul><li>Vue2 版本：<a href="https://gitee.com/yudaocode/yudao-ui-admin-vue2/tree/master/src/views/pay" target="_blank" rel="noopener noreferrer"><code>@/views/pay</code></a> 目录</li><li>Vue3 版本：<a href="https://github.com/yudaocode/yudao-ui-admin-vue3/tree/master/src/views/pay" target="_blank" rel="noopener noreferrer"><code>@/views/pay</code></a> 目录</li></ul><h2 id="_2-功能开启" tabindex="-1"><a class="header-anchor" href="#_2-功能开启"><span><a href="#_2-%E5%8A%9F%E8%83%BD%E5%BC%80%E5%90%AF">#</a> 2. 功能开启</span></a></h2><p>考虑到编译速度，默认 <code>yudao-module-pay</code> 模块是关闭的，需要手动开启。步骤如下：</p><ul><li>第一步，导入支付的 SQL 数据库脚本</li><li>第二步，启动 <code>yudao-module-pay</code> 服务</li><li>第三步，开启支付相关的 Job 任务</li></ul><h3 id="_2-1-第一步-导入-sql" tabindex="-1"><a class="header-anchor" href="#_2-1-第一步-导入-sql"><span><a href="#_2-1-%E7%AC%AC%E4%B8%80%E6%AD%A5-%E5%AF%BC%E5%85%A5-sql">#</a> 2.1 第一步，导入 SQL</span></a></h3><p>点击 <a href="https://t.zsxq.com/15mEuhfnK" target="_blank" rel="noopener noreferrer"><code>pay-2024-01-05.sql.zip</code></a> 下载附件，解压出 SQL 文件，然后导入到数据库中。</p><p>友情提示：↑↑↑ pay.sql 是可以点击下载的！ ↑↑↑</p><figure><img src="https://cloud.iocoder.cn/img/支付手册/功能开启/第二步-表结构.png" alt="表结构" tabindex="0" loading="lazy"><figcaption>表结构</figcaption></figure><h3 id="_2-2-第二步-启动-pay-服务" tabindex="-1"><a class="header-anchor" href="#_2-2-第二步-启动-pay-服务"><span><a href="#_2-2-%E7%AC%AC%E4%BA%8C%E6%AD%A5-%E5%90%AF%E5%8A%A8-pay-%E6%9C%8D%E5%8A%A1">#</a> 2.2 第二步，启动 pay 服务</span></a></h3><p>① 运行该服务的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-pay/yudao-module-pay-biz/src/main/java/cn/iocoder/yudao/module/pay/PayServerApplication.java" target="_blank" rel="noopener noreferrer">PayServerApplication</a> 启动类，看到 <code>&quot;Started PayServerApplication in 18.105 seconds&quot;</code> 说明开启成功。</p><p>② 然后，访问前端的支付菜单，确认功能是否生效。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/支付手册/功能开启/第三步-01.png" alt="确认功能是否生效" tabindex="0" loading="lazy"><figcaption>确认功能是否生效</figcaption></figure><p>至此，我们就成功开启了支付的功能 🙂</p><h3 id="_2-3-第三步-开启支付-job" tabindex="-1"><a class="header-anchor" href="#_2-3-第三步-开启支付-job"><span><a href="#_2-3-%E7%AC%AC%E4%B8%89%E6%AD%A5-%E5%BC%80%E5%90%AF%E6%94%AF%E4%BB%98-job">#</a> 2.3 第三步，开启支付 Job</span></a></h3>',24),s=o('<p>② 在 XXL-Job 的 [执行器管理] 菜单，添加 <code>pay-server</code> 执行器。然后，需要重启 PayServerApplication 服务，成功注册到 XXL-Job 上。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/支付手册/功能开启/XXL-Job-执行器.png" alt="XXL-Job 执行器" tabindex="0" loading="lazy"><figcaption>XXL-Job 执行器</figcaption></figure><p>③ 在 XXL-Job 的 [任务管理] 菜单，添加 <code>payNotifyJob</code>、<code>payOrderSyncJob</code>、<code>payOrderExpireJob</code>、<code>payRefundSyncJob</code> 任务，并进行开启。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/支付手册/功能开启/XXL-Job-任务.png" alt="XXL-Job 任务" tabindex="0" loading="lazy"><figcaption>XXL-Job 任务</figcaption></figure><h2 id="_3-功能介绍" tabindex="-1"><a class="header-anchor" href="#_3-功能介绍"><span><a href="#_3-%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D">#</a> 3. 功能介绍</span></a></h2><h3 id="_3-1-应用信息" tabindex="-1"><a class="header-anchor" href="#_3-1-应用信息"><span><a href="#_3-1-%E5%BA%94%E7%94%A8%E4%BF%A1%E6%81%AF">#</a> 3.1 应用信息</span></a></h3><p>对应 [支付管理 -&gt; 应用信息] 菜单，进行支付渠道、支付应用的管理。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/支付手册/功能开启/菜单-应用信息.png" alt="支付管理 -&gt; 应用信息" tabindex="0" loading="lazy"><figcaption>支付管理 -&gt; 应用信息</figcaption></figure><h4 id="_3-1-1-支付应用" tabindex="-1"><a class="header-anchor" href="#_3-1-1-支付应用"><span><a href="#_3-1-1-%E6%94%AF%E4%BB%98%E5%BA%94%E7%94%A8">#</a> 3.1.1 支付应用</span></a></h4><p>每个要接入支付中心的业务，对应一个支付应用。例如说：商城订单算一个应用，预约订单算一个应用。</p><p>点击【新增】按钮，可以进行支付应用的配置，保存在 <code>pay_app</code> 表。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/支付手册/功能开启/支付应用.png" alt="支付应用" tabindex="0" loading="lazy"><figcaption>支付应用</figcaption></figure><ul><li>支付结果的回调地址：每个业务需要实现一个支付回调接口，在用户支付成功时，支付中心会进行回调。<a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-pay/yudao-module-pay-biz/src/main/java/cn/iocoder/yudao/module/pay/controller/admin/demo/PayDemoOrderController.java#L50-L58" target="_blank" rel="noopener noreferrer">示例 1</a>、<a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-mall/yudao-module-trade-biz/src/main/java/cn/iocoder/yudao/module/trade/controller/app/order/AppTradeOrderController.java#L64-L70" target="_blank" rel="noopener noreferrer">示例 2</a></li><li>退款结果的回调地址：每个业务需要实现一个退款回调接口，在用户退款成功时，支付中心会进行回调。<a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-pay/yudao-module-pay-biz/src/main/java/cn/iocoder/yudao/module/pay/controller/admin/demo/PayDemoOrderController.java#L68-L76" target="_blank" rel="noopener noreferrer">示例 1</a></li></ul><p>为什么要有支付应用？直接配置支付渠道不行吗？</p><ol><li>一个系统中，可能有多个业务需要，每个业务的支付、退款回调地址不同。</li><li>同时，每个业务的订单编号可能重复，需要使用支付应用进行隔离，只要求在每个支付应用下保持唯一即可。</li><li>另外，每个业务可能想要配置不同的支付渠道。</li></ol><h4 id="_3-1-2-支付渠道" tabindex="-1"><a class="header-anchor" href="#_3-1-2-支付渠道"><span><a href="#_3-1-2-%E6%94%AF%E4%BB%98%E6%B8%A0%E9%81%93">#</a> 3.1.2 支付渠道</span></a></h4><p>每个支付应用下，可以配置多个支付渠道。例如说：这里“示例应用”就配置了支付宝 PC 网站支付、支付宝 Wap 网站支付等等。</p><p>点击【√】或者【×】图标，可以进行支付应用的配置，保存在 <code>pay_channel</code> 表。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/支付手册/功能开启/支付渠道.png" alt="支付渠道" tabindex="0" loading="lazy"><figcaption>支付渠道</figcaption></figure><p>支付费率？</p><p>参见 <a href="https://zhuanlan.zhihu.com/p/352559274" target="_blank" rel="noopener noreferrer">《第三方支付的费率、限额、通道分析》</a> 文档。</p><h3 id="_3-2-支付订单" tabindex="-1"><a class="header-anchor" href="#_3-2-支付订单"><span><a href="#_3-2-%E6%94%AF%E4%BB%98%E8%AE%A2%E5%8D%95">#</a> 3.2 支付订单</span></a></h3><p>对应 [支付管理 -&gt; 支付订单] 菜单，进行支付订单的查看。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/支付手册/功能开启/支付订单.png" alt="支付订单" tabindex="0" loading="lazy"><figcaption>支付订单</figcaption></figure><p>一般情况下，每个业务订单对应一条支付订单，保存在 <code>pay_order</code> 表，通过 <code>merchant_order_id</code> 字段关联。</p><h3 id="_3-3-退款订单" tabindex="-1"><a class="header-anchor" href="#_3-3-退款订单"><span><a href="#_3-3-%E9%80%80%E6%AC%BE%E8%AE%A2%E5%8D%95">#</a> 3.3 退款订单</span></a></h3><p>对应 [支付管理 -&gt; 退款订单] 菜单，进行退款订单的查看。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/支付手册/功能开启/退款订单.png" alt="退款订单" tabindex="0" loading="lazy"><figcaption>退款订单</figcaption></figure><p>一般情况下，每个业务退款对应一条退款订单，保存在 <code>pay_refund</code> 表，通过 <code>merchant_refund_no</code> 字段关联。</p><h3 id="_3-4-回调通知" tabindex="-1"><a class="header-anchor" href="#_3-4-回调通知"><span><a href="#_3-4-%E5%9B%9E%E8%B0%83%E9%80%9A%E7%9F%A5">#</a> 3.4 回调通知</span></a></h3><p>对应 [支付管理 -&gt; 回调通知] 菜单，查看支付、退款的回调业务的结果。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/支付手册/功能开启/回调通知.png" alt="回调通知" tabindex="0" loading="lazy"><figcaption>回调通知</figcaption></figure><h3 id="_3-5-支付回调【重要】" tabindex="-1"><a class="header-anchor" href="#_3-5-支付回调【重要】"><span><a href="#_3-5-%E6%94%AF%E4%BB%98%E5%9B%9E%E8%B0%83%E3%80%90%E9%87%8D%E8%A6%81%E3%80%91">#</a> 3.5 支付回调【重要】</span></a></h3><p>这里，我们要配置支付【<strong>中心</strong>】提供给支付【<strong>渠道</strong>】的回调地址，不同于上面支付【<strong>应用</strong>】的回调地址。整体的回调关系如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/支付手册/功能开启/回调流程.png" alt="回调流程" tabindex="0" loading="lazy"><figcaption>回调流程</figcaption></figure>',35),g=e("code",null,"http://yunai.natapp1.cc",-1),h=o('<p>② 在 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-server/src/main/resources/application-local.yaml#L196-L197" target="_blank" rel="noopener noreferrer"><code>application-local.yaml</code></a> 配置文件中，修改 <code>yudao.pay</code> 配置项，设置为支付【中心】的回调地址。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/支付手册/功能开启/配置回调地址-Cloud.png" alt="配置回调地址" tabindex="0" loading="lazy"><figcaption>配置回调地址</figcaption></figure><ul><li><code>yudao.pay.order-notify-url</code> 配置项：对应 PayNotifyController 的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-pay/yudao-module-pay-biz/src/main/resources/application-local.yaml#L130-L131" target="_blank" rel="noopener noreferrer"><code>#notifyOrder(...)</code></a> 方法</li><li><code>yudao.pay.refund-notify-url</code> 配置项：对应 PayNotifyController 的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-pay/yudao-module-pay-biz/src/main/resources/application-local.yaml#L130-L131" target="_blank" rel="noopener noreferrer"><code>#notifyRefund(...)</code></a> 方法</li></ul><p>如果你想理解的更深入，可以后续 debug 断条调试。</p><h3 id="_3-6-接入示例" tabindex="-1"><a class="header-anchor" href="#_3-6-接入示例"><span><a href="#_3-6-%E6%8E%A5%E5%85%A5%E7%A4%BA%E4%BE%8B">#</a> 3.6 接入示例</span></a></h3><p>对应 [支付管理 -&gt; 接入示例 -&gt; 支付&amp;退款案例] 菜单，提供一个支付、退款的接入示例。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/支付手册/功能开启/接入示例.png" alt="支付&amp;退款案例" tabindex="0" loading="lazy"><figcaption>支付&amp;退款案例</figcaption></figure><p>详细说明，可见如下文档：</p><ul><li><a href="/pay/alipay-pay-demo">《支付宝支付接入》</a></li><li><a href="/pay/refund-demo">《支付宝、微信退款接入》</a></li></ul>',9);function y(f,m){const r=t("RouteLink");return d(),c("div",null,[u,e("p",null,[a("① 参考 "),i(r,{to:"/job/"},{default:n(()=>[a("《定时任务》")]),_:1}),a(" 文档，将 Job 定时任务开启。")]),s,e("p",null,[a("① 由于支付回调需要外网，可参考 "),i(r,{to:"/natapp/"},{default:n(()=>[a("《内网穿透》")]),_:1}),a(" 文档，将本地的 48080 端口，转发到外网中。这里，我的域名是 "),g,a("。")]),h])}const _=l(p,[["render",y],["__file","build.html.vue"]]),E=JSON.parse('{"path":"/project/yudao-cloud/pay/build.html","title":"功能开启","lang":"en-US","frontmatter":{"title":"功能开启","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":82,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"# 2. 功能开启","slug":"_2-功能开启","link":"#_2-功能开启","children":[{"level":3,"title":"# 2.1 第一步，导入 SQL","slug":"_2-1-第一步-导入-sql","link":"#_2-1-第一步-导入-sql","children":[]},{"level":3,"title":"# 2.2 第二步，启动 pay 服务","slug":"_2-2-第二步-启动-pay-服务","link":"#_2-2-第二步-启动-pay-服务","children":[]},{"level":3,"title":"# 2.3 第三步，开启支付 Job","slug":"_2-3-第三步-开启支付-job","link":"#_2-3-第三步-开启支付-job","children":[]}]},{"level":2,"title":"# 3. 功能介绍","slug":"_3-功能介绍","link":"#_3-功能介绍","children":[{"level":3,"title":"# 3.1 应用信息","slug":"_3-1-应用信息","link":"#_3-1-应用信息","children":[]},{"level":3,"title":"# 3.2 支付订单","slug":"_3-2-支付订单","link":"#_3-2-支付订单","children":[]},{"level":3,"title":"# 3.3 退款订单","slug":"_3-3-退款订单","link":"#_3-3-退款订单","children":[]},{"level":3,"title":"# 3.4 回调通知","slug":"_3-4-回调通知","link":"#_3-4-回调通知","children":[]},{"level":3,"title":"# 3.5 支付回调【重要】","slug":"_3-5-支付回调【重要】","link":"#_3-5-支付回调【重要】","children":[]},{"level":3,"title":"# 3.6 接入示例","slug":"_3-6-接入示例","link":"#_3-6-接入示例","children":[]}]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":7.35,"words":2206},"filePathRelative":"project/yudao-cloud/pay/build.md","localizedDate":"July 7, 2024"}');export{_ as comp,E as data};
