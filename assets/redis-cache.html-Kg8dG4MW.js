import{_ as e,o as a,c as i,a as o}from"./app-BRTHG7K9.js";const r={},n=o(`<h1 id="redis-缓存" tabindex="-1"><a class="header-anchor" href="#redis-缓存"><span>Redis 缓存</span></a></h1><p><a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-redis/" target="_blank" rel="noopener noreferrer"><code>yudao-spring-boot-starter-redis</code></a> 技术组件，使用 Redis 实现缓存的功能，它有 2 种使用方式：</p><ul><li>编程式缓存：基于 Spring Data Redis 框架的 RedisTemplate 操作模板</li><li>声明式缓存：基于 Spring Cache 框架的 <code>@Cacheable</code> 等等注解</li></ul><h2 id="_1-编程式缓存" tabindex="-1"><a class="header-anchor" href="#_1-编程式缓存"><span><a href="#_1-%E7%BC%96%E7%A8%8B%E5%BC%8F%E7%BC%93%E5%AD%98">#</a> 1. 编程式缓存</span></a></h2><p>友情提示：</p><p>如果你未学习过 Spring Data Redis 框架，可以后续阅读 <a href="http://www.iocoder.cn/Spring-Boot/Redis/?yudao" target="_blank" rel="noopener noreferrer">《芋道 Spring Boot Redis 入门》</a> 文章。</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.redisson&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;redisson-spring-boot-starter&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div><p>由于 Redisson 提供了分布式锁、队列、限流等特性，所以使用它作为 Spring Data Redis 的客户端。</p><h3 id="_1-1-spring-data-redis-配置" tabindex="-1"><a class="header-anchor" href="#_1-1-spring-data-redis-配置"><span><a href="#_1-1-spring-data-redis-%E9%85%8D%E7%BD%AE">#</a> 1.1 Spring Data Redis 配置</span></a></h3><p>① 在 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-server/src/main/resources/application-local.yaml#L60-L64" target="_blank" rel="noopener noreferrer"><code>application-local.yaml</code></a> 配置文件中，通过 <code>spring.redis</code> 配置项，设置 Redis 的配置。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/Redis缓存/01.png" alt="Spring Data Redis 配置" tabindex="0" loading="lazy"><figcaption>Spring Data Redis 配置</figcaption></figure><p>② 在 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-redis/src/main/java/cn/iocoder/yudao/framework/redis/config/YudaoRedisAutoConfiguration.java" target="_blank" rel="noopener noreferrer">YudaoRedisAutoConfiguration</a> 配置类，设置使用 JSON 序列化 value 值。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/Redis缓存/02.png" alt="YudaoRedisAutoConfiguration 配置类" tabindex="0" loading="lazy"><figcaption>YudaoRedisAutoConfiguration 配置类</figcaption></figure><h3 id="_1-2-实战案例" tabindex="-1"><a class="header-anchor" href="#_1-2-实战案例"><span><a href="#_1-2-%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B">#</a> 1.2 实战案例</span></a></h3><p>以访问令牌 Access Token 的缓存来举例子，讲解项目中是如何使用 Spring Data Redis 框架的。</p><figure><img src="https://doc.iocoder.cn/img/Redis缓存/07.png" alt="Access Token 示例" tabindex="0" loading="lazy"><figcaption>Access Token 示例</figcaption></figure><h4 id="_1-2-1-引入依赖" tabindex="-1"><a class="header-anchor" href="#_1-2-1-引入依赖"><span><a href="#_1-2-1-%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96">#</a> 1.2.1 引入依赖</span></a></h4><p>在 <code>yudao-module-system-biz</code> 模块中，引入 <code>yudao-spring-boot-starter-redis</code> 技术组件。如下所示：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;yudao-spring-boot-starter-redis&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div><h4 id="_1-2-2-oauth2accesstokendo" tabindex="-1"><a class="header-anchor" href="#_1-2-2-oauth2accesstokendo"><span><a href="#_1-2-2-oauth2accesstokendo">#</a> 1.2.2 OAuth2AccessTokenDO</span></a></h4><p>新建 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/dal/dataobject/oauth2/OAuth2AccessTokenDO.java" target="_blank" rel="noopener noreferrer">OAuth2AccessTokenDO</a> 类，访问令牌 Access Token 类。代码如下：</p><figure><img src="https://doc.iocoder.cn/img/Redis缓存/03.png" alt="OAuth2AccessTokenDO 类" tabindex="0" loading="lazy"><figcaption>OAuth2AccessTokenDO 类</figcaption></figure><p>友情提示：</p><ul><li>① 如果值是【简单】的 String 或者 Integer 等类型，无需创建数据实体。</li><li>② 如果值是【复杂对象】时，建议在 <code>dal/dataobject</code> 包下，创建对应的数据实体。</li></ul><h4 id="_1-2-3-rediskeyconstants" tabindex="-1"><a class="header-anchor" href="#_1-2-3-rediskeyconstants"><span><a href="#_1-2-3-rediskeyconstants">#</a> 1.2.3 RedisKeyConstants</span></a></h4><p>为什么要定义 Redis Key 常量？</p><p>每个 <code>yudao-module-xxx</code> 模块，都有一个 RedisKeyConstants 类，定义该模块的 Redis Key 的信息。目的是，避免 Redis Key 散落在 Service 业务代码中，像对待数据库的表一样，对待每个 Redis Key。通过这样的方式，如果我们想要了解一个模块的 Redis 的使用情况，只需要查看 RedisKeyConstants 类即可。</p><p>在 <code>yudao-module-system</code> 模块的 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/dal/redis/RedisKeyConstants.java" target="_blank" rel="noopener noreferrer">RedisKeyConstants</a> 类中，新建 OAuth2AccessTokenDO 对应的 Redis Key 定义 <code>OAUTH2_ACCESS_TOKEN</code>。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/Redis缓存/04.png" alt="RedisKeyConstants 类" tabindex="0" loading="lazy"><figcaption>RedisKeyConstants 类</figcaption></figure><h4 id="_1-2-4-oauth2accesstokenredisdao" tabindex="-1"><a class="header-anchor" href="#_1-2-4-oauth2accesstokenredisdao"><span><a href="#_1-2-4-oauth2accesstokenredisdao">#</a> 1.2.4 OAuth2AccessTokenRedisDAO</span></a></h4><p>新建 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/dal/redis/oauth2/OAuth2AccessTokenRedisDAO.java" target="_blank" rel="noopener noreferrer">OAuth2AccessTokenRedisDAO</a> 类，是 OAuth2AccessTokenDO 的 RedisDAO 实现。代码如下：</p><figure><img src="https://doc.iocoder.cn/img/Redis缓存/05.png" alt="OAuth2AccessTokenRedisDAO 类" tabindex="0" loading="lazy"><figcaption>OAuth2AccessTokenRedisDAO 类</figcaption></figure><h4 id="_1-2-5-oauth2tokenserviceimpl" tabindex="-1"><a class="header-anchor" href="#_1-2-5-oauth2tokenserviceimpl"><span><a href="#_1-2-5-oauth2tokenserviceimpl">#</a> 1.2.5 OAuth2TokenServiceImpl</span></a></h4><p>在 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/service/oauth2/OAuth2TokenServiceImpl.java" target="_blank" rel="noopener noreferrer">OAuth2TokenServiceImpl</a> 中，只要注入 OAuth2AccessTokenRedisDAO Bean，非常简洁干净的进行 OAuth2AccessTokenDO 的缓存操作，无需关心具体的实现。代码如下：</p><figure><img src="https://doc.iocoder.cn/img/Redis缓存/06.png" alt="OAuth2TokenServiceImpl 类" tabindex="0" loading="lazy"><figcaption>OAuth2TokenServiceImpl 类</figcaption></figure><h2 id="_2-声明式缓存" tabindex="-1"><a class="header-anchor" href="#_2-声明式缓存"><span><a href="#_2-%E5%A3%B0%E6%98%8E%E5%BC%8F%E7%BC%93%E5%AD%98">#</a> 2. 声明式缓存</span></a></h2><p>友情提示：</p><p>如果你未学习过 Spring Cache 框架，可以后续阅读 <a href="http://www.iocoder.cn/Spring-Boot/Cache/?yudao" target="_blank" rel="noopener noreferrer">《芋道 Spring Boot Cache 入门》</a> 文章。</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div><p>相比来说 Spring Data Redis 编程式缓存，Spring Cache 声明式缓存的使用更加便利，一个 <code>@Cacheable</code> 注解即可实现缓存的功能。示例如下：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>@Cacheable(value = &quot;users&quot;, key = &quot;#id&quot;)</span></span>
<span class="line"><span>UserDO getUserById(Integer id);</span></span></code></pre></div><h3 id="_2-1-spring-cache-配置" tabindex="-1"><a class="header-anchor" href="#_2-1-spring-cache-配置"><span><a href="#_2-1-spring-cache-%E9%85%8D%E7%BD%AE">#</a> 2.1 Spring Cache 配置</span></a></h3><p>① 在 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-server/src/main/resources/application.yaml#L60-L64" target="_blank" rel="noopener noreferrer"><code>application.yaml</code></a> 配置文件中，通过 <code>spring.redis</code> 配置项，设置 Redis 的配置。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/Redis缓存/10.png" alt="Spring Cache 配置" tabindex="0" loading="lazy"><figcaption>Spring Cache 配置</figcaption></figure><p>② 在 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-redis/src/main/java/cn/iocoder/yudao/framework/redis/config/YudaoCacheAutoConfiguration.java" target="_blank" rel="noopener noreferrer">YudaoCacheAutoConfiguration</a> 配置类，设置使用 JSON 序列化 value 值。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/Redis缓存/11.png" alt="YudaoCacheAutoConfiguration 配置类" tabindex="0" loading="lazy"><figcaption>YudaoCacheAutoConfiguration 配置类</figcaption></figure><h3 id="_2-2-常见注解" tabindex="-1"><a class="header-anchor" href="#_2-2-常见注解"><span><a href="#_2-2-%E5%B8%B8%E8%A7%81%E6%B3%A8%E8%A7%A3">#</a> 2.2 常见注解</span></a></h3><h4 id="_2-2-1-cacheable-注解" tabindex="-1"><a class="header-anchor" href="#_2-2-1-cacheable-注解"><span><a href="#_2-2-1-cacheable-%E6%B3%A8%E8%A7%A3">#</a> 2.2.1 @Cacheable 注解</span></a></h4><p><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-context/src/main/java/org/springframework/cache/annotation/Cacheable.java" target="_blank" rel="noopener noreferrer"><code>@Cacheable</code></a> 注解：添加在方法上，缓存方法的执行结果。执行过程如下：</p><ul><li>1）首先，判断方法执行结果的缓存。如果有，则直接返回该缓存结果。</li><li>2）然后，执行方法，获得方法结果。</li><li>3）之后，根据是否满足缓存的条件。如果满足，则缓存方法结果到缓存。</li><li>4）最后，返回方法结果。</li></ul><h4 id="_2-2-2-cacheput-注解" tabindex="-1"><a class="header-anchor" href="#_2-2-2-cacheput-注解"><span><a href="#_2-2-2-cacheput-%E6%B3%A8%E8%A7%A3">#</a> 2.2.2 @CachePut 注解</span></a></h4><p><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-context/src/main/java/org/springframework/cache/annotation/CachePut.java" target="_blank" rel="noopener noreferrer"><code>@CachePut</code></a> 注解，添加在方法上，缓存方法的执行结果。不同于 <code>@Cacheable</code> 注解，它的执行过程如下：</p><ul><li>1）首先，执行方法，获得方法结果。也就是说，无论是否有缓存，都会执行方法。</li><li>2）然后，根据是否满足缓存的条件。如果满足，则缓存方法结果到缓存。</li><li>3）最后，返回方法结果。</li></ul><h4 id="_2-2-3-cacheevict-注解" tabindex="-1"><a class="header-anchor" href="#_2-2-3-cacheevict-注解"><span><a href="#_2-2-3-cacheevict-%E6%B3%A8%E8%A7%A3">#</a> 2.2.3 @CacheEvict 注解</span></a></h4><p><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/cache/annotation/CacheEvict.java" target="_blank" rel="noopener noreferrer"><code>@CacheEvict</code></a> 注解，添加在方法上，删除缓存。</p><h3 id="_2-3-实战案例" tabindex="-1"><a class="header-anchor" href="#_2-3-实战案例"><span><a href="#_2-3-%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B">#</a> 2.3 实战案例</span></a></h3><p>在 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/service/permission/RoleServiceImpl.java" target="_blank" rel="noopener noreferrer">RoleServiceImpl</a> 中，使用 Spring Cache 实现了 Role 角色缓存，采用【被动读】的方案。原因是：</p><figure><img src="https://doc.iocoder.cn/img/Redis缓存/12.png" alt="RoleServiceImpl" tabindex="0" loading="lazy"><figcaption>RoleServiceImpl</figcaption></figure><ul><li>【被动读】相对能够保证 Redis 与 MySQL 的一致性</li><li>绝大数数据不需要放到 Redis 缓存中，采用【主动写】会将非必要的数据进行缓存</li></ul><p>友情提示：</p><p>如果你未学习过 MySQL 与 Redis 一致性的问题，可以后续阅读 <a href="https://www.iocoder.cn/Fight/How-Redis-and-MySQL-double-write-consistency-guarantee/?yudao" target="_blank" rel="noopener noreferrer">《Redis 与 MySQL 双写一致性如何保证？ 》</a> 文章。</p><p>① 执行 <code>#getRoleFromCache(...)</code> 方法，从 MySQL 读取数据后，向 Redis 写入缓存。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/Redis缓存/13.png" alt="getTestDemo 方法" tabindex="0" loading="lazy"><figcaption>getTestDemo 方法</figcaption></figure><p>② 执行 <code>#updateRole(...)</code> 或 <code>#deleteRole(...)</code> 方法，在更新或者删除 MySQL 数据后，从 Redis 删除缓存。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/Redis缓存/14.png" alt="getTestDemo 方法" tabindex="0" loading="lazy"><figcaption>getTestDemo 方法</figcaption></figure><p>补充说明：</p><p>如果你在多个项目里，使用了 Redis 想通 db 的话，可以通过 <code>spring.cache.redis.key-prefix</code> 解决，可见 <a href="https://gitee.com/zhijiantianya/ruoyi-vue-pro/pulls/998/" target="_blank" rel="noopener noreferrer">https://gitee.com/zhijiantianya/ruoyi-vue-pro/pulls/998/</a></p><h3 id="_2-4-过期时间" tabindex="-1"><a class="header-anchor" href="#_2-4-过期时间"><span><a href="#_2-4-%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4">#</a> 2.4 过期时间</span></a></h3><p>Spring Cache 默认使用 <code>spring.cache.redis.time-to-live</code> 配置项，设置缓存的过期时间，项目默认为 1 小时。</p><p>如果你想自定义过期时间，可以在 <code>@Cacheable</code> 注解中的 <code>cacheNames</code> 属性中，添加 <code>#{过期时间}</code> 后缀，单位是秒。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/Redis缓存/过期时间.png" alt="过期时间" tabindex="0" loading="lazy"><figcaption>过期时间</figcaption></figure><p>实现的原来，参考 <a href="https://juejin.cn/post/7102222578026020871" target="_blank" rel="noopener noreferrer">《Spring @Cacheable 扩展支持自定义过期时间 》</a> 文章。</p><h2 id="_3-redis-监控" tabindex="-1"><a class="header-anchor" href="#_3-redis-监控"><span><a href="#_3-redis-%E7%9B%91%E6%8E%A7">#</a> 3. Redis 监控</span></a></h2><p><code>yudao-module-infra</code> 的 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-infra/yudao-module-infra-biz/src/main/java/cn/iocoder/yudao/module/infra/controller/admin/redis/RedisController.java" target="_blank" rel="noopener noreferrer"><code>redis</code></a> 模块，提供了 Redis 监控的功能。</p><p>点击 [基础设施 -&gt; 监控中心 -&gt; Redis 监控] 菜单，可以查看到 Redis 的基础信息、命令统计、内存信息。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/Redis缓存/21.png" alt="Redis 监控" tabindex="0" loading="lazy"><figcaption>Redis 监控</figcaption></figure>`,76),s=[n];function t(c,d){return a(),i("div",null,s)}const l=e(r,[["render",t],["__file","redis-cache.html.vue"]]),h=JSON.parse('{"path":"/project/rouyi-vue-pro/redis-cache.html","title":"Redis 缓存","lang":"en-US","frontmatter":{"title":"Redis 缓存","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":41,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 编程式缓存","slug":"_1-编程式缓存","link":"#_1-编程式缓存","children":[{"level":3,"title":"# 1.1 Spring Data Redis 配置","slug":"_1-1-spring-data-redis-配置","link":"#_1-1-spring-data-redis-配置","children":[]},{"level":3,"title":"# 1.2 实战案例","slug":"_1-2-实战案例","link":"#_1-2-实战案例","children":[]}]},{"level":2,"title":"# 2. 声明式缓存","slug":"_2-声明式缓存","link":"#_2-声明式缓存","children":[{"level":3,"title":"# 2.1 Spring Cache 配置","slug":"_2-1-spring-cache-配置","link":"#_2-1-spring-cache-配置","children":[]},{"level":3,"title":"# 2.2 常见注解","slug":"_2-2-常见注解","link":"#_2-2-常见注解","children":[]},{"level":3,"title":"# 2.3 实战案例","slug":"_2-3-实战案例","link":"#_2-3-实战案例","children":[]},{"level":3,"title":"# 2.4 过期时间","slug":"_2-4-过期时间","link":"#_2-4-过期时间","children":[]}]},{"level":2,"title":"# 3. Redis 监控","slug":"_3-redis-监控","link":"#_3-redis-监控","children":[]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":5.58,"words":1675},"filePathRelative":"project/rouyi-vue-pro/redis-cache.md","localizedDate":"July 7, 2024"}');export{l as comp,h as data};
