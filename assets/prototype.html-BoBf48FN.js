import{_ as n,o as s,c as a,a as i}from"./app-BRTHG7K9.js";const t={},e=i(`<h2 id="mo-ta" tabindex="-1"><a class="header-anchor" href="#mo-ta"><span>Mô tả</span></a></h2><p><strong>Mẫu thiết kế Prototype</strong> (Prototype Pattern) là một Mẫu thiết kế thiết kế tạo đối tượng (creational design pattern), cho phép bạn sao chép các đối tượng đã tồn tại mà không cần phụ thuộc vào lớp của chúng.</p><p>Prototype Pattern chủ yếu được sử dụng để sao chép đối tượng. Đối tượng gốc và đối tượng sao chép có cùng kiểu dữ liệu, nhưng không chia sẻ cùng một bộ nhớ.</p><h3 id="sao-chep-sau-va-sao-chep-nong" tabindex="-1"><a class="header-anchor" href="#sao-chep-sau-va-sao-chep-nong"><span>Sao chép sâu và sao chép nông</span></a></h3><p>Sao chép nông (shallow copy) chỉ sao chép các giá trị của các trường của đối tượng, trong khi các trường tham chiếu vẫn trỏ đến cùng một đối tượng.</p><p>Ví dụ: Nếu một đối tượng có một trường tham chiếu đến một chuỗi, và chúng ta sao chép đối tượng này một cách nông (shallow copy), thì hai đối tượng sẽ trỏ đến cùng một chuỗi.</p><p>Sao chép sâu (deep copy) là quá trình sao chép tất cả các trường và các đối tượng được tham chiếu bởi các trường đó. Điều này đảm bảo rằng các đối tượng sao chép và đối tượng gốc không chia sẻ cùng một bộ nhớ.</p><h2 id="ung-dung" tabindex="-1"><a class="header-anchor" href="#ung-dung"><span>Ứng dụng</span></a></h2><ul><li>Khi bạn cần sao chép một số đối tượng và đồng thời muốn mã của bạn độc lập với lớp của các đối tượng đó, bạn có thể sử dụng Prototype Pattern.</li><li>Nếu sự khác biệt giữa các lớp con chỉ nằm trong cách khởi tạo đối tượng của chúng, bạn có thể sử dụng Mẫu thiết kế này để giảm số lượng lớp con. Người khác có thể tạo ra các lớp con này để tạo ra các đối tượng cụ thể.</li></ul><h2 id="cau-truc" tabindex="-1"><a class="header-anchor" href="#cau-truc"><span>Cấu trúc</span></a></h2><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20210506094301.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ol><li><strong>Prototype</strong> (Prototype) là một giao diện khai báo phương thức sao chép. Trong hầu hết các trường hợp, chỉ có một phương thức sao chép được gọi là <code>clone</code>.</li><li><strong>Concrete Prototype</strong> (Concrete Prototype) là lớp triển khai phương thức sao chép. Ngoài việc sao chép dữ liệu của đối tượng gốc vào đối tượng sao chép, phương thức này cũng có thể xử lý các trường hợp đặc biệt trong quá trình sao chép, như sao chép các đối tượng liên quan và giải quyết các phụ thuộc đệ quy.</li><li><strong>Client</strong> (Client) có thể sao chép bất kỳ đối tượng nào đã triển khai giao diện Prototype.</li></ol><h2 id="pseudocode" tabindex="-1"><a class="header-anchor" href="#pseudocode"><span>Pseudocode</span></a></h2><p>Trong ví dụ này, <strong>Prototype Pattern</strong> cho phép bạn tạo ra các bản sao hoàn toàn giống nhau của các đối tượng hình học mà không cần phụ thuộc vào lớp của chúng.</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20210506095002.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>Tất cả các lớp hình dạng đều tuân thủ cùng một giao diện cung cấp phương thức clone. Trước khi sao chép các giá trị biến thành đối tượng kết quả, các lớp con có thể gọi phương thức clone của lớp cha.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// Base prototype.</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">abstract</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Shape</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> is</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    field X: int</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    field Y: int</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    field color: string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // A regular constructor.</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    constructor Shape() is</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // The prototype constructor. A fresh object is initialized</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // with values from the existing object.</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    constructor Shape(source: Shape) is</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        this()</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        this.X = source.X</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        this.Y = source.Y</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        this.color = source.color</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // The clone operation returns one of the Shape subclasses.</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    abstract</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> method clone():Shape</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// Concrete prototype. The cloning method creates a new object</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// in one go by calling the constructor of the current class and</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// passing the current object as the constructor&#39;s argument.</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// Performing all the actual copying in the constructor helps to</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// keep the result consistent: the constructor will not return a</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// result until the new object is fully built; thus, no object</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// can have a reference to a partially-built clone.</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Rectangle</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> extends</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Shape</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> is</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    field width: int</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    field height: int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    constructor </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Rectangle</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(source: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Rectangle</span><span style="color:#E06C75;--shiki-dark:#E06C75;">) is</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // A parent constructor call is needed to copy private</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // fields defined in the parent class.</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        super(source)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        this.width = source.width</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        this.height = source.height</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    method clone():</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Shape</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> is</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        return new </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Rectangle</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(this)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">class </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Circle</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> extends </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Shape</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> is</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    field radius: int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    constructor </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Circle</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(source: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Circle</span><span style="color:#E06C75;--shiki-dark:#E06C75;">) is</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        super(source)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        this.radius = source.radius</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    method clone():</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Shape</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> is</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        return new </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Circle</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(this)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// Somewhere in the client code.</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">class </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Application</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> is</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    field shapes: array of </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Shape</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    constructor </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Application</span><span style="color:#E06C75;--shiki-dark:#E06C75;">() is</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        Circle</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> circle = new </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Circle</span><span style="color:#E06C75;--shiki-dark:#E06C75;">()</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        circle.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">X</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> = 10</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        circle.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Y</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> = 10</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        circle.radius = 20</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        shapes.add(circle)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        Circle</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> anotherCircle = circle.clone()</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        shapes.add(anotherCircle)</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // The \`anotherCircle\` variable contains an exact copy</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // of the \`circle\` object.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        Rectangle</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> rectangle = new </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Rectangle</span><span style="color:#E06C75;--shiki-dark:#E06C75;">()</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        rectangle.width = 10</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        rectangle.height = 20</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        shapes.add(rectangle)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    method businessLogic() is</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // Prototype rocks because it lets you produce a copy of</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // an object without knowing anything about its type.</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        Array</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> shapesCopy = new </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Array</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> of </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Shapes</span><span style="color:#E06C75;--shiki-dark:#E06C75;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // For instance, we don&#39;t know the exact elements in the</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // shapes array. All we know is that they are all</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // shapes. But thanks to polymorphism, when we call the</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // \`clone\` method on a shape the program checks its real</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // class and runs the appropriate clone method defined</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // in that class. That&#39;s why we get proper clones</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // instead of a set of simple Shape objects.</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        foreach (s in shapes) do</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">            shapesCopy.add(s.clone())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // The \`shapesCopy\` array contains exact copies of the</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // \`shape\` array&#39;s children.</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vi-du" tabindex="-1"><a class="header-anchor" href="#vi-du"><span>Ví dụ</span></a></h2><p><strong>Ví dụ sử dụng:</strong> Mô hình Prototype được sử dụng rộng rãi trong Java, đặc biệt trong việc tạo bản sao của các đối tượng có sẵn.</p><p>Trong thư viện Java, chúng ta có một ví dụ về mô hình Prototype là giao diện <code>Cloneable</code> và phương thức <code>clone()</code> trong lớp <code>Object</code>.</p><p><strong>Cách nhận biết:</strong> Mô hình Prototype có thể được nhận biết bằng cách kiểm tra xem lớp có phương thức <code>clone()</code> hoặc <code>copy()</code> không.</p><h2 id="vi-du-1" tabindex="-1"><a class="header-anchor" href="#vi-du-1"><span>Ví dụ</span></a></h2><p><strong>Ví dụ sử dụng:</strong> Giao diện <code>Cloneable</code> của Java là một ví dụ cụ thể của mẫu Prototype có thể sử dụng ngay lập tức.</p><p>Bất kỳ lớp nào cũng có thể triển khai giao diện này để có tính chất có thể sao chép.</p><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--" target="_blank" rel="noopener noreferrer"><code>java.lang.Object#clone()</code></a> (Lớp phải triển khai giao diện <a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Cloneable.html" target="_blank" rel="noopener noreferrer"><code>java.lang.Cloneable</code></a>)</li></ul><p><strong>Cách nhận biết:</strong> Prototype có thể dễ dàng được nhận biết thông qua các phương thức như <code>clone</code> hoặc <code>copy</code>.</p><h2 id="moi-quan-he-voi-cac-mau-khac" tabindex="-1"><a class="header-anchor" href="#moi-quan-he-voi-cac-mau-khac"><span>Mối quan hệ với các mẫu khác</span></a></h2><ul><li>Trong giai đoạn thiết kế ban đầu, thường sử dụng [[Factory Method Pattern]] (đơn giản hơn và dễ tùy chỉnh hơn thông qua các lớp con) và sau đó tiến triển thành việc sử dụng [[Abstract Factory Pattern]], [[Prototype Pattern]] hoặc [[Builder Pattern]] (linh hoạt hơn nhưng phức tạp hơn).</li><li>[[Abstract Factory Pattern]] thường dựa trên một tập hợp các [[Factory Method Pattern]], nhưng bạn cũng có thể sử dụng [[Prototype Pattern]] để tạo các đối tượng này.</li><li>[[Prototype Pattern]] có thể được sử dụng để lưu trữ lịch sử của [[Command Pattern]].</li><li>Thiết kế sử dụng nhiều [[Composite Pattern]] và [[Decorator Pattern]] thường có lợi từ việc sử dụng [[Prototype Pattern]]. Bạn có thể sao chép cấu trúc phức tạp này thay vì xây dựng lại từ đầu.</li><li>[[Prototype Pattern]] không dựa trên kế thừa, do đó không có nhược điểm của kế thừa. Tuy nhiên, Prototype đòi hỏi quá trình khởi tạo phức tạp cho đối tượng được sao chép. [[Factory Method Pattern]] dựa trên kế thừa, nhưng không yêu cầu quá trình khởi tạo.</li><li>Đôi khi, [[Prototype Pattern]] có thể được sử dụng như một phiên bản đơn giản hóa của [[Memento Pattern]], với điều kiện là trạng thái của đối tượng cần lưu trữ trong lịch sử đơn giản hơn, không cần liên kết với tài nguyên bên ngoài hoặc liên kết có thể dễ dàng tái tạo.</li><li>[[Abstract Factory Pattern]], [[Builder Pattern]] và [[Prototype Pattern]] đều có thể được triển khai bằng [[Singleton Pattern]].</li></ul>`,28),l=[e];function c(o,r){return s(),a("div",null,l)}const h=n(t,[["render",c],["__file","prototype.html.vue"]]),d=JSON.parse('{"path":"/design/design-pattern/patterns/creational/prototype.html","title":"Prototype Pattern","lang":"en-US","frontmatter":{"title":"Prototype Pattern","tags":["design-pattern"],"categories":["design-pattern"],"date created":"2023-10-06T00:00:00.000Z","date modified":"2023-10-06T00:00:00.000Z","description":"Mô tả Mẫu thiết kế Prototype (Prototype Pattern) là một Mẫu thiết kế thiết kế tạo đối tượng (creational design pattern), cho phép bạn sao chép các đối tượng đã tồn tại mà không ...","head":[["meta",{"property":"og:url","content":"https://vanhung4499.github.io/design/design-pattern/patterns/creational/prototype.html"}],["meta",{"property":"og:site_name","content":"VanHung4499"}],["meta",{"property":"og:title","content":"Prototype Pattern"}],["meta",{"property":"og:description","content":"Mô tả Mẫu thiết kế Prototype (Prototype Pattern) là một Mẫu thiết kế thiết kế tạo đối tượng (creational design pattern), cho phép bạn sao chép các đối tượng đã tồn tại mà không ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dunwu/images/master/snap/20210506094301.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-28T15:54:38.000Z"}],["meta",{"property":"article:author","content":"Hung Nguyen"}],["meta",{"property":"article:tag","content":"design-pattern"}],["meta",{"property":"article:modified_time","content":"2024-06-28T15:54:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Prototype Pattern\\",\\"image\\":[\\"https://raw.githubusercontent.com/dunwu/images/master/snap/20210506094301.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/snap/20210506095002.png\\"],\\"dateModified\\":\\"2024-06-28T15:54:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hung Nguyen\\",\\"url\\":\\"https://vanhung4499.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Mô tả","slug":"mo-ta","link":"#mo-ta","children":[{"level":3,"title":"Sao chép sâu và sao chép nông","slug":"sao-chep-sau-va-sao-chep-nong","link":"#sao-chep-sau-va-sao-chep-nong","children":[]}]},{"level":2,"title":"Ứng dụng","slug":"ung-dung","link":"#ung-dung","children":[]},{"level":2,"title":"Cấu trúc","slug":"cau-truc","link":"#cau-truc","children":[]},{"level":2,"title":"Pseudocode","slug":"pseudocode","link":"#pseudocode","children":[]},{"level":2,"title":"Ví dụ","slug":"vi-du","link":"#vi-du","children":[]},{"level":2,"title":"Ví dụ","slug":"vi-du-1","link":"#vi-du-1","children":[]},{"level":2,"title":"Mối quan hệ với các mẫu khác","slug":"moi-quan-he-voi-cac-mau-khac","link":"#moi-quan-he-voi-cac-mau-khac","children":[]}],"git":{"createdTime":1719590078000,"updatedTime":1719590078000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":5.5,"words":1650},"filePathRelative":"design/design-pattern/patterns/creational/prototype.md","localizedDate":"June 28, 2024","excerpt":"<h2>Mô tả</h2>\\n<p><strong>Mẫu thiết kế Prototype</strong> (Prototype Pattern) là một Mẫu thiết kế thiết kế tạo đối tượng (creational design pattern), cho phép bạn sao chép các đối tượng đã tồn tại mà không cần phụ thuộc vào lớp của chúng.</p>\\n<p>Prototype Pattern chủ yếu được sử dụng để sao chép đối tượng. Đối tượng gốc và đối tượng sao chép có cùng kiểu dữ liệu, nhưng không chia sẻ cùng một bộ nhớ.</p>","autoDesc":true}');export{h as comp,d as data};
