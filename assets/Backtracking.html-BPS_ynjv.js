import{_ as i,o as t,c as l,d as n,a as s,e as a}from"./app-DELCaB9c.js";const c={},o=n(`<h2 id="_1-gioi-thieu-ve-thuat-toan-quay-lui" tabindex="-1"><a class="header-anchor" href="#_1-gioi-thieu-ve-thuat-toan-quay-lui"><span>1. Giới thiệu về thuật toán quay lui</span></a></h2><blockquote><p><strong>Thuật toán quay lui (Backtracking)</strong>: Là một thuật toán tìm kiếm theo phương pháp thử và sai, giúp tránh việc tìm kiếm không cần thiết. Thuật toán này sử dụng ý tưởng thử và sai để tìm kiếm giải pháp của một vấn đề. Khi tiến hành tìm kiếm, nếu gặp một bước không thỏa mãn điều kiện giải pháp hoặc cần thỏa mãn thêm điều kiện giải pháp, thuật toán sẽ quay lại bước trước đó (quay lui) để chọn lựa lại, điều này được gọi là &quot;quay lui&quot;, và điểm trạng thái của một trạng thái thỏa mãn điều kiện quay lui được gọi là &quot;điểm quay lui&quot;.</p></blockquote><p>Đơn giản mà nói, thuật toán quay lui sử dụng một phương pháp &quot;quay lui&quot; khi gặp phải một bước không thể tiếp tục.</p><p>Thuật toán quay lui thường được thực hiện bằng cách sử dụng đệ quy đơn giản, trong quá trình quay lui có thể xảy ra hai trường hợp:</p><ol><li>Tìm thấy một giải pháp có thể.</li><li>Sau khi thử tất cả các phương pháp khả dĩ, không tìm thấy giải pháp.</li></ol><h2 id="_2-hieu-thuat-toan-quay-lui-thong-qua-bai-toan-hoan-vi" tabindex="-1"><a class="header-anchor" href="#_2-hieu-thuat-toan-quay-lui-thong-qua-bai-toan-hoan-vi"><span>2. Hiểu thuật toán quay lui thông qua bài toán hoán vị</span></a></h2><p>Lấy bài toán tìm tất cả các hoán vị của <code>[1, 2, 3]</code> làm ví dụ, chúng ta sẽ giải thích quá trình của thuật toán quay lui.</p><ol><li>Chọn một hoán vị bắt đầu bằng số <code>1</code>. <ol><li>Chọn một hoán vị có số <code>2</code> ở vị trí thứ hai, sau đó chỉ có thể chọn số <code>3</code> ở vị trí cuối cùng. Hoán vị là <code>[1, 2, 3]</code>.</li><li>Quay lui khỏi hoán vị có số <code>3</code> ở vị trí cuối cùng, sau đó quay lui khỏi hoán vị có số <code>2</code> ở vị trí thứ hai. Sau đó chọn một hoán vị có số <code>3</code> ở vị trí thứ hai, sau đó chỉ có thể chọn số <code>2</code> ở vị trí cuối cùng. Hoán vị là <code>[1, 3, 2]</code>.</li></ol></li><li>Quay lui khỏi hoán vị có số <code>2</code> ở vị trí cuối cùng, sau đó quay lui khỏi hoán vị có số <code>1</code> ở vị trí đầu tiên. Sau đó chọn một hoán vị bắt đầu bằng số <code>2</code>. <ol><li>Chọn một hoán vị có số <code>1</code> ở vị trí thứ hai, sau đó chỉ có thể chọn số <code>3</code> ở vị trí cuối cùng. Hoán vị là <code>[2, 1, 3]</code>.</li><li>Quay lui khỏi hoán vị có số <code>3</code> ở vị trí cuối cùng, sau đó quay lui khỏi hoán vị có số <code>1</code> ở vị trí thứ hai. Sau đó chọn một hoán vị có số <code>3</code> ở vị trí thứ hai, sau đó chỉ có thể chọn số <code>1</code> ở vị trí cuối cùng. Hoán vị là <code>[2, 3, 1]</code>.</li></ol></li><li>Quay lui khỏi hoán vị có số <code>1</code> ở vị trí cuối cùng, sau đó quay lui khỏi hoán vị có số <code>3</code> ở vị trí thứ hai, sau đó quay lui khỏi hoán vị có số <code>2</code> ở vị trí đầu tiên. Sau đó chọn một hoán vị bắt đầu bằng số <code>3</code>. <ol><li>Chọn một hoán vị có số <code>1</code> ở vị trí thứ hai, sau đó chỉ có thể chọn số <code>2</code> ở vị trí cuối cùng. Hoán vị là <code>[3, 1, 2]</code>.</li><li>Quay lui khỏi hoán vị có số <code>2</code> ở vị trí cuối cùng, sau đó quay lui khỏi hoán vị có số <code>1</code> ở vị trí thứ hai. Sau đó chọn một hoán vị có số <code>2</code> ở vị trí thứ hai, sau đó chỉ có thể chọn số <code>1</code> ở vị trí cuối cùng. Hoán vị là <code>[3, 2, 1]</code>.</li></ol></li></ol><p>Tóm lại quá trình quay lui của hoán vị:</p><ul><li><strong>Liệt kê lần lượt từng số có thể xuất hiện ở mỗi vị trí, các số đã xuất hiện trước đó không thể xuất hiện lại.</strong></li><li>Đối với mỗi vị trí, thực hiện các bước sau: <ol><li><strong>Chọn phần tử</strong>: Chọn một phần tử chưa xuất hiện từ danh sách phần tử có thể chọn.</li><li><strong>Đệ quy tìm kiếm</strong>: Từ phần tử đã chọn, tiếp tục đệ quy tìm kiếm các vị trí còn lại, cho đến khi gặp điều kiện dừng, không tiếp tục tìm kiếm xuống nữa.</li><li><strong>Quay lui</strong>: Quay lui từng bước để chọn một nhánh tìm kiếm khác. Đến khi hoàn thành việc duyệt qua tất cả các nhánh có thể.</li></ol></li></ul><p>Đối với quy trình quyết định trên, chúng ta cũng có thể sử dụng một cây quyết định để biểu diễn:</p><figure><img src="https://raw.githubusercontent.com/vanhung4499/images/master/snap/20231002094932.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>Từ cây quyết định của hoán vị, chúng ta có thể thấy:</p><ul><li>Mỗi tầng có một hoặc nhiều nút khác nhau, những nút này cùng với các nhánh kết nối đại diện cho &quot;các lựa chọn khác nhau&quot;.</li><li>Mỗi nút đại diện cho một &quot;trạng thái&quot; của việc giải quyết bài toán hoán vị, những trạng thái này được biểu diễn bằng &quot;các giá trị khác nhau&quot;.</li><li>Mỗi lần đi xuống một tầng là chọn một &quot;phần tử&quot; từ danh sách các phần tử có thể chọn.</li><li>Khi một nhánh quyết định hoàn thành, chúng ta sẽ quay lui từng bước.</li><li>Mỗi lần quay lui một tầng, chúng ta sẽ xóa &quot;phần tử&quot; đã chọn khỏi &quot;trạng thái hiện tại&quot;, quay trở lại trạng thái trước khi chưa chọn phần tử đó (hoặc nói cách khác là đặt lại trạng thái), từ đó tiếp tục khám phá các nhánh khác.</li></ul><p>Dựa trên ý tưởng và cây quyết định trên, chúng ta có thể viết mã thuật toán quay lui cho hoán vị như sau (giả sử mảng đầu vào <code>nums</code> không chứa các phần tử trùng lặp):</p><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Solution</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> permute</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;font-style:italic;--shiki-dark-font-style:italic;">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;font-style:italic;--shiki-dark-font-style:italic;">nums</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: List[</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]) -&gt; List[List[</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]]:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        res </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> []    </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Lưu tất cả các kết quả thỏa mãn điều kiện</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        path </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> []   </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Lưu kết quả hiện tại thỏa mãn điều kiện</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> backtracking</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;font-style:italic;--shiki-dark-font-style:italic;">nums</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">):             </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># nums là danh sách phần tử có thể chọn</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            if</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> len</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(path) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> len</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(nums):      </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Nếu đã tìm thấy một kết quả thỏa mãn điều kiện</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                res.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">append</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(path[:])         </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Thêm kết quả hiện tại vào danh sách kết quả</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                return</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> i </span><span style="color:#C678DD;--shiki-dark:#C678DD;">in</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> range</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">len</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(nums)):      </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Liệt kê danh sách phần tử có thể chọn</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> nums[i] </span><span style="color:#C678DD;--shiki-dark:#C678DD;">not</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> path:     </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Chọn từ danh sách phần tử chưa xuất hiện trong đường đi</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    path.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">append</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(nums[i])    </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Chọn phần tử</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">                    backtracking</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(nums)      </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Đệ quy tìm kiếm</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    path.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">pop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()              </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Quay lui</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        backtracking</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(nums)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> res</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-mau-chung-cua-thuat-toan-quay-lui" tabindex="-1"><a class="header-anchor" href="#_3-mau-chung-cua-thuat-toan-quay-lui"><span>3. Mẫu chung của thuật toán quay lui</span></a></h2><p>Dựa trên code của thuật toán quay lui cho hoán vị, chúng ta có thể tạo ra một mẫu chung cho thuật toán quay lui. Code mẫu chung của thuật toán quay lui như sau:</p><div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">res </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> []    </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Lưu tất cả các kết quả thỏa mãn điều kiện</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">path </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> []   </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Lưu kết quả hiện tại thỏa mãn điều kiện</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> backtracking</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;font-style:italic;--shiki-dark-font-style:italic;">nums</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">):             </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># nums là danh sách phần tử có thể chọn</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> gặp điều kiện dừng:           </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Nếu đã tìm thấy một kết quả thỏa mãn điều kiện</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        res.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">append</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(path[:])         </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Thêm kết quả hiện tại vào danh sách kết quả</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> i </span><span style="color:#C678DD;--shiki-dark:#C678DD;">in</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> range</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">len</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(nums)):      </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Liệt kê danh sách phần tử có thể chọn</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        path.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">append</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(nums[i])        </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Chọn phần tử</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        backtracking</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(nums)          </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Đệ quy tìm kiếm</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        path.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">pop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()                  </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Quay lui</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">backtracking</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(nums)</span></span></code></pre></div><p>Trong mẫu chung này, chúng ta cần điền vào các phần sau:</p><ul><li><code>res</code>: Một danh sách để lưu tất cả các kết quả thỏa mãn điều kiện.</li><li><code>path</code>: Một danh sách để lưu kết quả hiện tại thỏa mãn điều kiện.</li><li><code>backtracking</code>: Hàm đệ quy để thực hiện thuật toán quay lui.</li><li><code>nums</code>: Danh sách các phần tử có thể chọn.</li><li><code>gặp điều kiện dừng</code>: Điều kiện để dừng quá trình quay lui và thêm kết quả hiện tại vào danh sách kết quả.</li></ul><p>Bằng cách sử dụng mẫu chung này, chúng ta có thể áp dụng thuật toán quay lui cho nhiều bài toán khác nhau chỉ bằng việc điền vào các phần tương ứng.</p><h2 id="_4-ba-buoc-co-ban-cua-thuat-toan-quay-lui" tabindex="-1"><a class="header-anchor" href="#_4-ba-buoc-co-ban-cua-thuat-toan-quay-lui"><span>4. Ba bước cơ bản của thuật toán quay lui</span></a></h2><p>Các bước giải quyết vấn đề bằng thuật toán quay lui trên mạng khá trừu tượng, ở đây chỉ là một giới thiệu đơn giản.</p>`,24),e=s("ol",null,[s("li",null,[s("p",null,[s("strong",null,"Xác định không gian giải pháp của vấn đề đã cho"),a(": Cần xác định không gian giải pháp phù hợp, bao gồm cách tổ chức giải pháp và ràng buộc rõ ràng.")]),s("ul",null,[s("li",null,[s("strong",null,"Cách tổ chức giải pháp"),a(": Tổ chức giải pháp thành một bộ n phần tử "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"x"),s("mn",null,"1")]),s("mo",{separator:"true"},","),s("msub",null,[s("mi",null,"x"),s("mn",null,"2")]),s("mo",{separator:"true"},","),s("mo",null,"…"),s("mo",{separator:"true"},","),s("msub",null,[s("mi",null,"x"),s("mi",null,"n")])]),s("annotation",{encoding:"application/x-tex"},"{x_1, x_2, …, x_n}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"x"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"x"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"minner"},"…"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"x"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])])]),a(".")]),s("li",null,[s("strong",null,"Ràng buộc rõ ràng"),a(": Giới hạn phạm vi giá trị của các thành phần giải pháp, có thể kiểm soát kích thước không gian giải pháp.")])])]),s("li",null,[s("p",null,[s("strong",null,"Xác định cấu trúc tổ chức không gian giải pháp"),a(": Cấu trúc tổ chức không gian giải pháp thường được biểu diễn dưới dạng cây không gian giải pháp, dựa trên cây không gian giải pháp khác nhau, không gian giải pháp được chia thành cây con, cây hoán vị, cây m-ary, v.v.")])]),s("li",null,[s("p",null,[s("strong",null,"Tìm kiếm không gian giải pháp"),a(": Theo chiến lược tìm kiếm theo chiều sâu, dựa trên ràng buộc ẩn (hàm ràng buộc và hàm giới hạn), tìm kiếm giải pháp khả thi hoặc giải pháp tốt nhất của vấn đề trong không gian giải pháp. Khi phát hiện rằng nút hiện tại không đáp ứng điều kiện giải pháp, quay lui và thử các đường khác.")]),s("ul",null,[s("li",null,"Nếu chỉ cần tìm giải pháp khả thi, chỉ cần đặt hàm ràng buộc."),s("li",null,"Nếu muốn tìm giải pháp tốt nhất, cần đặt hàm ràng buộc và hàm giới hạn.")])])],-1),h=n(`<p>Cách tiếp cận thuật toán quay lui này quá trừu tượng, không thuận tiện cho việc suy nghĩ khi làm bài tập hàng ngày. Trên thực tế, dựa trên các chương trình đệ quy, chúng ta đã tổng kết ba bước cơ bản của đệ quy. Tương tự, dựa trên ý tưởng cơ bản của thuật toán quay lui, chúng ta cũng tổng kết ba bước cơ bản của thuật toán quay lui.</p><p>Ý tưởng cơ bản của thuật toán quay lui là: <strong>Tìm kiếm giải pháp của vấn đề dựa trên chiến lược tìm kiếm theo chiều sâu, dựa trên ràng buộc của vấn đề. Khi phát hiện nút hiện tại không đáp ứng điều kiện giải pháp, quay lui và thử các đường khác.</strong></p><p>Vì vậy, khi viết thuật toán quay lui, chúng ta có thể tuân theo ý tưởng này để viết thuật toán quay lui, các bước cụ thể như sau:</p><ol><li><strong>Xác định tất cả các lựa chọn</strong>: Vẽ cây quyết định tìm kiếm và dựa trên cây quyết định để xác định phạm vi tìm kiếm và các đường dẫn tương ứng.</li><li><strong>Xác định điều kiện dừng</strong>: Xác định điều kiện dừng đệ quy, cũng như phương pháp xử lý khi đệ quy kết thúc.</li><li><strong>Chuyển đổi cây quyết định và điều kiện dừng thành mã code</strong>: <ol><li>Định nghĩa hàm quay lui (xác định ý nghĩa của hàm, tham số đầu vào, kết quả trả về, v.v.).</li><li>Viết phần thân của hàm quay lui (đưa ra ràng buộc, lựa chọn phần tử, tìm kiếm đệ quy, hủy lựa chọn, v.v.).</li><li>Xác định điều kiện dừng đệ quy (đưa ra điều kiện dừng đệ quy và phương pháp xử lý khi đệ quy kết thúc).</li></ol></li></ol><h3 id="_4-1-xac-đinh-khong-gian-giai-phap" tabindex="-1"><a class="header-anchor" href="#_4-1-xac-đinh-khong-gian-giai-phap"><span>4.1 Xác định không gian giải pháp</span></a></h3><p>Cây quyết định là một công cụ tốt để giúp chúng ta hiểu quy trình tìm kiếm. Chúng ta có thể vẽ cây quyết định của quy trình tìm kiếm và sử dụng cây quyết định đó để xác định phạm vi tìm kiếm và đường dẫn tìm kiếm tương ứng.</p><h3 id="_4-2-xac-đinh-đieu-kien-dung" tabindex="-1"><a class="header-anchor" href="#_4-2-xac-đinh-đieu-kien-dung"><span>4.2 Xác định điều kiện dừng</span></a></h3><p>Điều kiện dừng của thuật toán backtracking cũng chính là đáy của cây quyết định, tức là điều kiện khi không thể thực hiện thêm lựa chọn nào nữa.</p><p>Điều kiện dừng của hàm backtracking thường là độ sâu đã cho, nút lá, nút không phải lá (bao gồm cả nút gốc), tất cả các nút, v.v. Ngoài ra, cần xác định cách xử lý khi đạt đến điều kiện dừng, ví dụ như xuất kết quả, thêm kết quả thỏa mãn hiện tại vào tập hợp, v.v.</p><h3 id="_4-3-chuyen-cay-quyet-đinh-va-đieu-kien-dung-thanh-code" tabindex="-1"><a class="header-anchor" href="#_4-3-chuyen-cay-quyet-đinh-va-đieu-kien-dung-thanh-code"><span>4.3 Chuyển cây quyết định và điều kiện dừng thành code</span></a></h3><p>Sau khi xác định tất cả các lựa chọn và điều kiện dừng, chúng ta có thể chuyển chúng thành mã code. Bước này có thể được thực hiện theo 3 bước:</p><ol><li>Định nghĩa hàm backtracking (xác định ý nghĩa của hàm, các tham số đầu vào và kết quả trả về).</li><li>Viết phần thân của hàm backtracking (xác định ràng buộc, lựa chọn, tìm kiếm đệ quy và hoàn tác lựa chọn).</li><li>Xác định điều kiện dừng đệ quy (xác định điều kiện dừng đệ quy và các hành động khi kết thúc đệ quy).</li></ol><h4 id="_4-3-1-đinh-nghia-ham-backtracking" tabindex="-1"><a class="header-anchor" href="#_4-3-1-đinh-nghia-ham-backtracking"><span>4.3.1 Định nghĩa hàm backtracking</span></a></h4><p>Trong việc định nghĩa hàm backtracking, cần rõ ràng hiểu ý nghĩa của đệ quy, bao gồm các tham số đầu vào và biến toàn cục. Giá trị trả về của hàm nên chỉ ra vấn đề cần giải quyết.</p><p>Ví dụ, trong trường hợp hoán vị, hàm <code>backtracking(nums)</code> có tham số đầu vào là <code>nums</code> (danh sách các phần tử có thể chọn), biến toàn cục là <code>res</code> (mảng chứa tất cả các kết quả thỏa mãn) và <code>path</code> (mảng chứa kết quả thỏa mãn hiện tại). <code>nums</code> đại diện cho các phần tử có thể chọn hiện tại, <code>path</code> được sử dụng để ghi lại trạng thái hiện tại của quá trình đệ quy. <code>res</code> được sử dụng để lưu trữ tất cả các trạng thái của quá trình đệ quy.</p><h4 id="_4-3-2-viet-phan-than-cua-ham-backtracking" tabindex="-1"><a class="header-anchor" href="#_4-3-2-viet-phan-than-cua-ham-backtracking"><span>4.3.2 Viết phần thân của hàm backtracking</span></a></h4><p>Dựa trên danh sách các phần tử có thể chọn, ràng buộc đã cho (ví dụ như các số đã xuất hiện trước đó không thể xuất hiện lại trong các số tiếp theo cần chọn), và biến lưu trạng thái hiện tại, chúng ta có thể viết phần thân của hàm backtracking. Cụ thể là:</p><div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> i </span><span style="color:#C678DD;--shiki-dark:#C678DD;">in</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> range</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">len</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(nums)):          </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Liệt kê danh sách các phần tử có thể chọn</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> Đáp ứng ràng buộc:                  </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Ràng buộc</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        path.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">append</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(nums[i])        </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Chọn phần tử</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        backtracking</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(nums)          </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Tìm kiếm đệ quy</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        path.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">pop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()                  </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Hoàn tác lựa chọn</span></span></code></pre></div><h4 id="_4-3-3-xac-đinh-đieu-kien-dung-đe-quy" tabindex="-1"><a class="header-anchor" href="#_4-3-3-xac-đinh-đieu-kien-dung-đe-quy"><span>4.3.3 Xác định điều kiện dừng đệ quy</span></a></h4><p>Bước này thực chất là chuyển đổi điều kiện dừng đệ quy và các hành động tương ứng khi kết thúc đệ quy thành câu lệnh điều kiện và câu lệnh thực thi tương ứng trong mã code.</p><h3 id="_5-1-tap-con" tabindex="-1"><a class="header-anchor" href="#_5-1-tap-con"><span>5.1 Tập con</span></a></h3><h4 id="_5-1-1-lien-ket-đe-bai" tabindex="-1"><a class="header-anchor" href="#_5-1-1-lien-ket-đe-bai"><span>5.1.1 Liên kết đề bài</span></a></h4><ul><li><a href="https://leetcode.com/problems/subsets/" target="_blank" rel="noopener noreferrer">78. Subsets</a></li></ul><h4 id="_5-1-2-tom-tat-đe-bai" tabindex="-1"><a class="header-anchor" href="#_5-1-2-tom-tat-đe-bai"><span>5.1.2 Tóm tắt đề bài</span></a></h4><p><strong>Mô tả</strong>: Cho một mảng số nguyên <code>nums</code>, các phần tử trong mảng không trùng nhau.</p><p><strong>Yêu cầu</strong>: Trả về tất cả các tập con có thể của mảng đó. Có thể trả về kết quả theo bất kỳ thứ tự nào.</p><p><strong>Giới hạn</strong>:</p>`,27),p=s("ul",null,[s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1"),s("mo",null,"≤"),s("mtext",null,"nums.length"),s("mo",null,"≤"),s("mn",null,"10")]),s("annotation",{encoding:"application/x-tex"},"1 \\le \\text{nums.length} \\le 10")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7804em","vertical-align":"-0.136em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"nums.length")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"10")])])]),a(".")]),s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"−"),s("mn",null,"10"),s("mo",null,"≤"),s("mtext",null,"nums[i]"),s("mo",null,"≤"),s("mn",null,"10")]),s("annotation",{encoding:"application/x-tex"},"-10 \\le \\text{nums[i]} \\le 10")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7804em","vertical-align":"-0.136em"}}),s("span",{class:"mord"},"−"),s("span",{class:"mord"},"10"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"nums[i]")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"10")])])]),a(".")]),s("li",null,[a("Các phần tử trong "),s("code",null,"nums"),a(" không trùng nhau.")])],-1),r=n(`<p><strong>Ví dụ</strong>:</p><ul><li>Ví dụ 1:</li></ul><div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">Input: nums </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">Output: [[],[</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">],[</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">],[</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">],[</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">],[</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">],[</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">],[</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]]</span></span></code></pre></div><ul><li>Ví dụ 2:</li></ul><div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">Input: nums </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">Output: [[],[</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]]</span></span></code></pre></div><h4 id="_5-1-3-y-tuong-giai-quyet" tabindex="-1"><a class="header-anchor" href="#_5-1-3-y-tuong-giai-quyet"><span>5.1.3 Ý tưởng giải quyết</span></a></h4><h5 id="y-tuong-1-giai-thuat-quay-lui" tabindex="-1"><a class="header-anchor" href="#y-tuong-1-giai-thuat-quay-lui"><span>Ý tưởng 1: Giải thuật quay lui</span></a></h5><p>Mỗi phần tử trong mảng có hai lựa chọn: chọn hoặc không chọn.</p><p>Chúng ta có thể biểu diễn việc chọn phần tử bằng cách thêm phần tử đó vào mảng con hiện tại. Hoặc sau khi kết thúc đệ quy hiện tại, chúng ta có thể loại bỏ phần tử đã thêm vào mảng con (cũng gọi là quay lui) để biểu diễn việc không chọn phần tử đó.</p><p>Dưới đây chúng ta sẽ viết giải thuật quay lui tương ứng theo ba bước của giải thuật quay lui.</p><ol><li><p><strong>Xác định tất cả các lựa chọn</strong>: Vẽ cây quyết định dựa trên việc chọn hoặc không chọn mỗi phần tử trong mảng, như hình dưới đây.</p><ul><li><img src="https://raw.githubusercontent.com/vanhung4499/images/master/snap/20220425210640.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ul></li><li><p><strong>Xác định điều kiện dừng</strong>:</p><ul><li>Khi duyệt đến nút lá của cây quyết định, chúng ta dừng lại. Nghĩa là khi đến cuối đường dẫn hiện tại, đệ quy sẽ dừng lại.</li></ul></li><li><p><strong>Chuyển cây quyết định và điều kiện dừng thành Code</strong>:</p><ol><li><p>Định nghĩa hàm quay lui:</p><ul><li><code>backtracking(nums, index):</code> Tham số đầu vào của hàm là <code>nums</code> (danh sách các phần tử có thể chọn), <code>index</code> (đại diện cho phần tử đang xem xét là <code>nums[i]</code>), biến toàn cục là <code>res</code> (mảng chứa tất cả các tập con thỏa mãn) và <code>path</code> (mảng chứa tập con hiện tại thỏa mãn).</li><li>Ý nghĩa của hàm <code>backtracking(nums, index)</code> là: Với việc chọn <code>nums[index]</code>, đệ quy chọn các phần tử còn lại.</li></ul></li><li><p>Viết phần thân của hàm quay lui (chọn phần tử, đệ quy tìm kiếm, quay lui):</p><ul><li>Duyệt qua danh sách các phần tử có thể chọn từ vị trí hiện tại đến cuối mảng, và với mỗi phần tử có thể chọn: <ul><li>Ràng buộc: Không chọn lại các phần tử đã chọn trước đó. Chúng ta bắt đầu duyệt từ vị trí <code>index</code> để tránh việc chọn trùng lặp. Tập con trong tập con không giống với tập con trong hoán vị. Ví dụ: <code>{1, 2}</code> và <code>{2, 1}</code> là tương đương. Để tránh việc chọn trùng lặp, chúng ta không chọn lại các phần tử đã chọn trước đó.</li><li>Chọn phần tử: Thêm phần tử vào mảng con hiện tại.</li><li>Đệ quy tìm kiếm: Với việc chọn phần tử đó, tiếp tục đệ quy xem xét các phần tử tiếp theo.</li><li>Quay lui: Xóa phần tử đã chọn khỏi mảng con hiện tại.</li></ul></li></ul></li></ol><div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> i </span><span style="color:#C678DD;--shiki-dark:#C678DD;">in</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> range</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(index, </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">len</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(nums)):   </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Duyệt qua danh sách các phần tử có thể chọn</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    path.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">append</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(nums[i])            </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Chọn phần tử</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    backtracking</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(nums, i </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)       </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Đệ quy tìm kiếm</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    path.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">pop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()                      </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Quay lui</span></span></code></pre></div><ol start="3"><li>Xác định điều kiện dừng đệ quy (điều kiện dừng đệ quy và phương pháp xử lý khi đệ quy kết thúc): <ul><li>Khi duyệt đến nút lá của cây quyết định, chúng ta dừng lại. Điều này có nghĩa là khi vị trí phần tử đang xem xét đạt đến cuối mảng (tức là <code>start &gt;= len(nums)</code>), đệ quy dừng lại.</li><li>Từ cây quyết định, chúng ta cũng có thể thấy rằng tập con cần lưu trữ tất cả các nút trên cây quyết định, chúng ta cần lưu trữ tất cả các trạng thái đệ quy tìm kiếm. Vì vậy, bất kể có đạt đến điều kiện dừng hay không, chúng ta đều nên đưa kết quả thỏa mãn hiện tại vào tập hợp.</li></ul></li></ol></li></ol><h5 id="y-tuong-1-code" tabindex="-1"><a class="header-anchor" href="#y-tuong-1-code"><span>Ý tưởng 1: Code</span></a></h5><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Solution</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> subsets</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;font-style:italic;--shiki-dark-font-style:italic;">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;font-style:italic;--shiki-dark-font-style:italic;">nums</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: List[</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]) -&gt; List[List[</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]]:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        res </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> []  </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Mảng chứa tất cả các tập con thỏa mãn</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        path </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> []  </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Mảng chứa tập con hiện tại thỏa mãn</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> backtracking</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;font-style:italic;--shiki-dark-font-style:italic;">nums</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;font-style:italic;--shiki-dark-font-style:italic;">index</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">):          </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Đang xem xét phần tử thứ index trong danh sách các phần tử có thể chọn</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            res.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">append</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(path[:])                 </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Thêm tập con hiện tại thỏa mãn vào mảng chứa tất cả các tập con thỏa mãn</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> index </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;=</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> len</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(nums):              </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Đạt đến điều kiện dừng (trong bài này)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                return</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> i </span><span style="color:#C678DD;--shiki-dark:#C678DD;">in</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> range</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(index, </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">len</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(nums)):   </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Duyệt qua danh sách các phần tử có thể chọn</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                path.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">append</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(nums[i])            </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Chọn phần tử</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">                backtracking</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(nums, i </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)       </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Đệ quy tìm kiếm</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                path.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">pop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()                      </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Quay lui</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        backtracking</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(nums, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> res</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="y-tuong-1-phan-tich-đo-phuc-tap" tabindex="-1"><a class="header-anchor" href="#y-tuong-1-phan-tich-đo-phuc-tap"><span>Ý tưởng 1: Phân tích độ phức tạp</span></a></h5>`,14),k=s("ul",null,[s("li",null,[s("strong",null,"Độ phức tạp thời gian"),a(": "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",null,"×"),s("msup",null,[s("mn",null,"2"),s("mi",null,"n")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n \\times 2^n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6644em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])])])])]),s("span",{class:"mclose"},")")])])]),a(", trong đó "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),a(" là số lượng phần tử trong mảng "),s("code",null,"nums"),a(", "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mi",null,"n")])]),s("annotation",{encoding:"application/x-tex"},"2^n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6644em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6644em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])])])])])])])]),a(" là số lượng trạng thái. Mỗi trạng thái cần "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),a(" thời gian để xây dựng tập con.")]),s("li",null,[s("strong",null,"Độ phức tạp không gian"),a(": "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),a(", mỗi trạng thái cần sử dụng "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),a(" không gian để xây dựng tập con.")])],-1),B=n('<h3 id="_5-2-n-queens" tabindex="-1"><a class="header-anchor" href="#_5-2-n-queens"><span>5.2 N-Queens</span></a></h3><h4 id="_5-2-1-lien-ket-đe-bai" tabindex="-1"><a class="header-anchor" href="#_5-2-1-lien-ket-đe-bai"><span>5.2.1 Liên kết đề bài</span></a></h4><ul><li><a href="https://leetcode.com/problems/n-queens/" target="_blank" rel="noopener noreferrer">51. N-Queens</a></li></ul><h4 id="_5-2-2-tom-tat-đe-bai" tabindex="-1"><a class="header-anchor" href="#_5-2-2-tom-tat-đe-bai"><span>5.2.2 Tóm tắt đề bài</span></a></h4><p><strong>Mô tả</strong>: Cho một số nguyên <code>n</code>.</p><p><strong>Yêu cầu</strong>: Trả về tất cả các cách sắp xếp khác nhau của vấn đề &quot;N-Queens&quot;. Mỗi cách sắp xếp đại diện cho một cách đặt các quân hậu trên bàn cờ &quot;N-Queens&quot; mà không có quân hậu nào tấn công lẫn nhau.</p><p><strong>Giới hạn</strong>:</p>',7),d=s("ul",null,[s("li",null,[s("strong",null,"Vấn đề N-Queens"),a(": Đặt "),s("code",null,"n"),a(" quân hậu lên bàn cờ "),s("code",null,"n * n"),a(" và đảm bảo rằng không có quân hậu nào tấn công lẫn nhau.")]),s("li",null,[s("strong",null,"Quân hậu không thể tấn công nhau"),a(": Các quân hậu không thể nằm trên cùng một hàng, cột hoặc đường chéo.")]),s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1"),s("mo",null,"≤"),s("mi",null,"n"),s("mo",null,"≤"),s("mn",null,"9")]),s("annotation",{encoding:"application/x-tex"},"1 \\le n \\le 9")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7804em","vertical-align":"-0.136em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7719em","vertical-align":"-0.136em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"9")])])]),a(".")])],-1),u=n(`<p><strong>Ví dụ</strong>:</p><ul><li>Ví dụ 1:</li></ul><div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">Input: n </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 4</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">Output: [[</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;.Q..&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;...Q&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Q...&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;..Q.&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">],[</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;..Q.&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Q...&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;...Q&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;.Q..&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">Giải thích: Như hình dưới đây, vấn đề N</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">Queens có </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> cách sắp xếp khác nhau.</span></span></code></pre></div><figure><img src="https://raw.githubusercontent.com/vanhung4499/images/master/snap/queens.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_5-2-3-y-tuong-giai-quyet" tabindex="-1"><a class="header-anchor" href="#_5-2-3-y-tuong-giai-quyet"><span>5.2.3 Ý tưởng giải quyết</span></a></h4><h5 id="y-tuong-1-giai-thuat-quay-lui-1" tabindex="-1"><a class="header-anchor" href="#y-tuong-1-giai-thuat-quay-lui-1"><span>Ý tưởng 1: Giải thuật quay lui</span></a></h5><p>Đây là một bài toán quay lui cổ điển. Chúng ta có thể đặt các quân hậu theo thứ tự từ trên xuống dưới, từ trái sang phải.</p><p>Với bàn cờ <code>n * n</code>, mỗi hàng có <code>n</code> cột, do đó có <code>n</code> cách để chọn vị trí cho quân hậu trong mỗi hàng. Chúng ta có thể thử từng cột trong hàng hiện tại và kiểm tra xem nó có xung đột với các quân hậu đã đặt trước đó hay không. Nếu không có xung đột, chúng ta tiếp tục đặt quân hậu trong hàng tiếp theo. Nếu tất cả các hàng đều được đặt quân hậu mà không có xung đột, chúng ta đã tìm thấy một cách sắp xếp hợp lệ.</p><p>Sau khi đặt quân hậu, chúng ta sẽ tiếp tục đệ quy để đặt quân hậu trong hàng tiếp theo. Nếu không tìm thấy cách sắp xếp hợp lệ, chúng ta sẽ quay lại và thử các vị trí khác cho quân hậu trong hàng hiện tại.</p><p>Dưới đây chúng ta sẽ viết giải thuật quay lui tương ứng theo ba bước của giải thuật quay lui.</p><ol><li><p><strong>Xác định tất cả các lựa chọn</strong>: Vẽ cây quyết định dựa trên việc chọn hoặc không chọn mỗi vị trí cho quân hậu trong hàng, như hình dưới đây.</p><figure><img src="https://raw.githubusercontent.com/vanhung4499/images/master/snap/20231002101358.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure></li><li><p><strong>Xác định điều kiện dừng</strong>:</p><ul><li>Khi duyệt đến nút lá của cây quyết định, chúng ta dừng lại. Điều này có nghĩa là khi đặt quân hậu vào hàng cuối cùng (tức là <code>row == n</code>), đệ quy dừng lại.</li></ul></li><li><p><strong>Chuyển cây quyết định và điều kiện dừng thành Code</strong>:</p><ol><li><p>Định nghĩa hàm quay lui:</p><ul><li>Đầu tiên, chúng ta sử dụng một ma trận hai chiều <code>chessboard</code> kích thước <code>n * n</code> để biểu diễn bàn cờ hiện tại, trong đó ký tự <code>Q</code> đại diện cho quân hậu, <code>.</code> đại diện cho ô trống, ban đầu tất cả đều là <code>.</code>.</li><li>Sau đó, chúng ta định nghĩa hàm quay lui <code>backtrack(chessboard, row):</code> với tham số đầu vào là <code>chessboard</code> (mảng biểu diễn bàn cờ) và <code>row</code> (đại diện cho hàng hiện tại đang xem xét), biến toàn cục là <code>res</code> (mảng chứa tất cả các cách sắp xếp hợp lệ).</li><li>Ý nghĩa của hàm <code>backtrack(chessboard, row)</code> là: Với việc đặt quân hậu vào hàng <code>row</code> đã cho, tiếp tục đệ quy để đặt quân hậu trong các hàng còn lại.</li></ul></li><li><p>Viết phần thân của hàm quay lui (chọn vị trí, đệ quy tìm kiếm, quay lui):</p><ul><li>Duyệt qua tất cả các cột trong hàng hiện tại. Với mỗi vị trí cột: <ul><li>Ràng buộc: Định nghĩa một phương thức kiểm tra, trước tiên kiểm tra xem vị trí hiện tại có xung đột với các quân hậu đã đặt trước đó không. Nếu không có xung đột, tiếp tục đặt quân hậu trong hàng tiếp theo. Nếu có xung đột, tiếp tục duyệt qua các vị trí cột khác.</li><li>Chọn vị trí: Đặt quân hậu vào vị trí <code>row, col</code>, đặt giá trị tương ứng trong mảng <code>chessboard</code> thành <code>Q</code>.</li><li>Đệ quy tìm kiếm: Với việc đặt quân hậu tại vị trí đó, tiếp tục đệ quy để đặt quân hậu trong các hàng tiếp theo.</li><li>Quay lui: Đặt giá trị tại vị trí <code>row, col</code> trong mảng <code>chessboard</code> thành <code>.</code>.</li></ul></li></ul></li></ol><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Kiểm tra xem vị trí row, col có xung đột với các quân hậu đã đặt trước đó không</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> isValid</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;font-style:italic;--shiki-dark-font-style:italic;">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;font-style:italic;--shiki-dark-font-style:italic;">n</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;font-style:italic;--shiki-dark-font-style:italic;">row</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;font-style:italic;--shiki-dark-font-style:italic;">col</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;font-style:italic;--shiki-dark-font-style:italic;">chessboard</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: List[List[</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">str</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]]):</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    # Kiểm tra xung động cột</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> i </span><span style="color:#C678DD;--shiki-dark:#C678DD;">in</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> range</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(row):</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> chessboard[i][col] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;Q&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> False</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    # Kiểm tra xung đột đường chéo chính</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    i, j </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> row </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, col </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    while</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> i </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> and</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> j </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> chessboard[i][j] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;Q&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> False</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        i </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        j </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    # Kiểm tra xung dột đường chéo phụ</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    i, j </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> row </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, col </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    while</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> i </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> and</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> j </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> n:</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> chessboard[i][j] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;Q&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> False</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        i </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        j </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> True</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> col </span><span style="color:#C678DD;--shiki-dark:#C678DD;">in</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> range</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(n):                            </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Duyệt qua tất cả các cột trong hàng hiện tại</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">isValid</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(n, row, col, chessboard):   </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Nếu vị trí hiện tại không xung đột với các quân hậu đã đặt trước đó</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        chessboard[row][col] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;Q&#39;</span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">              # Đặt quân hậu vào vị trí row, col</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        backtrack</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(row </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, chessboard)          </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"># Đệ quy để đặt quân hậu trong các hàng tiếp theo</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        chessboard[row][col] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;.&#39;</span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">              # Quay lui: Đặt giá trị tại vị trí row, col thành &#39;.&#39;</span></span></code></pre></div><ol start="3"><li>Xác định điều kiện dừng đệ quy (điều kiện dừng đệ quy và phương pháp xử lý khi đệ quy kết thúc): <ul><li>Khi duyệt đến nút lá của cây quyết định, chúng ta dừng lại. Điều này có nghĩa là khi đặt quân hậu vào hàng cuối cùng (tức là <code>row == n</code>), đệ quy dừng lại.</li><li>Khi đệ quy dừng lại, chúng ta sẽ chuyển đổi bàn cờ hiện tại thành định dạng yêu cầu và lưu nó vào mảng kết quả <code>res</code>.</li></ul></li></ol></li></ol><h5 id="y-tuong-1-code-1" tabindex="-1"><a class="header-anchor" href="#y-tuong-1-code-1"><span>Ý tưởng 1: Code</span></a></h5><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Solution</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    res </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> backtrack</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;font-style:italic;--shiki-dark-font-style:italic;">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;font-style:italic;--shiki-dark-font-style:italic;">n</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;font-style:italic;--shiki-dark-font-style:italic;">row</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;font-style:italic;--shiki-dark-font-style:italic;">chessboard</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: List[List[</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">str</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]]):</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> row </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> n:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            temp_res </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> temp </span><span style="color:#C678DD;--shiki-dark:#C678DD;">in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> chessboard:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                temp_str </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">join</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(temp)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                temp_res.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">append</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(temp_str)</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">            self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.res.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">append</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(temp_res)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            return</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> col </span><span style="color:#C678DD;--shiki-dark:#C678DD;">in</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> range</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(n):</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            if</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">isValid</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(n, row, col, chessboard):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                chessboard[row][col] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;Q&#39;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">                self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">backtrack</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(n, row </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, chessboard)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                chessboard[row][col] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;.&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> isValid</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;font-style:italic;--shiki-dark-font-style:italic;">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;font-style:italic;--shiki-dark-font-style:italic;">n</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;font-style:italic;--shiki-dark-font-style:italic;">row</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;font-style:italic;--shiki-dark-font-style:italic;">col</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;font-style:italic;--shiki-dark-font-style:italic;">chessboard</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: List[List[</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">str</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]]):</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> i </span><span style="color:#C678DD;--shiki-dark:#C678DD;">in</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> range</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(row):</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> chessboard[i][col] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;Q&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        i, j </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> row </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, col </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        while</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> i </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> and</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> j </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> chessboard[i][j] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;Q&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> False</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            i </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            j </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        i, j </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> row </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, col </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        while</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> i </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> and</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> j </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> n:</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> chessboard[i][j] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;Q&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> False</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            i </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            j </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> solveNQueens</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;font-style:italic;--shiki-dark-font-style:italic;">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;font-style:italic;--shiki-dark-font-style:italic;">n</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) -&gt; List[List[</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">str</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]]:</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.res.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">clear</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        chessboard </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [[</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;.&#39;</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _ </span><span style="color:#C678DD;--shiki-dark:#C678DD;">in</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> range</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(n)] </span><span style="color:#C678DD;--shiki-dark:#C678DD;">for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _ </span><span style="color:#C678DD;--shiki-dark:#C678DD;">in</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> range</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(n)]</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">backtrack</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(n, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, chessboard)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.res</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="y-tuong-1-phan-tich-đo-phuc-tap-1" tabindex="-1"><a class="header-anchor" href="#y-tuong-1-phan-tich-đo-phuc-tap-1"><span>Ý tưởng 1: Phân tích độ phức tạp</span></a></h5>`,14),y=s("ul",null,[s("li",null,[s("strong",null,"Độ phức tạp thời gian"),a(": "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},"!"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n!)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},"!)")])])]),a(", trong đó "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),a(" là số lượng quân hậu.")]),s("li",null,[s("strong",null,"Độ phức tạp không gian"),a(": "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])]),a(", trong đó "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),a(" là số lượng quân hậu. Số lượng lời gọi đệ quy không vượt quá "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),a(", mỗi bảng cờ có độ phức tạp không gian là "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])]),a(", do đó độ phức tạp không gian là "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])]),a(".")])],-1),m=s("h5",{id:"y-tuong-1-cai-tien",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#y-tuong-1-cai-tien"},[s("span",null,"Ý tưởng 1: Cải tiến")])],-1),g=s("p",null,"Tôi đang viết ý tưởng theo khung giải quyết bài toán quay lui để các bạn có thể dễ hiểu hơn. Khi nào bạn đã quen với lối suy nghĩ bạn có thể linh hoạt hơn trong việc code, không phải rập khuôn như thế này!",-1),F=s("p",null,[a("Nếu bạn suy luận thêm thì ta có thể cải tiến phần kiểm tra xung đột bằng phương pháp đánh dấu. Tức là với một ô "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",{separator:"true"},","),s("mi",null,"j"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"(i, j)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j"),s("span",{class:"mclose"},")")])])]),a(" thì xem thử cột "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"j")]),s("annotation",{encoding:"application/x-tex"},"j")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.854em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j")])])]),a(" và hai đường chéo đi qua nó đã có quân hậu nào chưa. Đối với 2 đường chéo, chúng có đặc điểm sau:")],-1),A=s("ul",null,[s("li",null,[a("Với tất cả các ô "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",{separator:"true"},","),s("mi",null,"j"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"(i, j)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j"),s("span",{class:"mclose"},")")])])]),a(" nằm trên cùng: "),s("ul",null,[s("li",null,[a("Chéo chính: hiêu "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i"),s("mo",null,"−"),s("mi",null,"j")]),s("annotation",{encoding:"application/x-tex"},"i - j")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7429em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.854em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j")])])]),a(" là như nhau")]),s("li",null,[a("Chéo phụ: tổng "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i"),s("mo",null,"+"),s("mi",null,"j")]),s("annotation",{encoding:"application/x-tex"},"i + j")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7429em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.854em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j")])])]),a(" là như nhau")])])])],-1),v=s("p",null,"Từ đó ta có thể áp dụng phương pháp đánh dấu bằng cách sử dụng mảng hoặc set. Bạn có thể tự xử lý xem như một bài tập nhỏ.",-1),b=[o,e,h,p,r,k,B,d,u,y,m,g,F,A,v];function D(C,q){return t(),l("div",null,b)}const x=i(c,[["render",D],["__file","Backtracking.html.vue"]]),E=JSON.parse('{"path":"/dsa/algo/search/backtracking/Backtracking.html","title":"Backtracking","lang":"en-US","frontmatter":{"title":"Backtracking","tags":["dsa","algorithm"],"categories":["dsa","algorithm"],"date created":"2023-10-02T00:00:00.000Z","date modified":"2023-10-02T00:00:00.000Z","description":"1. Giới thiệu về thuật toán quay lui Thuật toán quay lui (Backtracking): Là một thuật toán tìm kiếm theo phương pháp thử và sai, giúp tránh việc tìm kiếm không cần thiết. Thuật ...","head":[["meta",{"property":"og:url","content":"https://vanhung4499.github.io/dsa/algo/search/backtracking/Backtracking.html"}],["meta",{"property":"og:site_name","content":"VanHung4499"}],["meta",{"property":"og:title","content":"Backtracking"}],["meta",{"property":"og:description","content":"1. Giới thiệu về thuật toán quay lui Thuật toán quay lui (Backtracking): Là một thuật toán tìm kiếm theo phương pháp thử và sai, giúp tránh việc tìm kiếm không cần thiết. Thuật ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/vanhung4499/images/master/snap/20231002094932.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-28T15:54:38.000Z"}],["meta",{"property":"article:author","content":"Hung Nguyen"}],["meta",{"property":"article:tag","content":"dsa"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:modified_time","content":"2024-06-28T15:54:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Backtracking\\",\\"image\\":[\\"https://raw.githubusercontent.com/vanhung4499/images/master/snap/20231002094932.png\\",\\"https://raw.githubusercontent.com/vanhung4499/images/master/snap/20220425210640.png\\",\\"https://raw.githubusercontent.com/vanhung4499/images/master/snap/queens.jpg\\",\\"https://raw.githubusercontent.com/vanhung4499/images/master/snap/20231002101358.png\\"],\\"dateModified\\":\\"2024-06-28T15:54:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hung Nguyen\\",\\"url\\":\\"https://vanhung4499.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1. Giới thiệu về thuật toán quay lui","slug":"_1-gioi-thieu-ve-thuat-toan-quay-lui","link":"#_1-gioi-thieu-ve-thuat-toan-quay-lui","children":[]},{"level":2,"title":"2. Hiểu thuật toán quay lui thông qua bài toán hoán vị","slug":"_2-hieu-thuat-toan-quay-lui-thong-qua-bai-toan-hoan-vi","link":"#_2-hieu-thuat-toan-quay-lui-thong-qua-bai-toan-hoan-vi","children":[]},{"level":2,"title":"3. Mẫu chung của thuật toán quay lui","slug":"_3-mau-chung-cua-thuat-toan-quay-lui","link":"#_3-mau-chung-cua-thuat-toan-quay-lui","children":[]},{"level":2,"title":"4. Ba bước cơ bản của thuật toán quay lui","slug":"_4-ba-buoc-co-ban-cua-thuat-toan-quay-lui","link":"#_4-ba-buoc-co-ban-cua-thuat-toan-quay-lui","children":[{"level":3,"title":"4.1 Xác định không gian giải pháp","slug":"_4-1-xac-đinh-khong-gian-giai-phap","link":"#_4-1-xac-đinh-khong-gian-giai-phap","children":[]},{"level":3,"title":"4.2 Xác định điều kiện dừng","slug":"_4-2-xac-đinh-đieu-kien-dung","link":"#_4-2-xac-đinh-đieu-kien-dung","children":[]},{"level":3,"title":"4.3 Chuyển cây quyết định và điều kiện dừng thành code","slug":"_4-3-chuyen-cay-quyet-đinh-va-đieu-kien-dung-thanh-code","link":"#_4-3-chuyen-cay-quyet-đinh-va-đieu-kien-dung-thanh-code","children":[]},{"level":3,"title":"5.1 Tập con","slug":"_5-1-tap-con","link":"#_5-1-tap-con","children":[]},{"level":3,"title":"5.2 N-Queens","slug":"_5-2-n-queens","link":"#_5-2-n-queens","children":[]}]}],"git":{"createdTime":1719590078000,"updatedTime":1719590078000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":21.12,"words":6337},"filePathRelative":"dsa/algo/search/backtracking/Backtracking.md","localizedDate":"June 28, 2024","excerpt":"<h2>1. Giới thiệu về thuật toán quay lui</h2>\\n<blockquote>\\n<p><strong>Thuật toán quay lui (Backtracking)</strong>: Là một thuật toán tìm kiếm theo phương pháp thử và sai, giúp tránh việc tìm kiếm không cần thiết. Thuật toán này sử dụng ý tưởng thử và sai để tìm kiếm giải pháp của một vấn đề. Khi tiến hành tìm kiếm, nếu gặp một bước không thỏa mãn điều kiện giải pháp hoặc cần thỏa mãn thêm điều kiện giải pháp, thuật toán sẽ quay lại bước trước đó (quay lui) để chọn lựa lại, điều này được gọi là \\"quay lui\\", và điểm trạng thái của một trạng thái thỏa mãn điều kiện quay lui được gọi là \\"điểm quay lui\\".</p>\\n</blockquote>","autoDesc":true}');export{x as comp,E as data};
