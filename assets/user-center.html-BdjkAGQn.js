import{_ as i,g as p,o as t,c as l,e as n,h as e,f as o,w as r,a}from"./app-BRTHG7K9.js";const c={},d=a('<h1 id="用户体系" tabindex="-1"><a class="header-anchor" href="#用户体系"><span>用户体系</span></a></h1><p>系统提供了 2 种类型的用户，分别满足对应的管理后台、用户 App 场景。</p><figure><img src="https://cloud.iocoder.cn/img/用户体系/01.png" alt="用户体系" tabindex="0" loading="lazy"><figcaption>用户体系</figcaption></figure><ul><li>AdminUser 管理员用户，前端访问 <a href="https://github.com/yudaocode/yudao-ui-admin-vue3" target="_blank" rel="noopener noreferrer"><code>yudao-ui-admin-vue3</code></a> 管理后台，后端访问 <code>/admin-api/**</code> RESTful API 接口。</li><li>MemberUser 会员用户，前端访问 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-ui-user/" target="_blank" rel="noopener noreferrer"><code>yudao-ui-user</code></a> 用户 App，后端访问 <code>/app-api/**</code> RESTful API 接口。</li></ul>',4),u=a(`<h2 id="_1-表结构" tabindex="-1"><a class="header-anchor" href="#_1-表结构"><span><a href="#_1-%E8%A1%A8%E7%BB%93%E6%9E%84">#</a> 1. 表结构</span></a></h2><p>2 种类型的时候，采用不同数据库的表进行存储，管理员用户对应 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/dal/dataobject/user/AdminUserDO.java" target="_blank" rel="noopener noreferrer"><code>system_users</code></a> 表，会员用户对应 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-member/yudao-module-member-biz/src/main/java/cn/iocoder/yudao/module/member/dal/dataobject/user/MemberUserDO.java" target="_blank" rel="noopener noreferrer"><code>member_user</code></a> 表。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/用户体系/02.png" alt="表结构" tabindex="0" loading="lazy"><figcaption>表结构</figcaption></figure><p>为什么不使用统一的用户表？</p><p>确实可以采用这样的方案，新增 <code>type</code> 字段区分用户类型。不同用户类型的信息字段，例如说上图的 <code>dept_id</code>、<code>post_ids</code> 等等，可以增加拓展表，或者就干脆“冗余”在用户表中。</p><p>不过实际项目中，不同类型的用户往往是不同的团队维护，并且这也是绝大多团队的实践，所以我们采用了多个用户表的方案。</p><p>如果表需要关联多种类型的用户，例如说上述的 <code>system_oauth2_access_token</code> 访问令牌表，可以通过 <code>user_type</code> 字段进行区分。并且 <code>user_type</code> 对应 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/enums/UserTypeEnum.java" target="_blank" rel="noopener noreferrer">UserTypeEnum</a> 全局枚举，代码如下：</p><figure><img src="https://cloud.iocoder.cn/img/用户体系/03.png" alt="UserTypeEnum 枚举" tabindex="0" loading="lazy"><figcaption>UserTypeEnum 枚举</figcaption></figure><h2 id="_2-如何获取当前登录的用户" tabindex="-1"><a class="header-anchor" href="#_2-如何获取当前登录的用户"><span><a href="#_2-%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%99%BB%E5%BD%95%E7%9A%84%E7%94%A8%E6%88%B7">#</a> 2. 如何获取当前登录的用户？</span></a></h2><p>使用 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-spring-boot-starter-security/src/main/java/cn/iocoder/yudao/framework/security/core/util/SecurityFrameworkUtils.java" target="_blank" rel="noopener noreferrer">SecurityFrameworkUtils</a> 提供的如下方法，可以获得当前登录用户的信息：</p><h3 id="_2-1-获取当前用户信息" tabindex="-1"><a class="header-anchor" href="#_2-1-获取当前用户信息"><span><a href="#_2-1-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF">#</a> 2.1 获取当前用户信息</span></a></h3><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>public static LoginUser getLoginUser()</span></span></code></pre></div><h3 id="_2-2-获取当前用户编号-最常用" tabindex="-1"><a class="header-anchor" href="#_2-2-获取当前用户编号-最常用"><span><a href="#_2-2-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%94%A8%E6%88%B7%E7%BC%96%E5%8F%B7-%E6%9C%80%E5%B8%B8%E7%94%A8">#</a> 2.2 获取当前用户编号（最常用）</span></a></h3><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>public static Long getLoginUserId()</span></span></code></pre></div><h3 id="_2-3-获取当前用户昵称" tabindex="-1"><a class="header-anchor" href="#_2-3-获取当前用户昵称"><span><a href="#_2-3-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%94%A8%E6%88%B7%E6%98%B5%E7%A7%B0">#</a> 2.3 获取当前用户昵称</span></a></h3><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>public static LoginUser getLoginUserNickname()</span></span></code></pre></div><p>注意，仅适合 AdminUser 管理员用户！</p><h3 id="_2-4-获取当前用户部门" tabindex="-1"><a class="header-anchor" href="#_2-4-获取当前用户部门"><span><a href="#_2-4-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%94%A8%E6%88%B7%E9%83%A8%E9%97%A8">#</a> 2.4 获取当前用户部门</span></a></h3><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>public static Long getLoginUserDeptId()</span></span></code></pre></div><p>注意，仅适合 AdminUser 管理员用户！</p><h3 id="_2-5-获取更多信息" tabindex="-1"><a class="header-anchor" href="#_2-5-获取更多信息"><span><a href="#_2-5-%E8%8E%B7%E5%8F%96%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF">#</a> 2.5 获取更多信息</span></a></h3><p>① 在 OAuth2TokenServiceImpl 的 <code>#buildUserInfo(...)</code> 方法中，补充读取更多的用户信息，例如说 <code>mobile</code>、<code>sex</code> 等等。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/用户体系/buildUserInfo.png" alt="buildUserInfo" tabindex="0" loading="lazy"><figcaption>buildUserInfo</figcaption></figure><p>② 在 SecurityFrameworkUtils 新增对应的 <code>getXXX()</code> 静态方法，参考如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/用户体系/getXXX.png" alt="getXXX" tabindex="0" loading="lazy"><figcaption>getXXX</figcaption></figure><h2 id="_3-账号密码登录" tabindex="-1"><a class="header-anchor" href="#_3-账号密码登录"><span><a href="#_3-%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95">#</a> 3. 账号密码登录</span></a></h2><h3 id="_3-1-管理后台的实现" tabindex="-1"><a class="header-anchor" href="#_3-1-管理后台的实现"><span><a href="#_3-1-%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0%E7%9A%84%E5%AE%9E%E7%8E%B0">#</a> 3.1 管理后台的实现</span></a></h3><p>使用 <code>username</code> 账号 + <code>password</code> 密码进行登录，由 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/auth/AuthController.java#L55-L62" target="_blank" rel="noopener noreferrer">AuthController</a> 提供 <code>/admin-api/system/auth/login</code> 接口。代码如下：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>@PostMapping(&quot;/login&quot;)</span></span>
<span class="line"><span>@Operation(summary = &quot;使用账号密码登录&quot;)</span></span>
<span class="line"><span>public CommonResult&lt;AuthLoginRespVO&gt; login(@RequestBody @Valid AuthLoginReqVO reqVO) {</span></span>
<span class="line"><span>    String token = authService.login(reqVO, getClientIP(), getUserAgent());</span></span>
<span class="line"><span>    // 返回结果</span></span>
<span class="line"><span>    return success(AuthLoginRespVO.builder().token(token).build());</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>如何关闭验证码？</p>`,30),h=a(`<h3 id="_3-2-用户-app-的实现" tabindex="-1"><a class="header-anchor" href="#_3-2-用户-app-的实现"><span><a href="#_3-2-%E7%94%A8%E6%88%B7-app-%E7%9A%84%E5%AE%9E%E7%8E%B0">#</a> 3.2 用户 App 的实现</span></a></h3><p>使用 <code>mobile</code> 手机 + <code>password</code> 密码进行登录，由 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-member/yudao-module-member-biz/src/main/java/cn/iocoder/yudao/module/member/controller/app/auth/AppAuthController.java#L34-L41" target="_blank" rel="noopener noreferrer">AppAuthController</a> 提供 <code>/app-api/member/auth/login</code> 接口。代码如下：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>@PostMapping(&quot;/login&quot;)</span></span>
<span class="line"><span>@Operation(summary = &quot;使用手机 + 密码登录&quot;)</span></span>
<span class="line"><span>public CommonResult&lt;AppAuthLoginRespVO&gt; login(@RequestBody @Valid AppAuthLoginReqVO reqVO) {</span></span>
<span class="line"><span>    String token = authService.login(reqVO, getClientIP(), getUserAgent());</span></span>
<span class="line"><span>    // 返回结果</span></span>
<span class="line"><span>    return success(AppAuthLoginRespVO.builder().token(token).build());</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="_4-手机验证码登录" tabindex="-1"><a class="header-anchor" href="#_4-手机验证码登录"><span><a href="#_4-%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81%E7%99%BB%E5%BD%95">#</a> 4. 手机验证码登录</span></a></h2><h3 id="_4-1-管理后台的实现" tabindex="-1"><a class="header-anchor" href="#_4-1-管理后台的实现"><span><a href="#_4-1-%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0%E7%9A%84%E5%AE%9E%E7%8E%B0">#</a> 4.1 管理后台的实现</span></a></h3><p>① 使用 <code>mobile</code> 手机号获得验证码，由 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/auth/AuthController.java#L105-L111" target="_blank" rel="noopener noreferrer">AuthController</a> 提供 <code>/admin-api/system/auth/send-sms-code</code> 接口。代码如下：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>@PostMapping(&quot;/send-sms-code&quot;)</span></span>
<span class="line"><span>@Operation(summary = &quot;发送手机验证码&quot;)</span></span>
<span class="line"><span>public CommonResult&lt;Boolean&gt; sendSmsCode(@RequestBody @Valid AuthSendSmsReqVO reqVO) {</span></span>
<span class="line"><span>    authService.sendSmsCode(getLoginUserId(), reqVO);</span></span>
<span class="line"><span>    return success(true);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>② 使用 <code>mobile</code> 手机 + <code>code</code> 验证码进行登录，由 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/auth/AuthController.java#L96-L103" target="_blank" rel="noopener noreferrer">AppAuthController</a> 提供 <code>/admin-api/system/auth/sms-login</code> 接口。代码如下：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>@PostMapping(&quot;/sms-login&quot;)</span></span>
<span class="line"><span>@Operation(summary = &quot;使用短信验证码登录&quot;)</span></span>
<span class="line"><span>public CommonResult&lt;AuthLoginRespVO&gt; smsLogin(@RequestBody @Valid AuthSmsLoginReqVO reqVO) {</span></span>
<span class="line"><span>    String token = authService.smsLogin(reqVO, getClientIP(), getUserAgent());</span></span>
<span class="line"><span>    // 返回结果</span></span>
<span class="line"><span>    return success(AuthLoginRespVO.builder().token(token).build());</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="_4-2-用户-app-的实现" tabindex="-1"><a class="header-anchor" href="#_4-2-用户-app-的实现"><span><a href="#_4-2-%E7%94%A8%E6%88%B7-app-%E7%9A%84%E5%AE%9E%E7%8E%B0">#</a> 4.2 用户 App 的实现</span></a></h3><p>① 使用 <code>mobile</code> 手机号获得验证码，由 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-member/yudao-module-member-biz/src/main/java/cn/iocoder/yudao/module/member/controller/app/auth/AppAuthController.java#L52-L58" target="_blank" rel="noopener noreferrer">AppAuthController</a> 提供 <code>/app-api/member/auth/send-sms-code</code> 接口。代码如下：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>@PostMapping(&quot;/send-sms-code&quot;)</span></span>
<span class="line"><span>@Operation(summary = &quot;发送手机验证码&quot;)</span></span>
<span class="line"><span>public CommonResult&lt;Boolean&gt; sendSmsCode(@RequestBody @Valid AppAuthSendSmsReqVO reqVO) {</span></span>
<span class="line"><span>    authService.sendSmsCode(getLoginUserId(), reqVO);</span></span>
<span class="line"><span>    return success(true);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>② 使用 <code>mobile</code> 手机 + <code>code</code> 验证码进行登录，由 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-member/yudao-module-member-biz/src/main/java/cn/iocoder/yudao/module/member/controller/app/auth/AppAuthController.java#L43-L50" target="_blank" rel="noopener noreferrer">AppAuthController</a> 提供 <code>/app-api/member/auth/sms-login</code> 接口。代码如下：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>@PostMapping(&quot;/sms-login&quot;)</span></span>
<span class="line"><span>@Operation(summary = &quot;使用手机 + 验证码登录&quot;)</span></span>
<span class="line"><span>public CommonResult&lt;AppAuthLoginRespVO&gt; smsLogin(@RequestBody @Valid AppAuthSmsLoginReqVO reqVO) {</span></span>
<span class="line"><span>    String token = authService.smsLogin(reqVO, getClientIP(), getUserAgent());</span></span>
<span class="line"><span>    // 返回结果</span></span>
<span class="line"><span>    return success(AppAuthLoginRespVO.builder().token(token).build());</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>如果用户未注册，会自动使用手机号进行注册会员用户。<strong>所以，<code>/app-api/member/user/sms-login</code> 接口也提供了用户注册的功能</strong>。</p><h2 id="_5-三方登录" tabindex="-1"><a class="header-anchor" href="#_5-三方登录"><span><a href="#_5-%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95">#</a> 5. 三方登录</span></a></h2><p>详细参见 <a href="/social-user">《开发指南 —— 三方登录》</a> 文章。</p><h3 id="_5-1-管理后台的实现" tabindex="-1"><a class="header-anchor" href="#_5-1-管理后台的实现"><span><a href="#_5-1-%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0%E7%9A%84%E5%AE%9E%E7%8E%B0">#</a> 5.1 管理后台的实现</span></a></h3><p>① 跳转第三方平台，来获得三方授权码，由 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/auth/AuthController.java#L97-L106" target="_blank" rel="noopener noreferrer">AuthController</a> 提供 <code>/admin-api/system/auth/social-auth-redirect</code> 接口。代码如下：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>@GetMapping(&quot;/social-auth-redirect&quot;)</span></span>
<span class="line"><span>@Operation(summary = &quot;社交授权的跳转&quot;)</span></span>
<span class="line"><span>@Parameters({</span></span>
<span class="line"><span>        @Parameter(name = &quot;type&quot;, description = &quot;社交类型&quot;, required = true),</span></span>
<span class="line"><span>        @Parameter(name = &quot;redirectUri&quot;, description = &quot;回调路径&quot;)</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span>public CommonResult&lt;String&gt; socialAuthRedirect(@RequestParam(&quot;type&quot;) Integer type,</span></span>
<span class="line"><span>                                                @RequestParam(&quot;redirectUri&quot;) String redirectUri) {</span></span>
<span class="line"><span>    return CommonResult.success(socialUserService.getAuthorizeUrl(type, redirectUri));</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>② 使用 <code>code</code> 三方授权码进行快登录，由 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/auth/AuthController.java#L149-L154" target="_blank" rel="noopener noreferrer">AuthController</a> 提供 <code>/admin-api/system/auth/social-login</code> 接口。代码如下：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>@PostMapping(&quot;/social-login&quot;)</span></span>
<span class="line"><span>@Operation(summary = &quot;社交快捷登录，使用 code 授权码&quot;)</span></span>
<span class="line"><span>public CommonResult&lt;AuthLoginRespVO&gt; socialQuickLogin(@RequestBody @Valid AuthSocialQuickLoginReqVO reqVO) {</span></span>
<span class="line"><span>    String token = authService.socialLogin(reqVO, getClientIP(), getUserAgent());</span></span>
<span class="line"><span>    // 返回结果</span></span>
<span class="line"><span>    return success(AuthLoginRespVO.builder().token(token).build());</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>③ 使用 <code>socialCode</code> 三方授权码 + <code>username</code> + <code>password</code> 进行绑定登录，直接使用 <code>/admin-api/system/auth/login</code> 账号密码登录的接口，区别在于额外带上 <code>socialType</code> + <code>socialCode</code> + <code>socialState</code> 参数。</p><h3 id="_5-2-用户-app-的实现" tabindex="-1"><a class="header-anchor" href="#_5-2-用户-app-的实现"><span><a href="#_5-2-%E7%94%A8%E6%88%B7-app-%E7%9A%84%E5%AE%9E%E7%8E%B0">#</a> 5.2 用户 App 的实现</span></a></h3><p>① 跳转第三方平台，来获得三方授权码，由 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-member/yudao-module-member-biz/src/main/java/cn/iocoder/yudao/module/member/controller/app/auth/AppAuthController.java#L96-L105" target="_blank" rel="noopener noreferrer">AppAuthController</a> 提供 <code>/app-api/member/auth/social-auth-redirect</code> 接口。代码如下：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>@GetMapping(&quot;/social-auth-redirect&quot;)</span></span>
<span class="line"><span>@Operation(summary = &quot;社交授权的跳转&quot;)</span></span>
<span class="line"><span>@Parameters({</span></span>
<span class="line"><span>        @Parameter(name = &quot;type&quot;, description = &quot;社交类型&quot;, required = true),</span></span>
<span class="line"><span>        @Parameter(name = &quot;redirectUri&quot;, description = &quot;回调路径&quot;)</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span>public CommonResult&lt;String&gt; socialAuthRedirect(@RequestParam(&quot;type&quot;) Integer type,</span></span>
<span class="line"><span>                                               @RequestParam(&quot;redirectUri&quot;) String redirectUri) {</span></span>
<span class="line"><span>    return CommonResult.success(socialUserService.getAuthorizeUrl(type, redirectUri));</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>② 使用 <code>code</code> 三方授权码进行快登录，由 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-member/yudao-module-member-biz/src/main/java/cn/iocoder/yudao/module/member/controller/app/auth/AppAuthController.java#L107-L111" target="_blank" rel="noopener noreferrer">AppAuthController</a> 提供 <code>/app-api/member/auth/social-login</code> 接口。代码如下：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>@PostMapping(&quot;/social-login&quot;)</span></span>
<span class="line"><span>@Operation(summary = &quot;社交快捷登录，使用 code 授权码&quot;)</span></span>
<span class="line"><span>public CommonResult&lt;AppAuthLoginRespVO&gt; socialQuickLogin(@RequestBody @Valid AuthSocialQuickLoginReqVO reqVO) {</span></span>
<span class="line"><span>    String token = authService.socialLogin(reqVO, getClientIP(), getUserAgent());</span></span>
<span class="line"><span>    // 返回结果</span></span>
<span class="line"><span>    return success(AuthLoginRespVO.builder().token(token).build());</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>③ 使用 <code>socialCode</code> 三方授权码 + <code>username</code> + <code>password</code> 进行绑定登录，直接使用 <code>/app-api/system/auth/login</code> 手机验证码登录的接口，区别在于额外带上 <code>socialType</code> + <code>socialCode</code> + <code>socialState</code> 参数。</p><p>④ 【微信小程序特有】使用 <code>phoneCode</code> + <code>loginCode</code> 实现获取手机号并一键登录，由 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-member/yudao-module-member-biz/src/main/java/cn/iocoder/yudao/module/member/controller/app/auth/AppAuthController.java#L113-L117" target="_blank" rel="noopener noreferrer">AppAuthController</a> 提供 <code>/app-api/member/auth/weixin-mini-app-login</code> 接口。代码如下：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>@PostMapping(&quot;/weixin-mini-app-login&quot;)</span></span>
<span class="line"><span>@Operation(summary = &quot;微信小程序的一键登录&quot;)</span></span>
<span class="line"><span>public CommonResult&lt;AppAuthLoginRespVO&gt; weixinMiniAppLogin(@RequestBody @Valid AppAuthWeixinMiniAppLoginReqVO reqVO) {</span></span>
<span class="line"><span>    return success(authService.weixinMiniAppLogin(reqVO));</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="_6-注册" tabindex="-1"><a class="header-anchor" href="#_6-注册"><span><a href="#_6-%E6%B3%A8%E5%86%8C">#</a> 6. 注册</span></a></h2><h3 id="_6-1-管理后台的实现" tabindex="-1"><a class="header-anchor" href="#_6-1-管理后台的实现"><span><a href="#_6-1-%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0%E7%9A%84%E5%AE%9E%E7%8E%B0">#</a> 6.1 管理后台的实现</span></a></h3><p>管理后台暂不支持用户注册，而是通过在 [系统管理 -&gt; 用户管理] 菜单，进行添加用户，由 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/user/UserController.java#L48-L54" target="_blank" rel="noopener noreferrer">UserController</a> 提供 <code>/admin-api/system/user/create</code> 接口。代码如下：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>@PostMapping(&quot;/create&quot;)</span></span>
<span class="line"><span>@Operation(summary = &quot;新增用户&quot;)</span></span>
<span class="line"><span>@PreAuthorize(&quot;@ss.hasPermission(&#39;system:user:create&#39;)&quot;)</span></span>
<span class="line"><span>public CommonResult&lt;Long&gt; createUser(@Valid @RequestBody UserCreateReqVO reqVO) {</span></span>
<span class="line"><span>    Long id = userService.createUser(reqVO);</span></span>
<span class="line"><span>    return success(id);</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="_6-2-用户-app-的实现" tabindex="-1"><a class="header-anchor" href="#_6-2-用户-app-的实现"><span><a href="#_6-2-%E7%94%A8%E6%88%B7-app-%E7%9A%84%E5%AE%9E%E7%8E%B0">#</a> 6.2 用户 App 的实现</span></a></h3><p>手机验证码登录时，如果用户未注册，会自动使用手机号进行注册会员用户。<strong>所以，<code>/app-api/system/user/sms-login</code> 接口也提供了用户注册的功能</strong>。</p><h2 id="_7-用户登出" tabindex="-1"><a class="header-anchor" href="#_7-用户登出"><span><a href="#_7-%E7%94%A8%E6%88%B7%E7%99%BB%E5%87%BA">#</a> 7. 用户登出</span></a></h2><p>用户登出的功能，统一使用 Spring Security 框架，通过删除用户 Token 的方式来实现。代码如下：</p><figure><img src="https://cloud.iocoder.cn/img/用户体系/04.png" alt="用户登出" tabindex="0" loading="lazy"><figcaption>用户登出</figcaption></figure><p>差别在于使用的 API 接口不同，管理员用户使用 <code>/admin-api/system/logout</code>，会员用户使用 <code>/app-api/member/logout</code>。</p><h2 id="_8-社区贡献的权限相关" tabindex="-1"><a class="header-anchor" href="#_8-社区贡献的权限相关"><span><a href="#_8-%E7%A4%BE%E5%8C%BA%E8%B4%A1%E7%8C%AE%E7%9A%84%E6%9D%83%E9%99%90%E7%9B%B8%E5%85%B3">#</a> 8. 社区贡献的权限相关</span></a></h2><ul><li><a href="https://gitee.com/zhijiantianya/ruoyi-vue-pro/pulls/510/" target="_blank" rel="noopener noreferrer">新增是否允许账号多设备登录的配置</a></li><li><a href="https://github.com/YunaiV/ruoyi-vue-pro/issues/262" target="_blank" rel="noopener noreferrer">同一账号同时登录多台设备的个数配置</a></li></ul>`,43);function m(b,g){const s=p("RouteLink");return t(),l("div",null,[d,n("p",null,[e("虽然是不同类型的用户，他们访问 RESTful API 接口时，都通过 Token 认证机制，具体可见 "),o(s,{to:"/resource-permission/#_2-token-%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6"},{default:r(()=>[e("《开发指南 —— 功能权限》")]),_:1}),e("。")]),u,n("p",null,[e("参见 "),o(s,{to:"/captcha/"},{default:r(()=>[e("《后端手册 —— 验证码》")]),_:1}),e(" 文档。")]),h])}const E=i(c,[["render",m],["__file","user-center.html.vue"]]),y=JSON.parse('{"path":"/project/yudao-cloud/user-center.html","title":"用户体系","lang":"en-US","frontmatter":{"title":"用户体系","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":24,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 表结构","slug":"_1-表结构","link":"#_1-表结构","children":[]},{"level":2,"title":"# 2. 如何获取当前登录的用户？","slug":"_2-如何获取当前登录的用户","link":"#_2-如何获取当前登录的用户","children":[{"level":3,"title":"# 2.1 获取当前用户信息","slug":"_2-1-获取当前用户信息","link":"#_2-1-获取当前用户信息","children":[]},{"level":3,"title":"# 2.2 获取当前用户编号（最常用）","slug":"_2-2-获取当前用户编号-最常用","link":"#_2-2-获取当前用户编号-最常用","children":[]},{"level":3,"title":"# 2.3 获取当前用户昵称","slug":"_2-3-获取当前用户昵称","link":"#_2-3-获取当前用户昵称","children":[]},{"level":3,"title":"# 2.4 获取当前用户部门","slug":"_2-4-获取当前用户部门","link":"#_2-4-获取当前用户部门","children":[]},{"level":3,"title":"# 2.5 获取更多信息","slug":"_2-5-获取更多信息","link":"#_2-5-获取更多信息","children":[]}]},{"level":2,"title":"# 3. 账号密码登录","slug":"_3-账号密码登录","link":"#_3-账号密码登录","children":[{"level":3,"title":"# 3.1 管理后台的实现","slug":"_3-1-管理后台的实现","link":"#_3-1-管理后台的实现","children":[]},{"level":3,"title":"# 3.2 用户 App 的实现","slug":"_3-2-用户-app-的实现","link":"#_3-2-用户-app-的实现","children":[]}]},{"level":2,"title":"# 4. 手机验证码登录","slug":"_4-手机验证码登录","link":"#_4-手机验证码登录","children":[{"level":3,"title":"# 4.1 管理后台的实现","slug":"_4-1-管理后台的实现","link":"#_4-1-管理后台的实现","children":[]},{"level":3,"title":"# 4.2 用户 App 的实现","slug":"_4-2-用户-app-的实现","link":"#_4-2-用户-app-的实现","children":[]}]},{"level":2,"title":"# 5. 三方登录","slug":"_5-三方登录","link":"#_5-三方登录","children":[{"level":3,"title":"# 5.1 管理后台的实现","slug":"_5-1-管理后台的实现","link":"#_5-1-管理后台的实现","children":[]},{"level":3,"title":"# 5.2 用户 App 的实现","slug":"_5-2-用户-app-的实现","link":"#_5-2-用户-app-的实现","children":[]}]},{"level":2,"title":"# 6. 注册","slug":"_6-注册","link":"#_6-注册","children":[{"level":3,"title":"# 6.1 管理后台的实现","slug":"_6-1-管理后台的实现","link":"#_6-1-管理后台的实现","children":[]},{"level":3,"title":"# 6.2 用户 App 的实现","slug":"_6-2-用户-app-的实现","link":"#_6-2-用户-app-的实现","children":[]}]},{"level":2,"title":"# 7. 用户登出","slug":"_7-用户登出","link":"#_7-用户登出","children":[]},{"level":2,"title":"# 8. 社区贡献的权限相关","slug":"_8-社区贡献的权限相关","link":"#_8-社区贡献的权限相关","children":[]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":7.33,"words":2198},"filePathRelative":"project/yudao-cloud/user-center.md","localizedDate":"July 7, 2024"}');export{E as comp,y as data};
