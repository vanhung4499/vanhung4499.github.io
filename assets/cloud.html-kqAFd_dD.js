import{_ as p,g as r,o as d,c as o,e as a,f as i,w as l,h as n,a as t}from"./app-5QVbWi7Z.js";const c={};function u(m,s){const e=r("RouteLink");return d(),o("div",null,[s[8]||(s[8]=a("h1",{id:"消息队列-cloud",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#消息队列-cloud"},[a("span",null,"消息队列（Cloud）")])],-1)),s[9]||(s[9]=a("p",null,"友情提示：该文档已过期！！！",-1)),s[10]||(s[10]=a("p",null,"考虑到 Spring Cloud Stream 和 Spring Cloud Bus 的学习成本较高，配置较为麻烦，且不够灵活，因此项目已经移除了相关的封装与使用。",-1)),s[11]||(s[11]=a("p",null,"😁 建议阅读如下文档，按需使用：",-1)),a("ul",null,[a("li",null,[i(e,{to:"/message-queue/event/"},{default:l(()=>s[0]||(s[0]=[n("《消息队列（内存）》")])),_:1})]),a("li",null,[i(e,{to:"/message-queue/redis/"},{default:l(()=>s[1]||(s[1]=[n("《消息队列（Redis）》")])),_:1})]),a("li",null,[i(e,{to:"/message-queue/rocketmq/"},{default:l(()=>s[2]||(s[2]=[n("《消息队列（RocketMQ）》")])),_:1})]),a("li",null,[i(e,{to:"/message-queue/rabbitmq/"},{default:l(()=>s[3]||(s[3]=[n("《消息队列（RabbitMQ）》")])),_:1})]),a("li",null,[i(e,{to:"/message-queue/kafka/"},{default:l(()=>s[4]||(s[4]=[n("《消息队列（Kafka）》")])),_:1}),s[5]||(s[5]=a("br",null,null,-1)),s[6]||(s[6]=a("a",{href:"https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-spring-boot-starter-mq/",target:"_blank",rel:"noopener noreferrer"},[a("code",null,"yudao-spring-boot-starter-mq")],-1)),s[7]||(s[7]=n(" 技术组件，基于 RocketMQ 实现分布式消息队列，支持集群消费、广播消费。"))])]),s[12]||(s[12]=t(`<p>友情提示：我对消息队列不了解，怎么办？</p><p>① 项目主要使用 RocketMQ 作为消息队列，所以可以学习下文章：</p><ul><li><a href="https://www.iocoder.cn/Spring-Cloud-Alibaba/RocketMQ/?yudao" target="_blank" rel="noopener noreferrer">《芋道 Spring Cloud Alibaba 消息队列 RocketMQ 入门》</a></li><li><a href="https://www.iocoder.cn/Spring-Cloud-Alibaba/Bus-RocketMQ/?yudao" target="_blank" rel="noopener noreferrer">《芋道 Spring Cloud Alibaba 事件总线 Bus RocketMQ 入门》</a></li></ul><p>② 如果你想替换使用 Kafka 或者 RabbitMQ，可以参考下文章：</p><ul><li><a href="https://www.iocoder.cn/Spring-Cloud/Kafka/?yudao" target="_blank" rel="noopener noreferrer">《芋道 Spring Cloud 消息队列 Kafka 入门 》</a></li><li><a href="https://www.iocoder.cn/Spring-Cloud/Bus-Kafka/?yudao" target="_blank" rel="noopener noreferrer">《芋道 Spring Cloud 事件总线 Bus Kafka 入门》</a></li><li><a href="https://www.iocoder.cn/Spring-Cloud/RabbitMQ/?yudao" target="_blank" rel="noopener noreferrer">《芋道 Spring Cloud 消息队列 RabbitMQ 入门 》</a></li><li><a href="https://www.iocoder.cn/Spring-Cloud/Bus-RabbitMQ/?yudao" target="_blank" rel="noopener noreferrer">《芋道 Spring Cloud 事件总线 Bus RabbitMQ 入门》</a></li></ul><h2 id="_1-集群消费" tabindex="-1"><a class="header-anchor" href="#_1-集群消费"><span><a href="#_1-%E9%9B%86%E7%BE%A4%E6%B6%88%E8%B4%B9">#</a> 1. 集群消费</span></a></h2><p>集群消费，是指消息发送到 RocketMQ 时，有且只会被一个消费者（应用 JVM 实例）收到，然后消费成功。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/消息队列/01-cloud.png" alt="集群消费" tabindex="0" loading="lazy"><figcaption>集群消费</figcaption></figure><h3 id="_1-1-使用场景" tabindex="-1"><a class="header-anchor" href="#_1-1-使用场景"><span><a href="#_1-1-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">#</a> 1.1 使用场景</span></a></h3><p>集群消费在项目中的使用场景，主要是提供可靠的、可堆积的异步任务的能力。例如说：</p><ul><li>短信模块，使用它<a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/mq/consumer/sms/SmsSendConsumer.java" target="_blank" rel="noopener noreferrer">异步</a>发送短信。</li><li>邮件模块，使用它<a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/mq/consumer/mail/MailSendConsumer.java" target="_blank" rel="noopener noreferrer">异步</a>发送邮件。</li></ul><p>相比 <a href="/async-task">《开发指南 —— 异步任务》</a> 来说，Spring Async 在 JVM 实例重启时，会导致未执行完的任务丢失。而集群消费，因为消息是存储在 RocketMQ 中，所以不会存在该问题。</p><h3 id="_1-2-实战案例" tabindex="-1"><a class="header-anchor" href="#_1-2-实战案例"><span><a href="#_1-2-%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B">#</a> 1.2 实战案例</span></a></h3><p>以短信模块异步发送短息为例子，讲解集群消费的使用。</p><figure><img src="https://cloud.iocoder.cn/img/消息队列/06-cloud.png" alt="实战案例" tabindex="0" loading="lazy"><figcaption>实战案例</figcaption></figure><h4 id="_1-3-1-引入依赖" tabindex="-1"><a class="header-anchor" href="#_1-3-1-引入依赖"><span><a href="#_1-3-1-%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96">#</a> 1.3.1 引入依赖</span></a></h4><p>在 <code>yudao-module-system-biz</code> 模块的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/pom.xml" target="_blank" rel="noopener noreferrer"><code>pom.xml</code></a> 中，引入 <code>yudao-spring-boot-starter-mq</code> 技术组件。如下所示：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>&lt;!-- 消息队列相关 --&gt;</span></span>
<span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;cn.iocoder.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;yudao-spring-boot-starter-mq&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div><h4 id="_1-3-2-添加配置" tabindex="-1"><a class="header-anchor" href="#_1-3-2-添加配置"><span><a href="#_1-3-2-%E6%B7%BB%E5%8A%A0%E9%85%8D%E7%BD%AE">#</a> 1.3.2 添加配置</span></a></h4><p>① 在 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/resources/application.yaml#L55-L78" target="_blank" rel="noopener noreferrer"><code>application.yaml</code></a> 中，添加 <code>spring.cloud.stream</code> 配置。如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>--- #################### MQ 消息队列相关配置 ####################</span></span>
<span class="line"><span></span></span>
<span class="line"><span>spring:</span></span>
<span class="line"><span>  cloud:</span></span>
<span class="line"><span>    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类</span></span>
<span class="line"><span>    stream:</span></span>
<span class="line"><span>      function:</span></span>
<span class="line"><span>        definition: smsSendConsumer;</span></span>
<span class="line"><span>      # Binding 配置项，对应 BindingProperties Map</span></span>
<span class="line"><span>      bindings:</span></span>
<span class="line"><span>        smsSend-out-0:</span></span>
<span class="line"><span>          destination: system_sms_send</span></span>
<span class="line"><span>        smsSendConsumer-in-0:</span></span>
<span class="line"><span>          destination: system_sms_send</span></span>
<span class="line"><span>          group: system_sms_send_consumer_group</span></span>
<span class="line"><span>      # Spring Cloud Stream RocketMQ 配置项</span></span>
<span class="line"><span>      rocketmq:</span></span>
<span class="line"><span>        default: # 默认 bindings 全局配置</span></span>
<span class="line"><span>          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类</span></span>
<span class="line"><span>            group: system_producer_group # 生产者分组</span></span>
<span class="line"><span>            send-type: SYNC # 发送模式，SYNC 同步</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意，带有 <code>sms</code> 关键字的，都是和短信发送相关的配置。</li></ul><p>② 在 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/resources/application-local.yaml#L71-L78" target="_blank" rel="noopener noreferrer"><code>application-local.yaml</code></a> 中，添加 <code>spring.cloud.stream</code> 配置。如下所示：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>--- #################### MQ 消息队列相关配置 ####################</span></span>
<span class="line"><span>spring:</span></span>
<span class="line"><span>  cloud:</span></span>
<span class="line"><span>    stream:</span></span>
<span class="line"><span>      rocketmq:</span></span>
<span class="line"><span>        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类</span></span>
<span class="line"><span>        binder:</span></span>
<span class="line"><span>          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址</span></span></code></pre></div><h4 id="_1-3-3-smssendmessage" tabindex="-1"><a class="header-anchor" href="#_1-3-3-smssendmessage"><span><a href="#_1-3-3-smssendmessage">#</a> 1.3.3 SmsSendMessage</span></a></h4><p>在 <code>yudao-module-system-biz</code> 的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/mq/message/sms/" target="_blank" rel="noopener noreferrer"><code>mq/message/sms</code></a> 包下，创建 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/mq/message/sms/SmsSendMessage.java" target="_blank" rel="noopener noreferrer">SmsSendMessage</a> 类，短信发送消息。代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>@Data</span></span>
<span class="line"><span>public class SmsSendMessage {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 短信日志编号</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @NotNull(message = &quot;短信日志编号不能为空&quot;)</span></span>
<span class="line"><span>    private Long logId;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 手机号</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @NotNull(message = &quot;手机号不能为空&quot;)</span></span>
<span class="line"><span>    private String mobile;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 短信渠道编号</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @NotNull(message = &quot;短信渠道编号不能为空&quot;)</span></span>
<span class="line"><span>    private Long channelId;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 短信 API 的模板编号</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @NotNull(message = &quot;短信 API 的模板编号不能为空&quot;)</span></span>
<span class="line"><span>    private String apiTemplateId;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 短信模板参数</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private List&lt;KeyValue&lt;String, Object&gt;&gt; templateParams;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-4-smsproducer" tabindex="-1"><a class="header-anchor" href="#_1-3-4-smsproducer"><span><a href="#_1-3-4-smsproducer">#</a> 1.3.4 SmsProducer</span></a></h4><p>① 在 <code>yudao-module-system-biz</code> 的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/mq/producer/sms/" target="_blank" rel="noopener noreferrer"><code>mq/producer/sms</code></a> 包下，创建 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/mq/producer/sms/SmsProducer.java" target="_blank" rel="noopener noreferrer">SmsProducer</a> 类，SmsSendMessage 的 Producer 生产者，核心是使用 StreamBridge 发送 SmsSendMessage 消息。代码如下图：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>@Component</span></span>
<span class="line"><span>public class SmsProducer {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Resource</span></span>
<span class="line"><span>    private StreamBridge streamBridge;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 发送 {@link SmsSendMessage} 消息</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param logId 短信日志编号</span></span>
<span class="line"><span>     * @param mobile 手机号</span></span>
<span class="line"><span>     * @param channelId 渠道编号</span></span>
<span class="line"><span>     * @param apiTemplateId 短信模板编号</span></span>
<span class="line"><span>     * @param templateParams 短信模板参数</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public void sendSmsSendMessage(Long logId, String mobile,</span></span>
<span class="line"><span>                                   Long channelId, String apiTemplateId, List&lt;KeyValue&lt;String, Object&gt;&gt; templateParams) {</span></span>
<span class="line"><span>        SmsSendMessage message = new SmsSendMessage().setLogId(logId).setMobile(mobile);</span></span>
<span class="line"><span>        message.setChannelId(channelId).setApiTemplateId(apiTemplateId).setTemplateParams(templateParams);</span></span>
<span class="line"><span>        streamBridge.send(&quot;smsSend-out-0&quot;, message);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意，这里的 <code>smsSend-out-0</code> 和上述的配置文件是对应的噢。</li></ul><p>② 发送短信时，需要使用 SmsProducer 发送消息。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/消息队列/05.png" alt="调用 SmsProducer 示例" tabindex="0" loading="lazy"><figcaption>调用 SmsProducer 示例</figcaption></figure><h4 id="_1-3-4-smssendconsumer" tabindex="-1"><a class="header-anchor" href="#_1-3-4-smssendconsumer"><span><a href="#_1-3-4-smssendconsumer">#</a> 1.3.4 SmsSendConsumer</span></a></h4><p>在 <code>yudao-module-system-biz</code> 的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/mq/consumer/sms/" target="_blank" rel="noopener noreferrer"><code>mq/consumer/sms</code></a> 包下，创建 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/mq/consumer/sms/SmsSendConsumer.java" target="_blank" rel="noopener noreferrer">SmsSendConsumer</a> 类，SmsSendMessage 的 Consumer 消费者。代码如下图：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>@Component</span></span>
<span class="line"><span>@Slf4j</span></span>
<span class="line"><span>public class SmsSendConsumer implements Consumer&lt;SmsSendMessage&gt; {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Resource</span></span>
<span class="line"><span>    private SmsSendService smsSendService;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void accept(SmsSendMessage message) {</span></span>
<span class="line"><span>        log.info(&quot;[accept][消息内容({})]&quot;, message);</span></span>
<span class="line"><span>        smsSendService.doSendSms(message);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="_2-广播消费" tabindex="-1"><a class="header-anchor" href="#_2-广播消费"><span><a href="#_2-%E5%B9%BF%E6%92%AD%E6%B6%88%E8%B4%B9">#</a> 2. 广播消费</span></a></h2><p>广播消费，是指消息发送到 RocketMQ 时，所有消费者（应用 JVM 实例）收到，然后消费成功。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/消息队列/11-cloud.png" alt="集群消费" tabindex="0" loading="lazy"><figcaption>集群消费</figcaption></figure><h3 id="_2-1-使用场景" tabindex="-1"><a class="header-anchor" href="#_2-1-使用场景"><span><a href="#_2-1-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">#</a> 2.1 使用场景</span></a></h3><p>例如说，在应用中，缓存了数据字典等配置表在内存中，可以通过 RocketMQ 广播消费，实现每个应用节点都消费消息，刷新本地内存的缓存。</p><p>又例如说，我们基于 WebSocket 实现了 IM 聊天，在我们给用户主动发送消息时，因为我们不知道用户连接的是哪个提供 WebSocket 的应用，所以可以通过 RocketMQ 广播消费。每个应用判断当前用户是否是和自己提供的 WebSocket 服务连接，如果是，则推送消息给用户。</p><h3 id="_2-2-使用方式一-bus" tabindex="-1"><a class="header-anchor" href="#_2-2-使用方式一-bus"><span><a href="#_2-2-%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F%E4%B8%80-bus">#</a> 2.2 使用方式一：Bus</span></a></h3><p>基于 RocketMQ 的广播消费，可以使用 Spring Cloud Bus 实现。</p><p>Spring Cloud Bus 是什么？</p><p>Spring Cloud Bus 是 Spring Cloud 的一个子项目，它的作用是将分布式系统的节点与轻量级消息系统链接起来，用于广播状态变化，事件推送等。</p><p>它的实现原理是，通过 Spring Cloud Stream 将消息发送到消息代理（如 RabbitMQ、Kafka、RocketMQ），然后通过 Spring Cloud Bus 的事件监听，监听到消息后，进行处理。</p><p>以角色的本地缓存刷新为例子，讲解下 Spring Cloud Bus 如何使用 RocketMQ 广播消费。</p><h4 id="_2-2-1-引入依赖" tabindex="-1"><a class="header-anchor" href="#_2-2-1-引入依赖"><span><a href="#_2-2-1-%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96">#</a> 2.2.1 引入依赖</span></a></h4><p>在 <code>yudao-module-system-biz</code> 模块的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/pom.xml" target="_blank" rel="noopener noreferrer"><code>pom.xml</code></a> 中，引入 <code>yudao-spring-boot-starter-mq</code> 技术组件。如下所示：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>&lt;!-- 消息队列相关 --&gt;</span></span>
<span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;cn.iocoder.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;yudao-spring-boot-starter-mq&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div><h4 id="_2-2-2-添加配置" tabindex="-1"><a class="header-anchor" href="#_2-2-2-添加配置"><span><a href="#_2-2-2-%E6%B7%BB%E5%8A%A0%E9%85%8D%E7%BD%AE">#</a> 2.2.2 添加配置</span></a></h4><p>在 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/resources/application.yaml#L80-L84" target="_blank" rel="noopener noreferrer"><code>application.yaml</code></a> 中，添加 <code>spring.cloud.bus</code> 配置。如下所示：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>spring:</span></span>
<span class="line"><span>  cloud:</span></span>
<span class="line"><span>    # Spring Cloud Bus 配置项，对应 BusProperties 类</span></span>
<span class="line"><span>    bus:</span></span>
<span class="line"><span>      enabled: true # 是否开启，默认为 true</span></span>
<span class="line"><span>      id: \${spring.application.name}:\${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式</span></span>
<span class="line"><span>      destination: springCloudBus # 目标消息队列，默认为 springCloudBus</span></span></code></pre></div><h4 id="_2-2-3-编写代码" tabindex="-1"><a class="header-anchor" href="#_2-2-3-编写代码"><span><a href="#_2-2-3-%E7%BC%96%E5%86%99%E4%BB%A3%E7%A0%81">#</a> 2.2.3 编写代码</span></a></h4><p>参见 <a href="/local-cache">《开发指南 —— 本地缓存》</a> 文章的「3. 实时刷新缓存」小节。</p><h3 id="_2-2-使用方式二-stream" tabindex="-1"><a class="header-anchor" href="#_2-2-使用方式二-stream"><span><a href="#_2-2-%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F%E4%BA%8C-stream">#</a> 2.2 使用方式二：Stream</span></a></h3><p>基于 RocketMQ 的广播消费，也可以使用 Spring Cloud Stream 实现。</p><p>Spring Cloud Stream 是什么？</p><p>Spring Cloud Stream 是 Spring Cloud 的一个子项目，它的作用是为微服务应用构建消息驱动能力。</p><p>使用方式，和「1.2 实战案例」小节是一样的，只是需要在 <code>application.yaml</code> 配置文件中，添加 <a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/RocketMQ#rocketmq-consumer-properties" target="_blank" rel="noopener noreferrer"><code>spring.cloud.stream.rocketmq.bindings.&lt;channelName&gt;.consumer.broadcasting</code></a> 配置项为 <code>true</code>。</p><p>由于项目中暂时使用该方式，文档后续补充。</p>`,62))])}const g=p(c,[["render",u],["__file","cloud.html.vue"]]),h=JSON.parse('{"path":"/project/yudao-cloud/message-queue/cloud.html","title":"消息队列（Cloud）","lang":"en-US","frontmatter":{"title":"消息队列（Cloud）","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":61,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 集群消费","slug":"_1-集群消费","link":"#_1-集群消费","children":[{"level":3,"title":"# 1.1 使用场景","slug":"_1-1-使用场景","link":"#_1-1-使用场景","children":[]},{"level":3,"title":"# 1.2 实战案例","slug":"_1-2-实战案例","link":"#_1-2-实战案例","children":[]}]},{"level":2,"title":"# 2. 广播消费","slug":"_2-广播消费","link":"#_2-广播消费","children":[{"level":3,"title":"# 2.1 使用场景","slug":"_2-1-使用场景","link":"#_2-1-使用场景","children":[]},{"level":3,"title":"# 2.2 使用方式一：Bus","slug":"_2-2-使用方式一-bus","link":"#_2-2-使用方式一-bus","children":[]},{"level":3,"title":"# 2.2 使用方式二：Stream","slug":"_2-2-使用方式二-stream","link":"#_2-2-使用方式二-stream","children":[]}]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":6.63,"words":1989},"filePathRelative":"project/yudao-cloud/message-queue/cloud.md","localizedDate":"July 7, 2024"}');export{g as comp,h as data};
