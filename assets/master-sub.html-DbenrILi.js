import{_ as p,g as l,o as d,c,e as n,h as s,f as i,w as t,a as E}from"./app-5QVbWi7Z.js";const r={};function o(T,a){const e=l("RouteLink");return d(),c("div",null,[a[6]||(a[6]=n("h1",{id:"代码生成【主子表】",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#代码生成【主子表】"},[n("span",null,"代码生成【主子表】")])],-1)),a[7]||(a[7]=n("p",null,"友情提示：",-1)),n("p",null,[a[1]||(a[1]=s("本文接 ")),i(e,{to:"/new-feature/"},{default:t(()=>a[0]||(a[0]=[s("《代码生成【单表】》")])),_:1}),a[2]||(a[2]=s("，请务必先阅读。因为重复的内容，本文会不再赘述！"))]),a[8]||(a[8]=E('<p>主子表，指的是一个主表，被多个子表所关联，关联的关系是一对一或一对多。</p><p>例如说：主表是【学生】，子表可以是：</p><ul><li>子表是【成绩】，两者是“一对多”的关系，一个学生可以有多个成绩。</li><li>子表是【班级】，两者是“一对一”的关系，一个学生只能有一个班级。</li></ul><p>下面，我们将演示“主子表”的使用，基于代码生成器，在 <code>yudao-module-system</code> 模块中，开发一个【<strong>学生</strong>】的功能。</p><p>友情提示：</p><p>目前只有 yudao-ui-admin-vue3 支持主子表，yudao-ui-admin-vue2、yudao-ui-admin-vben 正在适配中！</p><h2 id="_0-主子表模式" tabindex="-1"><a class="header-anchor" href="#_0-主子表模式"><span><a href="#_0-%E4%B8%BB%E5%AD%90%E8%A1%A8%E6%A8%A1%E5%BC%8F">#</a> 0. 主子表模式</span></a></h2><p>针对不同的交互模式，项目提供了三种主子表模式：标准、ERP、内嵌。</p><h3 id="_0-1-标准模式" tabindex="-1"><a class="header-anchor" href="#_0-1-标准模式"><span><a href="#_0-1-%E6%A0%87%E5%87%86%E6%A8%A1%E5%BC%8F">#</a> 0.1 标准模式</span></a></h3><p>对应 [基础设施 -&gt; 代码生成案例 -&gt; 主子表（标准）] 菜单。</p><p>在新增和修改时，主表和子表在一个弹窗表单中，一起提交。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/代码生成/主子表/标准模式.png" alt="标准模式" tabindex="0" loading="lazy"><figcaption>标准模式</figcaption></figure><h3 id="_0-2-内嵌模式" tabindex="-1"><a class="header-anchor" href="#_0-2-内嵌模式"><span><a href="#_0-2-%E5%86%85%E5%B5%8C%E6%A8%A1%E5%BC%8F">#</a> 0.2 内嵌模式</span></a></h3><p>对应 [基础设施 -&gt; 代码生成案例 -&gt; 主子表（内嵌）] 菜单。</p><p>在「标准模式」的基础之上，列表 <strong>内嵌</strong> 子表的列表。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/代码生成/主子表/内嵌模式.png" alt="内嵌模式" tabindex="0" loading="lazy"><figcaption>内嵌模式</figcaption></figure><h3 id="_0-3-erp-模式" tabindex="-1"><a class="header-anchor" href="#_0-3-erp-模式"><span><a href="#_0-3-erp-%E6%A8%A1%E5%BC%8F">#</a> 0.3 ERP 模式</span></a></h3><p>对应 [基础设施 -&gt; 代码生成案例 -&gt; 主子表（ERP）] 菜单。</p><p>主表和子表，独立列表，也独立表单。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/代码生成/主子表/ERP模式.png" alt="ERP 模式" tabindex="0" loading="lazy"><figcaption>ERP 模式</figcaption></figure><h2 id="_1-数据库表结构设计" tabindex="-1"><a class="header-anchor" href="#_1-数据库表结构设计"><span><a href="#_1-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1">#</a> 1. 数据库表结构设计</span></a></h2><p>① 设计 <strong>主表</strong> 的数据库表名为 <code>system_student</code> 学生表，其建表语句如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE `system_student` (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;编号&#39;,</span></span>\n<span class="line"><span>  `name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &#39;&#39; COMMENT &#39;名字&#39;,</span></span>\n<span class="line"><span>  `birthday` datetime NOT NULL COMMENT &#39;出生日期&#39;,</span></span>\n<span class="line"><span>  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT &#39;简介&#39;,</span></span>\n<span class="line"><span>  `creator` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT &#39;&#39; COMMENT &#39;创建者&#39;,</span></span>\n<span class="line"><span>  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,</span></span>\n<span class="line"><span>  `updater` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT &#39;&#39; COMMENT &#39;更新者&#39;,</span></span>\n<span class="line"><span>  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;更新时间&#39;,</span></span>\n<span class="line"><span>  `deleted` bit(1) NOT NULL DEFAULT b&#39;0&#39; COMMENT &#39;是否删除&#39;,</span></span>\n<span class="line"><span>  `tenant_id` bigint NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;租户编号&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`) USING BTREE</span></span>\n<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&#39;学生表&#39;;</span></span></code></pre></div><p>② 设计 <strong>子表</strong> 的数据库表名为 <code>system_student_course</code> 学生课程表，其建表语句如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE `system_student_course` (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;编号&#39;,</span></span>\n<span class="line"><span>  `student_id` bigint NOT NULL COMMENT &#39;学生编号&#39;,</span></span>\n<span class="line"><span>  `name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &#39;&#39; COMMENT &#39;名字&#39;,</span></span>\n<span class="line"><span>  `score` tinyint NOT NULL COMMENT &#39;分数&#39;,</span></span>\n<span class="line"><span>  `creator` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT &#39;&#39; COMMENT &#39;创建者&#39;,</span></span>\n<span class="line"><span>  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,</span></span>\n<span class="line"><span>  `updater` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT &#39;&#39; COMMENT &#39;更新者&#39;,</span></span>\n<span class="line"><span>  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;更新时间&#39;,</span></span>\n<span class="line"><span>  `deleted` bit(1) NOT NULL DEFAULT b&#39;0&#39; COMMENT &#39;是否删除&#39;,</span></span>\n<span class="line"><span>  `tenant_id` bigint NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;租户编号&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`) USING BTREE</span></span>\n<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&#39;学生课程表&#39;;</span></span></code></pre></div><p>它和主表的关系是一对多，一个学生可以有多个课程，通过 <code>student_id</code> 字段进行关联。</p><p>③ 设计 <strong>子表</strong> 的数据表名为 <code>system_student_grade</code> 学生班级表，其建表语句如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE `system_student_grade` (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;编号&#39;,</span></span>\n<span class="line"><span>  `student_id` bigint NOT NULL COMMENT &#39;学生编号&#39;,</span></span>\n<span class="line"><span>  `name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &#39;&#39; COMMENT &#39;名字&#39;,</span></span>\n<span class="line"><span>  `teacher` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;班主任&#39;,</span></span>\n<span class="line"><span>  `creator` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT &#39;&#39; COMMENT &#39;创建者&#39;,</span></span>\n<span class="line"><span>  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,</span></span>\n<span class="line"><span>  `updater` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT &#39;&#39; COMMENT &#39;更新者&#39;,</span></span>\n<span class="line"><span>  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;更新时间&#39;,</span></span>\n<span class="line"><span>  `deleted` bit(1) NOT NULL DEFAULT b&#39;0&#39; COMMENT &#39;是否删除&#39;,</span></span>\n<span class="line"><span>  `tenant_id` bigint NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;租户编号&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`) USING BTREE</span></span>\n<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&#39;学生班级表&#39;;</span></span></code></pre></div><p>它和主表的关系是一对一，一个学生只能有一个班级，通过 <code>student_id</code> 字段进行关联。</p><h2 id="_2-代码生成" tabindex="-1"><a class="header-anchor" href="#_2-代码生成"><span><a href="#_2-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90">#</a> 2. 代码生成</span></a></h2><h3 id="_2-1-导入表" tabindex="-1"><a class="header-anchor" href="#_2-1-导入表"><span><a href="#_2-1-%E5%AF%BC%E5%85%A5%E8%A1%A8">#</a> 2.1 导入表</span></a></h3><p>点击 [基础设施 -&gt; 代码生成] 菜单，点击 [基于 DB 导入] 按钮，选择 <code>system_student</code>、<code>system_student_course</code>、<code>system_student_grade</code> 表，后点击 [确认] 按钮。</p><h3 id="_2-2-编辑配置-主表" tabindex="-1"><a class="header-anchor" href="#_2-2-编辑配置-主表"><span><a href="#_2-2-%E7%BC%96%E8%BE%91%E9%85%8D%E7%BD%AE-%E4%B8%BB%E8%A1%A8">#</a> 2.2 编辑配置（主表）</span></a></h3><p>点击 <code>system_student</code> 所在行的 [编辑] 按钮，修改生成配置。后操作如下：</p><figure><img src="https://doc.iocoder.cn/img/代码生成/主子表/生成信息-主表.png" alt="生成信息" tabindex="0" loading="lazy"><figcaption>生成信息</figcaption></figure><ul><li>将【生成模版】设置为【主表（标准模式）】。🔥最最关键的步骤！</li><li>将【上级菜单】设置为【系统管理】。</li><li>将【前端类型】设置为“前端项目”对应的“前端类型”。例如说，我们这里演示的是 <code>yudao-ui-admin-vue3</code> 前端项目，则选择了【Vue3 Element Plus 标准模版】。</li></ul><h3 id="_2-3-编辑配置-子表" tabindex="-1"><a class="header-anchor" href="#_2-3-编辑配置-子表"><span><a href="#_2-3-%E7%BC%96%E8%BE%91%E9%85%8D%E7%BD%AE-%E5%AD%90%E8%A1%A8">#</a> 2.3 编辑配置（子表）</span></a></h3><p>① 点击 <code>system_student_course</code> 所在行的 [编辑] 按钮，修改生成配置。后操作如下：</p><figure><img src="https://doc.iocoder.cn/img/代码生成/主子表/生成信息-子表-课程.png" alt="生成信息 - 课程" tabindex="0" loading="lazy"><figcaption>生成信息 - 课程</figcaption></figure><ul><li>将【生成模版】设置为【子表】。🔥最最关键的步骤！</li><li>业务名：一般建议和【主表】保持一致，所以这里改成了 <code>student</code>。</li><li>主表信息：将【关联的主表】设置为 <code>system_student</code> 表，将【子表关联的字段】设置为 <code>student_id</code> 字段，将【关联关系】设置为“一对多”。</li></ul><p>② 点击 <code>system_student_grade</code> 所在行的 [编辑] 按钮，修改生成配置。后操作如下：</p><figure><img src="https://doc.iocoder.cn/img/代码生成/主子表/生成信息-子表-班级.png" alt="生成信息 - 班级" tabindex="0" loading="lazy"><figcaption>生成信息 - 班级</figcaption></figure><ul><li>（同上）将【生成模版】设置为【子表】。🔥最最关键的步骤！</li><li>（同上）业务名：一般建议和【主表】保持一致，所以这里改成了 <code>student</code>。</li><li>（基本同上，关联关系不同）主表信息：将【关联的主表】设置为 <code>system_student</code> 表，将【子表关联的字段】设置为 <code>student_id</code> 字段，将【关联关系】设置为“一对一”。</li></ul><h3 id="_2-4-预览代码" tabindex="-1"><a class="header-anchor" href="#_2-4-预览代码"><span><a href="#_2-4-%E9%A2%84%E8%A7%88%E4%BB%A3%E7%A0%81">#</a> 2.4 预览代码</span></a></h3><p>点击 <code>system_student</code> 所在行的 [预览] 按钮，在线预览生成的代码，检查是否符合预期。</p><h3 id="_2-5-生成代码" tabindex="-1"><a class="header-anchor" href="#_2-5-生成代码"><span><a href="#_2-5-%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81">#</a> 2.5 生成代码</span></a></h3><p>点击 <code>system_student</code> 所在行的 [生成] 按钮，生成代码。</p><h1 id="_3-代码运行" tabindex="-1"><a class="header-anchor" href="#_3-代码运行"><span><a href="#_3-%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C">#</a> 3. 代码运行</span></a></h1>',48)),n("p",null,[a[4]||(a[4]=s("和 ")),i(e,{to:"/new-feature/"},{default:t(()=>a[3]||(a[3]=[s("《代码生成【单表】》")])),_:1}),a[5]||(a[5]=s(" 的「3. 代码运行」一致，就不重复赘述。"))])])}const _=p(r,[["render",o],["__file","master-sub.html.vue"]]),h=JSON.parse('{"path":"/project/rouyi-vue-pro/new-feature/master-sub.html","title":"代码生成【主子表】","lang":"en-US","frontmatter":{"title":"代码生成【主子表】","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":21,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 0. 主子表模式","slug":"_0-主子表模式","link":"#_0-主子表模式","children":[{"level":3,"title":"# 0.1 标准模式","slug":"_0-1-标准模式","link":"#_0-1-标准模式","children":[]},{"level":3,"title":"# 0.2 内嵌模式","slug":"_0-2-内嵌模式","link":"#_0-2-内嵌模式","children":[]},{"level":3,"title":"# 0.3 ERP 模式","slug":"_0-3-erp-模式","link":"#_0-3-erp-模式","children":[]}]},{"level":2,"title":"# 1. 数据库表结构设计","slug":"_1-数据库表结构设计","link":"#_1-数据库表结构设计","children":[]},{"level":2,"title":"# 2. 代码生成","slug":"_2-代码生成","link":"#_2-代码生成","children":[{"level":3,"title":"# 2.1 导入表","slug":"_2-1-导入表","link":"#_2-1-导入表","children":[]},{"level":3,"title":"# 2.2 编辑配置（主表）","slug":"_2-2-编辑配置-主表","link":"#_2-2-编辑配置-主表","children":[]},{"level":3,"title":"# 2.3 编辑配置（子表）","slug":"_2-3-编辑配置-子表","link":"#_2-3-编辑配置-子表","children":[]},{"level":3,"title":"# 2.4 预览代码","slug":"_2-4-预览代码","link":"#_2-4-预览代码","children":[]},{"level":3,"title":"# 2.5 生成代码","slug":"_2-5-生成代码","link":"#_2-5-生成代码","children":[]}]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":5.82,"words":1745},"filePathRelative":"project/rouyi-vue-pro/new-feature/master-sub.md","localizedDate":"July 7, 2024"}');export{_ as comp,h as data};
