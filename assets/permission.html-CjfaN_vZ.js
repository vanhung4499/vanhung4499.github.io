import{_ as e,o as i,c as n,a}from"./app-BRTHG7K9.js";const o={},c=a('<h1 id="【通用】数据权限" tabindex="-1"><a class="header-anchor" href="#【通用】数据权限"><span>【通用】数据权限</span></a></h1><p>数据权限，由 <code>yudao-module-crm-biz</code> 后端模块的 <code>permission</code> 包实现，支持某个人对某个数据（线索、客户、商机、合同等等），有对应的权限。</p><p>目前权限由 CrmPermissionLevelEnum 枚举，包括 3 种：<code>OWNER</code>（负责人）、<code>WRITE</code>（读写）、<code>READ</code>（只读），并且 <code>OWNER &gt; WRITE &gt; READ</code>。</p><p>友情提示：</p><p>为什么不使用全局封装的 [《数据权限》])(/data-permission) 呢？</p><p>目前 CRM 系统的数据权限比较灵活，部分功能无法很好的支持。例如说：</p><ul><li>全局的数据权限，只支持对某个数据的操作权限，而 CRM 需要分 OWNER、WRITE、READ 三种权限</li><li>全局的数据全量，对关联数据的权限控制，无法很好的支持。例如说：对某个客户有 WRITE 权限时，可以 WRITE 它下面的联系人、商机、合同等等</li></ul><p>你可以理解全局的数据权限是基于 DB（DAO）层面实现的，而 CRM 的数据权限是基于 Service 层面实现的。</p><h2 id="_1-表结构" tabindex="-1"><a class="header-anchor" href="#_1-表结构"><span><a href="#_1-%E8%A1%A8%E7%BB%93%E6%9E%84">#</a> 1. 表结构</span></a></h2><blockquote><p>省略 creator/create_time/updater/update_time/deleted/tenant_id 等通用字段</p></blockquote><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>CREATE TABLE `crm_permission` (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;编号&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `user_id` bigint NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;用户编号&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `biz_type` tinyint NOT NULL DEFAULT &#39;100&#39; COMMENT &#39;数据类型&#39;,</span></span>\n<span class="line"><span>  `biz_id` bigint NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;数据编号&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `level` int NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;会员等级&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`) USING BTREE</span></span>\n<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=86 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&#39;CRM 数据权限表&#39;;</span></span></code></pre></div><p>基本就是三要素：</p><ul><li>人：<code>user_id</code> 字段</li><li>数据：<code>biz_type</code> + <code>biz_id</code> 字段。其中 <code>biz_type</code> 由 CrmBizTypeEnum 枚举，包括线索、客户、联系人、商机、合同、回款等等</li><li>权限：<code>level</code> 字段。由 CrmPermissionLevelEnum 枚举，包括 <code>OWNER</code>、<code>WRITE</code>、<code>READ</code> 三种</li></ul><h3 id="_1-1-owner-负责人" tabindex="-1"><a class="header-anchor" href="#_1-1-owner-负责人"><span><a href="#_1-1-owner-%E8%B4%9F%E8%B4%A3%E4%BA%BA">#</a> 1.1 <code>OWNER</code> 负责人</span></a></h3><p>① 每个数据在新增时，会插入一条 <code>OWNER</code> 的权限。例如说，新增一个客户，会插入一条 <code>OWNER</code> 的权限。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/CRM手册/数据权限/数据权限新增-负责人.png" alt="新增 OWNER 负责人（代码）" tabindex="0" loading="lazy"><figcaption>新增 OWNER 负责人（代码）</figcaption></figure><p>② 每个数据在转移时，会对新、老负责人的权限做不同的处理。例如说，联系人转移给其他人，会更新对应的权限。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/CRM手册/数据权限/数据权限转移-负责人.png" alt="转移 OWNER 负责人（界面）" tabindex="0" loading="lazy"><figcaption>转移 OWNER 负责人（界面）</figcaption></figure><ul><li>老负责人，会将对应的 <code>crm_permission</code> 的 <code>level</code> 更新为 <code>READ</code></li><li>新负责人，会插入一条 <code>OWNER</code> 的权限</li></ul><figure><img src="https://cloud.iocoder.cn/img/CRM手册/数据权限/数据权限转移-负责人2.png" alt="转移 OWNER 负责人（代码）" tabindex="0" loading="lazy"><figcaption>转移 OWNER 负责人（代码）</figcaption></figure><h3 id="_1-2-write-读写、read-只读" tabindex="-1"><a class="header-anchor" href="#_1-2-write-读写、read-只读"><span><a href="#_1-2-write-%E8%AF%BB%E5%86%99%E3%80%81read-%E5%8F%AA%E8%AF%BB">#</a> 1.2 <code>WRITE</code> 读写、<code>READ</code> 只读</span></a></h3><p>在每个数据的详情界面，有一个 [团队成员] 的功能，可以查看当前数据的权限，同时可以修改 <code>WRITE</code> 和 <code>READ</code> 的权限。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/CRM手册/数据权限/数据权限新增-读写.png" alt="新增读写权限（界面）" tabindex="0" loading="lazy"><figcaption>新增读写权限（界面）</figcaption></figure><p>这是一个通用的功能，不需要每个数据都实现一遍，在 CrmPermissionController 已经统一实现。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/CRM手册/数据权限/数据权限新增-读写2.png" alt="新增读写权限（代码）" tabindex="0" loading="lazy"><figcaption>新增读写权限（代码）</figcaption></figure><p>友情提示：为什么转移负责人不能在 CrmPermissionController 统一实现呢？</p><p>考虑到查询方便，每个数据记录自身会有 <code>owner_user_id</code> 字段，转移时需要更新，所以没一起实现。</p><h2 id="_3-后端实现" tabindex="-1"><a class="header-anchor" href="#_3-后端实现"><span><a href="#_3-%E5%90%8E%E7%AB%AF%E5%AE%9E%E7%8E%B0">#</a> 3. 后端实现</span></a></h2><h3 id="_2-1-操作校验" tabindex="-1"><a class="header-anchor" href="#_2-1-操作校验"><span><a href="#_2-1-%E6%93%8D%E4%BD%9C%E6%A0%A1%E9%AA%8C">#</a> 2.1 操作校验</span></a></h3><p>操作校验，通过 <code>@CrmPermission</code> 注解实现，只要添加在 Service 方法上，即可实现对应的权限校验。</p><figure><img src="https://cloud.iocoder.cn/img/CRM手册/数据权限/CrmPermission注解.png" alt="CrmPermission 注解" tabindex="0" loading="lazy"><figcaption>CrmPermission 注解</figcaption></figure><p>① 使用示例，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/CRM手册/数据权限/CrmPermission注解使用示例.png" alt="CrmPermission 注解使用示例" tabindex="0" loading="lazy"><figcaption>CrmPermission 注解使用示例</figcaption></figure><p>② 通过 Spring AOP 实现，可见 CrmPermissionAspect 类，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/CRM手册/数据权限/CrmPermissionAspect类.png" alt="CrmPermissionAspect 类" tabindex="0" loading="lazy"><figcaption>CrmPermissionAspect 类</figcaption></figure><p>通过这个类，我们也可以看出为什么要有 <code>crm_permission</code> 表。如果没有这个表，我们需要查询每个业务的数据，通过它们的字段，判断当前用户是否有权限，这样拓展性比较差。</p><p>③ 【CRM 管理员】的角色枚举是 <code>crm_admin</code>，它和全局的【超级管理员】 <code>super_admin</code> 是分开的。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/CRM手册/数据权限/CRM管理员.png" alt="CRM 管理员" tabindex="0" loading="lazy"><figcaption>CRM 管理员</figcaption></figure><p>也就是说，把【CRM 管理员】分配给某个人时，可以查询和操作所有 CRM 的数据。</p><h3 id="_2-2-查询过滤" tabindex="-1"><a class="header-anchor" href="#_2-2-查询过滤"><span><a href="#_2-2-%E6%9F%A5%E8%AF%A2%E8%BF%87%E6%BB%A4">#</a> 2.2 查询过滤</span></a></h3><p>在数据的列表界面，我们需要在 DB 数据库查询的时候，就将没有 <code>READ</code> 权限的数据过滤掉。</p><p>疑问：为什么不通过类似 <code>@CrmPermission</code> 注解实现呢？</p><p>可以实现，但是会查询特别多没权限的数据到内存中，导致性能比较差。</p><p>这个无法通用实现，目前是每个业务 Mapper 拼接 SQL 实现，通过联表查询 <code>crm_permission</code> 表，进行过滤。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/CRM手册/数据权限/查询过滤.png" alt="查询过滤" tabindex="0" loading="lazy"><figcaption>查询过滤</figcaption></figure><p>核心的拼接逻辑在 CrmPermissionUtils 的 <code>#appendPermissionCondition(...)</code> 方法里，不是很复杂，可以自己瞅瞅。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/CRM手册/数据权限/CrmPermissionUtils类.png" alt="appendPermissionCondition 方法" tabindex="0" loading="lazy"><figcaption>appendPermissionCondition 方法</figcaption></figure><p>另外，CRM 系统的所有管理界面，都有一个 CrmSceneTypeEnum 枚举，分成 3 种场景：<code>OWNER</code> 我负责的，<code>INVOLVED</code> 我参与的、<code>SUBORDINATE</code> 下属负责的，也是通过上面查询实现的。</p><figure><img src="https://cloud.iocoder.cn/img/CRM手册/数据权限/CRM场景.png" alt="CRM 场景" tabindex="0" loading="lazy"><figcaption>CRM 场景</figcaption></figure><p>画外音</p><p>看到这里，在回过头看为什么不基于全局的 [《数据权限》])(/data-permission) 实现，是不是有点明白了呢？</p><p>在设计系统的数据权限，我们总是渴望通过全局的、自动化的方式实现。但是，实际上，业务的数据权限是非常复杂的，很难通过全局的方式实现。</p><p>因此，我们需要在业务层面，实现对应的数据权限逻辑。嘿嘿~</p>',53),s=[c];function p(d,r){return i(),n("div",null,s)}const l=e(o,[["render",p],["__file","permission.html.vue"]]),g=JSON.parse('{"path":"/project/yudao-cloud/crm/permission.html","title":"【通用】数据权限","lang":"en-US","frontmatter":{"title":"【通用】数据权限","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":130,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 表结构","slug":"_1-表结构","link":"#_1-表结构","children":[{"level":3,"title":"# 1.1 OWNER 负责人","slug":"_1-1-owner-负责人","link":"#_1-1-owner-负责人","children":[]},{"level":3,"title":"# 1.2 WRITE 读写、READ 只读","slug":"_1-2-write-读写、read-只读","link":"#_1-2-write-读写、read-只读","children":[]}]},{"level":2,"title":"# 3. 后端实现","slug":"_3-后端实现","link":"#_3-后端实现","children":[{"level":3,"title":"# 2.1 操作校验","slug":"_2-1-操作校验","link":"#_2-1-操作校验","children":[]},{"level":3,"title":"# 2.2 查询过滤","slug":"_2-2-查询过滤","link":"#_2-2-查询过滤","children":[]}]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":5.75,"words":1726},"filePathRelative":"project/yudao-cloud/crm/permission.md","localizedDate":"July 7, 2024"}');export{l as comp,g as data};
