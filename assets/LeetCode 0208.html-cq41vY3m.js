import{_ as i,o as l,c as t,d as n,a as s,e as a}from"./app-fjbxAy1X.js";const e={},r=n('<h1 id="_0208-implement-trie-prefix-tree" tabindex="-1"><a class="header-anchor" href="#_0208-implement-trie-prefix-tree"><span><a href="https://leetcode.com/problems/implement-trie-prefix-tree/" target="_blank" rel="noopener noreferrer">0208. Implement Trie (Prefix Tree)</a></span></a></h1><ul><li>Thẻ: Thiết kế, Cây tiền tố, Bảng băm, Chuỗi</li><li>Độ khó: Trung bình</li></ul><h2 id="tom-tat-đe-bai" tabindex="-1"><a class="header-anchor" href="#tom-tat-đe-bai"><span>Tóm tắt đề bài</span></a></h2><p><strong>Yêu cầu</strong>: Triển khai lớp <code>Trie</code> để tạo cây tiền tố.</p><p>Lớp <code>Trie</code>:</p><ul><li><code>Trie()</code> Khởi tạo đối tượng cây tiền tố.</li><li><code>void insert(String word)</code> Chèn chuỗi <code>word</code> vào cây tiền tố.</li><li><code>boolean search(String word)</code> Trả về <code>True</code> nếu chuỗi <code>word</code> có trong cây tiền tố (nghĩa là đã chèn trước đó); ngược lại trả về <code>False</code>.</li><li><code>boolean startsWith(String prefix)</code> Trả về <code>True</code> nếu một trong các tiền tố của chuỗi <code>word</code> đã chèn trước đó là <code>prefix</code>; ngược lại trả về <code>False</code>.</li></ul><p><strong>Giải thích</strong>:</p>',7),o=s("ul",null,[s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1"),s("mo",null,"≤"),s("mtext",null,"word.length, prefix.length"),s("mo",null,"≤"),s("mn",null,"2000")]),s("annotation",{encoding:"application/x-tex"},"1 \\le \\text{word.length, prefix.length} \\le 2000")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7804em","vertical-align":"-0.136em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"word.length, prefix.length")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2000")])])]),a(".")]),s("li",null,[s("code",null,"word"),a(" và "),s("code",null,"prefix"),a(" chỉ chứa các ký tự chữ cái thường.")]),s("li",null,[a("Số lần gọi "),s("code",null,"insert"),a(", "),s("code",null,"search"),a(" và "),s("code",null,"startsWith"),a(" không vượt quá tổng cộng "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"3"),s("mo",null,"∗"),s("mn",null,"1"),s("msup",null,[s("mn",null,"0"),s("mn",null,"4")])]),s("annotation",{encoding:"application/x-tex"},"3 * 10^4")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"3"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mord"},[s("span",{class:"mord"},"0"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"4")])])])])])])])])])]),a(" lần.")])],-1),p=n(`<p><strong>Ví dụ</strong>:</p><ul><li>Ví dụ 1:</li></ul><div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">Input:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Trie&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;insert&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;search&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;search&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;startsWith&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;insert&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;search&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[[], [</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;apple&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">], [</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;apple&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">], [</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">], [</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">], [</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">], [</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">Output:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[null, null, true, false, true, null, true]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">Giải thích:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">Trie trie </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> new </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">Trie</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">trie.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">insert</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;apple&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">trie.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">search</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;apple&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);   </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">//</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> Trả về </span><span style="color:#D19A66;--shiki-dark:#D19A66;">True</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">trie.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">search</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);     </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">//</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> Trả về </span><span style="color:#D19A66;--shiki-dark:#D19A66;">False</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">trie.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">startsWith</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">//</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> Trả về </span><span style="color:#D19A66;--shiki-dark:#D19A66;">True</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">trie.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">insert</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">trie.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">search</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);     </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">//</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> Trả về </span><span style="color:#D19A66;--shiki-dark:#D19A66;">True</span></span></code></pre></div><h2 id="y-tuong-giai-quyet" tabindex="-1"><a class="header-anchor" href="#y-tuong-giai-quyet"><span>Ý tưởng giải quyết</span></a></h2><h3 id="y-tuong-1-cay-tien-to-trie" tabindex="-1"><a class="header-anchor" href="#y-tuong-1-cay-tien-to-trie"><span>Ý tưởng 1: Cây tiền tố (Trie)</span></a></h3><p>Cây tiền tố (Trie) là một cây nhiều nhánh, trong đó mỗi nút chứa một mảng con trỏ <code>children</code> trỏ đến các nút con và một biến boolean <code>isEnd</code>. <code>children</code> được sử dụng để lưu trữ các nút con tương ứng với các ký tự hiện tại, thường có độ dài bằng số lượng ký tự khác nhau, hoặc có thể sử dụng bảng băm thay thế cho mảng con trỏ. <code>isEnd</code> được sử dụng để xác định xem nút hiện tại có phải là kết thúc của một chuỗi hay không.</p><p>Dưới đây là các bước cụ thể để chèn và tìm kiếm tiền tố:</p><p><strong>Chèn chuỗi</strong>:</p><ul><li>Bắt đầu từ nút gốc, chèn chuỗi vào cây tiền tố. Đối với ký tự cần chèn, có hai trường hợp xảy ra: <ul><li>Nếu nút tương ứng với ký tự đã tồn tại, di chuyển đến nút con và tiếp tục xử lý ký tự tiếp theo.</li><li>Nếu nút tương ứng với ký tự không tồn tại, tạo một nút mới, lưu trữ nút mới đó trong <code>children</code> tại vị trí tương ứng, sau đó di chuyển đến nút con và tiếp tục xử lý ký tự tiếp theo.</li></ul></li><li>Lặp lại các bước trên cho đến khi xử lý xong ký tự cuối cùng, sau đó đánh dấu nút hiện tại là kết thúc của chuỗi.</li></ul><p><strong>Tìm kiếm tiền tố</strong>:</p><ul><li>Bắt đầu từ nút gốc, tìm kiếm tiền tố trong cây. Đối với ký tự cần tìm kiếm, có hai trường hợp xảy ra: <ul><li>Nếu nút tương ứng với ký tự tồn tại, di chuyển đến nút con và tiếp tục tìm kiếm ký tự tiếp theo.</li><li>Nếu nút tương ứng với ký tự không tồn tại, có nghĩa là cây tiền tố không chứa tiền tố đó, trả về giá trị <code>False</code>.</li></ul></li><li>Lặp lại các bước trên cho đến khi tìm kiếm xong ký tự cuối cùng, nếu nút hiện tại khác <code>None</code> và là kết thúc của một chuỗi, thì cây tiền tố chứa tiền tố đó.</li></ul><h3 id="y-tuong-1-code" tabindex="-1"><a class="header-anchor" href="#y-tuong-1-code"><span>Ý tưởng 1: Code</span></a></h3><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> __init__</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;font-style:italic;--shiki-dark-font-style:italic;">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.children </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> dict</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.isEnd </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Trie</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> __init__</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;font-style:italic;--shiki-dark-font-style:italic;">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.root </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> insert</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;font-style:italic;--shiki-dark-font-style:italic;">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;font-style:italic;--shiki-dark-font-style:italic;">word</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">str</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) -&gt; </span><span style="color:#D19A66;--shiki-dark:#D19A66;">None</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        cur </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.root</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ch </span><span style="color:#C678DD;--shiki-dark:#C678DD;">in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> word:</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ch </span><span style="color:#C678DD;--shiki-dark:#C678DD;">not</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> cur.children:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                cur.children[ch] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Node</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            cur </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> cur.children[ch]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        cur.isEnd </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> True</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> search</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;font-style:italic;--shiki-dark-font-style:italic;">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;font-style:italic;--shiki-dark-font-style:italic;">word</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">str</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) -&gt; </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">bool</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        cur </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.root</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ch </span><span style="color:#C678DD;--shiki-dark:#C678DD;">in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> word:</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ch </span><span style="color:#C678DD;--shiki-dark:#C678DD;">not</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> cur.children:</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> False</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            cur </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> cur.children[ch]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> cur </span><span style="color:#C678DD;--shiki-dark:#C678DD;">is</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> not</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> None</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> and</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> cur.isEnd</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> startsWith</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;font-style:italic;--shiki-dark-font-style:italic;">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;font-style:italic;--shiki-dark-font-style:italic;">prefix</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">str</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) -&gt; </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">bool</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        cur </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.root</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ch </span><span style="color:#C678DD;--shiki-dark:#C678DD;">in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> prefix:</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ch </span><span style="color:#C678DD;--shiki-dark:#C678DD;">not</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> cur.children:</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> False</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            cur </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> cur.children[ch]</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> cur </span><span style="color:#C678DD;--shiki-dark:#C678DD;">is</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> not</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> None</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="y-tuong-1-đo-phuc-tap" tabindex="-1"><a class="header-anchor" href="#y-tuong-1-đo-phuc-tap"><span>Ý tưởng 1: Độ phức tạp</span></a></h3>`,14),c=s("ul",null,[s("li",null,[s("strong",null,"Độ phức tạp thời gian"),a(": Khởi tạo là "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])]),a(". Thời gian chèn và tìm kiếm là "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",{mathvariant:"normal"},"∣"),s("mi",null,"S"),s("mi",{mathvariant:"normal"},"∣"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(|S|)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"∣"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mord"},"∣"),s("span",{class:"mclose"},")")])])]),a(". Trong đó "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"∣"),s("mi",null,"S"),s("mi",{mathvariant:"normal"},"∣")]),s("annotation",{encoding:"application/x-tex"},"|S|")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"∣"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mord"},"∣")])])]),a(" là độ dài của chuỗi được chèn hoặc tìm kiếm.")]),s("li",null,[s("strong",null,"Độ phức tạp không gian"),a(": "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",{mathvariant:"normal"},"∣"),s("mi",null,"T"),s("mi",{mathvariant:"normal"},"∣"),s("mo",null,"×"),s("mo",null,"∑"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(|T| \\times \\sum)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"∣"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mord"},"∣"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"∑"),s("span",{class:"mclose"},")")])])]),a(". Trong đó "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"∣"),s("mi",null,"T"),s("mi",{mathvariant:"normal"},"∣")]),s("annotation",{encoding:"application/x-tex"},"|T|")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"∣"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mord"},"∣")])])]),a(" là tổng độ dài của các chuỗi được chèn và "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"∑")]),s("annotation",{encoding:"application/x-tex"},"\\sum")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"∑")])])]),a(" là kích thước của bộ ký tự.")])],-1),B=[r,o,p,c];function h(d,k){return l(),t("div",null,B)}const y=i(e,[["render",h],["__file","LeetCode 0208.html.vue"]]),u=JSON.parse('{"path":"/dsa/leetcode/LeetCode%200208.html","title":"LeetCode 0208","lang":"en-US","frontmatter":{"title":"LeetCode 0208","tags":["dsa","leetcode"],"categories":["dsa","leetcode"],"date created":"2023-09-24T00:00:00.000Z","date modified":"2023-09-30T00:00:00.000Z","description":"0208. Implement Trie (Prefix Tree) Thẻ: Thiết kế, Cây tiền tố, Bảng băm, Chuỗi Độ khó: Trung bình Tóm tắt đề bài Yêu cầu: Triển khai lớp Trie để tạo cây tiền tố. Lớp Trie: Trie(...","head":[["meta",{"property":"og:url","content":"https://vanhung4499.github.io/dsa/leetcode/LeetCode%200208.html"}],["meta",{"property":"og:site_name","content":"VanHung4499"}],["meta",{"property":"og:title","content":"LeetCode 0208"}],["meta",{"property":"og:description","content":"0208. Implement Trie (Prefix Tree) Thẻ: Thiết kế, Cây tiền tố, Bảng băm, Chuỗi Độ khó: Trung bình Tóm tắt đề bài Yêu cầu: Triển khai lớp Trie để tạo cây tiền tố. Lớp Trie: Trie(..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-28T15:54:38.000Z"}],["meta",{"property":"article:author","content":"Hung Nguyen"}],["meta",{"property":"article:tag","content":"dsa"}],["meta",{"property":"article:tag","content":"leetcode"}],["meta",{"property":"article:modified_time","content":"2024-06-28T15:54:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LeetCode 0208\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-28T15:54:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hung Nguyen\\",\\"url\\":\\"https://vanhung4499.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Tóm tắt đề bài","slug":"tom-tat-đe-bai","link":"#tom-tat-đe-bai","children":[]},{"level":2,"title":"Ý tưởng giải quyết","slug":"y-tuong-giai-quyet","link":"#y-tuong-giai-quyet","children":[{"level":3,"title":"Ý tưởng 1: Cây tiền tố (Trie)","slug":"y-tuong-1-cay-tien-to-trie","link":"#y-tuong-1-cay-tien-to-trie","children":[]},{"level":3,"title":"Ý tưởng 1: Code","slug":"y-tuong-1-code","link":"#y-tuong-1-code","children":[]},{"level":3,"title":"Ý tưởng 1: Độ phức tạp","slug":"y-tuong-1-đo-phuc-tap","link":"#y-tuong-1-đo-phuc-tap","children":[]}]}],"git":{"createdTime":1719590078000,"updatedTime":1719590078000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":3.2,"words":961},"filePathRelative":"dsa/leetcode/LeetCode 0208.md","localizedDate":"June 28, 2024","excerpt":"\\n<ul>\\n<li>Thẻ: Thiết kế, Cây tiền tố, Bảng băm, Chuỗi</li>\\n<li>Độ khó: Trung bình</li>\\n</ul>\\n<h2>Tóm tắt đề bài</h2>\\n<p><strong>Yêu cầu</strong>: Triển khai lớp <code>Trie</code> để tạo cây tiền tố.</p>\\n<p>Lớp <code>Trie</code>:</p>\\n<ul>\\n<li><code>Trie()</code> Khởi tạo đối tượng cây tiền tố.</li>\\n<li><code>void insert(String word)</code> Chèn chuỗi <code>word</code> vào cây tiền tố.</li>\\n<li><code>boolean search(String word)</code> Trả về <code>True</code> nếu chuỗi <code>word</code> có trong cây tiền tố (nghĩa là đã chèn trước đó); ngược lại trả về <code>False</code>.</li>\\n<li><code>boolean startsWith(String prefix)</code> Trả về <code>True</code> nếu một trong các tiền tố của chuỗi <code>word</code> đã chèn trước đó là <code>prefix</code>; ngược lại trả về <code>False</code>.</li>\\n</ul>","autoDesc":true}');export{y as comp,u as data};
