import{_ as e,o,c as a,a as r}from"./app-BRTHG7K9.js";const t={},c=r('<h1 id="操作日志、访问日志、异常日志" tabindex="-1"><a class="header-anchor" href="#操作日志、访问日志、异常日志"><span>操作日志、访问日志、异常日志</span></a></h1><p>项目提供 2 类 4 种系统日志：</p><ul><li>审计日志：用户的操作日志、登录日志</li><li>API 日志：RESTful API 的访问日志、错误日志</li></ul><h2 id="_1-操作日志" tabindex="-1"><a class="header-anchor" href="#_1-操作日志"><span><a href="#_1-%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97">#</a> 1. 操作日志</span></a></h2><p>操作日志，记录「谁」在「什么时间」对「什么对象」做了「什么事情」。</p><p>打开 [系统管理 -&gt; 审计日志 -&gt; 操作日志] 菜单，可以看到对应的列表，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/系统日志/操作日志.png" alt="操作日志" tabindex="0" loading="lazy"><figcaption>操作日志</figcaption></figure><h3 id="_1-1-操作日志组件" tabindex="-1"><a class="header-anchor" href="#_1-1-操作日志组件"><span><a href="#_1-1-%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E7%BB%84%E4%BB%B6">#</a> 1.1 操作日志组件</span></a></h3><p>① 操作日志的记录，由 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-spring-boot-starter-security/" target="_blank" rel="noopener noreferrer"><code>yudao-spring-boot-starter-security</code></a> 技术组件的 <code>operatelog</code> 包提供，基于我老友开源的 <a href="https://github.com/mouzt/mzt-biz-log" target="_blank" rel="noopener noreferrer">https://github.com/mouzt/mzt-biz-log</a> 实现，只需要添加 <code>@LogRecord</code> 注解，即可实现操作日志的记录。</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/系统日志/牛皮的操作日志示例.png" alt="牛皮的操作日志示例" tabindex="0" loading="lazy"><figcaption>牛皮的操作日志示例</figcaption></figure><ul><li>【新增】2021-09-16 10:00 订单创建，订单号：NO.11089999，其中涉及变量订单号 “NO.11089999”</li><li>【修改】2021-09-16 10:00 用户小明修改了订单的配送地址：从 “金灿灿小区” 修改到 “银盏盏小区”</li></ul><p>疑问：为什么不独立一个 <code>yudao-spring-boot-starter-operatelog</code> 组件呢？</p><p>早期，项目确实有 <code>operatelog</code> 组件，和 <code>mzt-biz-log</code> 组件一样，也是基于 Spring AOP + 注解实现。</p><p>随着我老友开源了 <code>mzt-biz-log</code> 组件，再加上希望减少项目的 starter 数量，所以决定直接使用 <code>mzt-biz-log</code> 组件，放到 <code>security</code> 组件中，而不是自己再造一个轮子。</p><p>② 操作日志的存储，由 <code>yudao-module-system</code> 的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/service/logger/OperateLogServiceImpl.java" target="_blank" rel="noopener noreferrer">OperateLog</a> 模块实现，记录到数据库的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/dal/dataobject/logger/OperateLogDO.java" target="_blank" rel="noopener noreferrer"><code>system_operate_log</code></a> 表。</p><hr><p>下面，我们来看项目中的几个使用案例。在开始之前，希望你先简单通读下 <a href="https://github.com/mouzt/mzt-biz-log/blob/master/readme.md" target="_blank" rel="noopener noreferrer">《mzt-biz-log 使用指南》</a> 文档。</p><h3 id="_1-2-场景一-创建用户" tabindex="-1"><a class="header-anchor" href="#_1-2-场景一-创建用户"><span><a href="#_1-2-%E5%9C%BA%E6%99%AF%E4%B8%80-%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7">#</a> 1.2 场景一：创建用户</span></a></h3><p>① 在 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-api/src/main/java/cn/iocoder/yudao/module/system/enums/LogRecordConstants.java" target="_blank" rel="noopener noreferrer">LogRecordConstants</a> 类中，定义 <code>SYSTEM_USER_CREATE_SUB_TYPE</code>、<code>SYSTEM_USER_CREATE_SUCCESS</code> 变量。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/系统日志/创建用户01.png" alt="LogRecordConstants" tabindex="0" loading="lazy"><figcaption>LogRecordConstants</figcaption></figure><p>疑问：为什么要在 LogRecordConstants 定义？</p><p>这个并非强制，只是一个使用建议。每个 <code>yudao-module-xxx</code> 模块下，建议都搞一个 LogRecordConstants 类，方便大家统一管理操作日志的常量，这样方便大家查找。</p><p>② 在 Service 方法上，添加 <code>@LogRecord</code> 注解，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/系统日志/创建用户02.png" alt="创建用户" tabindex="0" loading="lazy"><figcaption>创建用户</figcaption></figure><p>最终，我们记录操作日志的内容，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/系统日志/创建用户03.png" alt="操作日志" tabindex="0" loading="lazy"><figcaption>操作日志</figcaption></figure><h3 id="_1-3-场景二-修改用户信息" tabindex="-1"><a class="header-anchor" href="#_1-3-场景二-修改用户信息"><span><a href="#_1-3-%E5%9C%BA%E6%99%AF%E4%BA%8C-%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF">#</a> 1.3 场景二：修改用户信息</span></a></h3><p>① 在 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-api/src/main/java/cn/iocoder/yudao/module/system/enums/LogRecordConstants.java" target="_blank" rel="noopener noreferrer">LogRecordConstants</a> 类中，定义 <code>SYSTEM_USER_UPDATE_SUB_TYPE</code>、<code>SYSTEM_USER_UPDATE_SUCCESS</code> 变量。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/系统日志/修改用户01.png" alt="LogRecordConstants" tabindex="0" loading="lazy"><figcaption>LogRecordConstants</figcaption></figure><p>这里我们使用了 <code>_DIFF</code> 函数，实现对象 diff 功能，即“【备注】从【132】修改为【1324】”。因此，我们需要在 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/user/vo/user/UserSaveReqVO.java" target="_blank" rel="noopener noreferrer">UserSaveReqVO</a> 类上添加 <code>@DiffLogField</code> 注解，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/系统日志/UserSaveReqVO.png" alt="UserSaveReqVO" tabindex="0" loading="lazy"><figcaption>UserSaveReqVO</figcaption></figure><ul><li>注解的 <code>name</code> 字段：字段的中文名，例如说：“【备注】”</li><li>注解的 <code>function</code> 字段：自定义函数，用于字段的值翻译，例如说：<a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/framework/operatelog/core/PostParseFunction.java" target="_blank" rel="noopener noreferrer">PostParseFunction</a> 岗位名、<a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/framework/operatelog/core/DeptParseFunction.java" target="_blank" rel="noopener noreferrer">DeptParseFunction</a> 部门名、<a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/framework/operatelog/core/SexParseFunction.java" target="_blank" rel="noopener noreferrer">SexParseFunction</a> 性别等等</li></ul><p>② 在 Service 方法上，添加 <code>@LogRecord</code> 注解，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/系统日志/修改用户02.png" alt="修改用户信息" tabindex="0" loading="lazy"><figcaption>修改用户信息</figcaption></figure><p>最终，我们记录操作日志的内容，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/系统日志/修改用户03.png" alt="操作日志" tabindex="0" loading="lazy"><figcaption>操作日志</figcaption></figure><h3 id="_1-4-更多场景" tabindex="-1"><a class="header-anchor" href="#_1-4-更多场景"><span><a href="#_1-4-%E6%9B%B4%E5%A4%9A%E5%9C%BA%E6%99%AF">#</a> 1.4 更多场景</span></a></h3><p>由于操作日志需要手动记录，再加上是新改造的，所以目前只有少数几个地方使用了。后续，我们会逐步完善，让操作日志更加完善。</p><p>目前，<a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-crm/yudao-module-crm-api/src/main/java/cn/iocoder/yudao/module/crm/enums/LogRecordConstants.java" target="_blank" rel="noopener noreferrer">CRM 模块的操作日志</a>是最全的，应该有大几十个使用案例，大家碰到不会使用的地方，可以参考下。</p><h2 id="_2-登录日志" tabindex="-1"><a class="header-anchor" href="#_2-登录日志"><span><a href="#_2-%E7%99%BB%E5%BD%95%E6%97%A5%E5%BF%97">#</a> 2. 登录日志</span></a></h2><p>登录日志，记录用户的登录、登出行为，包括成功的、失败的。</p><p>打开 [系统管理 -&gt; 审计日志 -&gt; 登录日志] 菜单，可以看对应的列表，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/系统日志/11.png" alt="系统管理 -&gt; 登录日志" tabindex="0" loading="lazy"><figcaption>系统管理 -&gt; 登录日志</figcaption></figure><p>登录日志的存储，由 <code>yudao-module-system</code> 的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/service/logger/LoginLogServiceImpl.java" target="_blank" rel="noopener noreferrer">LoginLog</a> 模块实现，记录到数据库的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/dal/dataobject/logger/LoginLogDO.java" target="_blank" rel="noopener noreferrer"><code>system_login_log</code></a> 表。</p><p>登录类型通过 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-api/src/main/java/cn/iocoder/yudao/module/system/enums/logger/LoginLogTypeEnum.java" target="_blank" rel="noopener noreferrer">LoginLogTypeEnum</a> 枚举，登录结果通过 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-api/src/main/java/cn/iocoder/yudao/module/system/enums/logger/LoginResultEnum.java" target="_blank" rel="noopener noreferrer">LoginResultEnum</a> 枚举，都可以自定义。代码如下：</p><figure><img src="https://cloud.iocoder.cn/img/系统日志/12.png" alt="系统管理 -&gt; 登录日志" tabindex="0" loading="lazy"><figcaption>系统管理 -&gt; 登录日志</figcaption></figure><h3 id="_3-1-数据库记录" tabindex="-1"><a class="header-anchor" href="#_3-1-数据库记录"><span><a href="#_3-1-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%B0%E5%BD%95">#</a> 3.1 数据库记录</span></a></h3><p>API 访问日志，记录 API 的每次调用，包括 HTTP 请求、用户、开始时间、时长等等信息。</p><p>打开 [基础设施 -&gt; API 日志 -&gt; 访问日志] 菜单，可以看对应的列表，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/系统日志/访问日志.png" alt="系统管理 -&gt; 访问日志" tabindex="0" loading="lazy"><figcaption>系统管理 -&gt; 访问日志</figcaption></figure><p>① 访问日志的记录，由 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-spring-boot-starter-web/" target="_blank" rel="noopener noreferrer"><code>yudao-spring-boot-starter-web</code></a> 技术组件实现，通过 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-spring-boot-starter-web/src/main/java/cn/iocoder/yudao/framework/apilog/core/filter/ApiAccessLogFilter.java" target="_blank" rel="noopener noreferrer">ApiAccessLogFilter</a> 过滤 RESTful API 请求，<strong>异步</strong>记录日志。</p><p>② 访问日志的存储，由 <code>yudao-module-infra</code> 的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-infra/yudao-module-infra-biz/src/main/java/cn/iocoder/yudao/module/infra/service/logger/ApiAccessLogServiceImpl.java" target="_blank" rel="noopener noreferrer">AccessLog</a> 模块实现，记录到数据库的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-infra/yudao-module-infra-biz/src/main/java/cn/iocoder/yudao/module/infra/dal/dataobject/logger/ApiAccessLogDO.java" target="_blank" rel="noopener noreferrer"><code>infra_api_access_log</code></a> 表。</p><p>③ 可以通过 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-spring-boot-starter-web/src/main/java/cn/iocoder/yudao/framework/apilog/core/annotations/ApiAccessLog.java" target="_blank" rel="noopener noreferrer"><code>@ApiAccessLog</code></a> 注解，自定义 API 访问日志的记录。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/系统日志/ApiAccessLog.png" alt=" 注解" tabindex="0" loading="lazy"><figcaption> 注解</figcaption></figure><ul><li><code>enable</code> 字段：是否记录日志，默认为 <code>true</code> 记录日志。如果你想某个接口不记录日志，可以设置为 <code>false</code>，例如说 NotifyMessageController 的 <code>#getUnreadNotifyMessageCount()</code> 接口</li><li><code>requestEnable</code> 字段：默认为 <code>true</code> 记录请求参数，主要考虑请求参数一般不大。如果你想某个接口不记录请求参数，可以设置为 <code>false</code></li><li><code>sanitizeKeys</code> 字段：脱敏字段，例如说：密码、访问令牌等等。如果你想某个接口脱敏某个字段，可以设置为 <code>password</code>、<code>mobile</code> 等等。另外，ApiAccessLogFilter 默认有 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-spring-boot-starter-web/src/main/java/cn/iocoder/yudao/framework/apilog/core/filter/ApiAccessLogFilter.java#L52" target="_blank" rel="noopener noreferrer"><code>SANITIZE_KEYS</code></a> 全局配置，包括 <code>password</code>、<code>accessToken</code>、<code>refreshToken</code> 等，避免大家忘记~</li><li><code>responseEnable</code> 字段：默认为 <code>false</code> 不记录响应参数，主要考虑响应参数一般比较大，特别是 <code>GET</code> 列表请求。如果你想某个接口记录响应参数，可以设置为 <code>true</code></li><li><code>operateModule</code> 字段：操作模块，例如说：用户、岗位、部门等等。为空时，默认会读取类上的 Swagger <code>@Tag</code> 注解的 <code>name</code> 属性</li><li><code>operateName</code> 字段：操作名，例如说：新增用户、修改用户等等。为空时，默认会读取方法的 Swagger <code>@Operation</code> 注解的 <code>summary</code> 属性</li><li><code>operateType</code> 字段：操作类型，操作类型，在 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-spring-boot-starter-web/src/main/java/cn/iocoder/yudao/framework/apilog/core/interceptor/ApiAccessLogInterceptor.java" target="_blank" rel="noopener noreferrer">OperateTypeEnum</a> 枚举。目前有 <code>GET</code> 查询、<code>CREATE</code> 新增、<code>UPDATE</code> 修改、<code>DELETE</code> 删除、<code>EXPORT</code> 导出、<code>IMPORT</code> 导入、<code>OTHER</code> 其它，可进行自定义</li></ul><p>疑问：为什么要增加 <code>operateModule</code>、<code>operateName</code>、<code>operateType</code> 字段呢？</p><p>从感受上来说，它们应该属于“操作日志”，不应该记录到“访问日志”中。但是考虑到“操作日志”需要手动记录，可能大家会“偷懒”不想记录，但是业务人员（例如说：产品、运行）等看不懂“访问日志”，所以增加了这些字段，方便大家查看。</p><p>④ 我们在 <code>local</code> 本地环境下，一般做一些日常开发，使用不到“访问日志”，所以默认在 <code>application-local.yaml</code> 配置文件里，我们设置 <code>yudao.access-log.enable</code> 为 <code>false</code> 默认不记录，大家如果有需要，可以设置为 <code>true</code> 打开进行记录。</p><h3 id="_3-2-文件记录" tabindex="-1"><a class="header-anchor" href="#_3-2-文件记录"><span><a href="#_3-2-%E6%96%87%E4%BB%B6%E8%AE%B0%E5%BD%95">#</a> 3.2 文件记录</span></a></h3><p>项目还提供了 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-spring-boot-starter-web/src/main/java/cn/iocoder/yudao/framework/apilog/core/interceptor/ApiAccessLogInterceptor.java" target="_blank" rel="noopener noreferrer">ApiAccessLogInterceptor</a> 拦截器，打印 HTTP 请求、参数、耗时到文件（IDEA 控制台）中，方便大家进行调试。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/系统日志/ApiAccessLogInterceptor.png" alt="ApiAccessLogInterceptor" tabindex="0" loading="lazy"><figcaption>ApiAccessLogInterceptor</figcaption></figure><p>每次请求有两条：一条 <code>request</code> 【开始请求】包括请求 URL、请求参数；一条 <code>response</code> 【结束请求】只包括耗时。</p><p>另外，考虑到 ApiAccessLogInterceptor 的定位是开发调试，所以 <code>prod</code> 生产环境默认不开启噢，当然你也可以按照自己需要修改。</p><h2 id="_4-api-错误日志" tabindex="-1"><a class="header-anchor" href="#_4-api-错误日志"><span><a href="#_4-api-%E9%94%99%E8%AF%AF%E6%97%A5%E5%BF%97">#</a> 4. API 错误日志</span></a></h2><p>API 错误日志，记录每次 API 的异常调用，包括 HTTP 请求、用户、异常的堆栈等等信息。</p><p>打开 [基础设施 -&gt; API 日志 -&gt; 错误日志] 菜单，可以看对应的列表，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/系统日志/31.png" alt="系统管理 -&gt; 错误日志" tabindex="0" loading="lazy"><figcaption>系统管理 -&gt; 错误日志</figcaption></figure><p>错误日志的记录，由 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-spring-boot-starter-web/" target="_blank" rel="noopener noreferrer"><code>yudao-spring-boot-starter-web</code></a> 技术组件实现，通过 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-spring-boot-starter-web/src/main/java/cn/iocoder/yudao/framework/web/core/handler/GlobalExceptionHandler.java" target="_blank" rel="noopener noreferrer">GlobalExceptionHandler</a> 拦截每次 RESTful API 的系统异常，<strong>异步</strong>记录日志。</p><figure><img src="https://cloud.iocoder.cn/img/系统日志/32.png" alt="GlobalExceptionHandler" tabindex="0" loading="lazy"><figcaption>GlobalExceptionHandler</figcaption></figure><p>错误日志的存储，由 <code>yudao-module-infra</code> 的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-infra/yudao-module-infra-biz/src/main/java/cn/iocoder/yudao/module/infra/service/logger/ApiErrorLogServiceImpl.java" target="_blank" rel="noopener noreferrer">ErrorLog</a> 模块实现，记录到数据库的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-infra/yudao-module-infra-biz/src/main/java/cn/iocoder/yudao/module/infra/dal/dataobject/logger/ApiErrorLogDO.java" target="_blank" rel="noopener noreferrer"><code>infra_api_error_log</code></a> 表。</p>',70),d=[c];function i(n,l){return o(),a("div",null,d)}const u=e(t,[["render",i],["__file","system-log.html.vue"]]),g=JSON.parse('{"path":"/project/yudao-cloud/system-log.html","title":"操作日志、访问日志、异常日志","lang":"en-US","frontmatter":{"title":"操作日志、访问日志、异常日志","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":36,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 操作日志","slug":"_1-操作日志","link":"#_1-操作日志","children":[{"level":3,"title":"# 1.1 操作日志组件","slug":"_1-1-操作日志组件","link":"#_1-1-操作日志组件","children":[]},{"level":3,"title":"# 1.2 场景一：创建用户","slug":"_1-2-场景一-创建用户","link":"#_1-2-场景一-创建用户","children":[]},{"level":3,"title":"# 1.3 场景二：修改用户信息","slug":"_1-3-场景二-修改用户信息","link":"#_1-3-场景二-修改用户信息","children":[]},{"level":3,"title":"# 1.4 更多场景","slug":"_1-4-更多场景","link":"#_1-4-更多场景","children":[]}]},{"level":2,"title":"# 2. 登录日志","slug":"_2-登录日志","link":"#_2-登录日志","children":[{"level":3,"title":"# 3.1 数据库记录","slug":"_3-1-数据库记录","link":"#_3-1-数据库记录","children":[]},{"level":3,"title":"# 3.2 文件记录","slug":"_3-2-文件记录","link":"#_3-2-文件记录","children":[]}]},{"level":2,"title":"# 4. API 错误日志","slug":"_4-api-错误日志","link":"#_4-api-错误日志","children":[]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":8.83,"words":2650},"filePathRelative":"project/yudao-cloud/system-log.md","localizedDate":"July 7, 2024"}');export{u as comp,g as data};
