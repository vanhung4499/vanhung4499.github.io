import{_ as p,g as t,o as d,c as l,a as r,e as s,h as a,f as i,w as n}from"./app-5QVbWi7Z.js";const c={};function g(m,e){const o=t("RouteLink");return d(),l("div",null,[e[5]||(e[5]=r('<h1 id="支付宝支付接入" tabindex="-1"><a class="header-anchor" href="#支付宝支付接入"><span>支付宝支付接入</span></a></h1><h2 id="_0-概述" tabindex="-1"><a class="header-anchor" href="#_0-概述"><span><a href="#_0-%E6%A6%82%E8%BF%B0">#</a> 0. 概述</span></a></h2><p>在 <code>yudao-module-pay-biz</code> 模块的 <a href="https://github.com/YunaiV/ruoyi-vue-pro/tree/master/yudao-module-pay/yudao-module-pay-biz/src/main/java/cn/iocoder/yudao/module/pay/controller/admin/demo" target="_blank" rel="noopener noreferrer"><code>demo</code></a> 模块，我们提供了一个 <strong>支付</strong> 接入的示例。</p><p>它支持如下支付渠道：</p><ul><li>支付宝 <a href="https://opendocs.alipay.com/open/270/105898" target="_blank" rel="noopener noreferrer">电脑网站</a>支付</li><li>支付宝 <a href="https://opendocs.alipay.com/open/203/105288" target="_blank" rel="noopener noreferrer">手机网站</a>支付</li><li>支付宝 <a href="https://opendocs.alipay.com/open/194/105072" target="_blank" rel="noopener noreferrer">当面付</a>（条码支付）</li><li>支付宝 <a href="https://opendocs.alipay.com/apis/02890k" target="_blank" rel="noopener noreferrer">扫码</a>支付</li><li>微信 <a href="https://pay.weixin.qq.com/static/product/product_intro.shtml?name=qrcode" target="_blank" rel="noopener noreferrer">付款码</a>支付</li><li>微信 <a href="https://pay.weixin.qq.com/static/product/product_intro.shtml?name=qrcode" target="_blank" rel="noopener noreferrer">Native</a>支付</li></ul><p>疑问：为什么不支持微信小程序、公众号支付？</p><p>因为这 2 种微信支付方式，只能在微信环境中进行，而我们的接入示例使用 PC 浏览器，所以无法进行。</p>',7)),s("p",null,[e[2]||(e[2]=a("你可以阅读 ")),i(o,{to:"/pay/wx-lite-pay-demo/"},{default:n(()=>e[0]||(e[0]=[a("微信小程序支付接入")])),_:1}),e[3]||(e[3]=a(" 和 ")),i(o,{to:"/pay/wx-pub-pay-demo/"},{default:n(()=>e[1]||(e[1]=[a("微信公众号支付接入")])),_:1}),e[4]||(e[4]=a(" 文档，进行相关的支付接入。"))]),e[6]||(e[6]=r(`<p>下面，我们以 <code>demo</code> 模块为例子，讲解如何接入支付宝的 <a href="https://opendocs.alipay.com/open/270/105898" target="_blank" rel="noopener noreferrer">电脑网站</a> 支付。</p><h2 id="_1-第一步-配置支付渠道" tabindex="-1"><a class="header-anchor" href="#_1-第一步-配置支付渠道"><span><a href="#_1-%E7%AC%AC%E4%B8%80%E6%AD%A5-%E9%85%8D%E7%BD%AE%E6%94%AF%E4%BB%98%E6%B8%A0%E9%81%93">#</a> 1. 第一步，配置支付渠道</span></a></h2><p>① 在 [支付管理 -&gt; 应用信息] 菜单，新建 <code>demo</code> 模块使用的支付应用。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/支付手册/支付宝支付接入/应用信息.png" alt="应用信息" tabindex="0" loading="lazy"><figcaption>应用信息</figcaption></figure><ul><li>支付结果的回调地址：对应「2.4 第四步，实现回调接口」实现的接口。这里因为我们在本地演示，所以使用了 <code>127.0.0.1</code> IP 地址，如果你部署到服务器上，要设置服务器可调用到的 IP 地址。</li></ul><p>因为 <code>demo</code> 模块的支付应用默认已经创建，所以你可以直接使用。注意，这里的应用编号 <strong>“7”</strong> 稍后会使用到。</p><p>② 点击“示例用户”对应的【支付宝 PC 网站支付】，进入支付渠道的配置。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/支付手册/支付宝支付接入/支付渠道.png" alt="支付渠道" tabindex="0" loading="lazy"><figcaption>支付渠道</figcaption></figure><p>如果你还没有支付宝开放平台的账号，可以先参考 <a href="https://opendocs.alipay.com/common/02kkv7" target="_blank" rel="noopener noreferrer">《沙箱环境》</a> 文档，申请一个测试账号，我目前就是这么测试的。只需要阅读该文档的如下小节即可：</p><figure><img src="https://doc.iocoder.cn/img/支付手册/支付宝支付接入/沙箱环境.png" alt="沙箱环境" tabindex="0" loading="lazy"><figcaption>沙箱环境</figcaption></figure><h2 id="_2-第二步-实现支付调用【重要】" tabindex="-1"><a class="header-anchor" href="#_2-第二步-实现支付调用【重要】"><span><a href="#_2-%E7%AC%AC%E4%BA%8C%E6%AD%A5-%E5%AE%9E%E7%8E%B0%E6%94%AF%E4%BB%98%E8%B0%83%E7%94%A8%E3%80%90%E9%87%8D%E8%A6%81%E3%80%91">#</a> 2. 第二步，实现支付调用【重要】</span></a></h2><p>友情提示：由于 demo 模块的支付接入已经实现，这里你只要看懂什么意思即可，不用操作。</p><p>① 【后端】在 <code>demo</code> 模块所在的 <code>yudao-module-xx-biz</code> 模块的 <code>pom.xml</code> 文件，引入 <code>yudao-module-pay-api</code> 依赖，这样才可以调用到 PayOrderApi 接口。代码如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>    &lt;dependency&gt;</span></span>
<span class="line"><span>        &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>        &lt;artifactId&gt;yudao-module-pay-api&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;version&gt;\${revision}&lt;/version&gt;</span></span>
<span class="line"><span>    &lt;/dependency&gt;</span></span></code></pre></div><p>② 【后端】在 <code>demo</code> 模块的下单逻辑中，需要调用 PayOrderApi 的 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-pay/yudao-module-pay-biz/src/main/java/cn/iocoder/yudao/module/pay/service/demo/PayDemoOrderServiceImpl.java#L91-L96" target="_blank" rel="noopener noreferrer"><code>#createOrder(...)</code></a> 方法，创建支付单。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/支付手册/支付宝支付接入/调用PayOrderApi.png" alt="调用 PayOrderApi" tabindex="0" loading="lazy"><figcaption>调用 PayOrderApi</figcaption></figure><p>疑问：为什么 demo 模块在下单逻辑中，需要调用 PayOrderApi 接口来创建支付单？</p><p>因为跳转<strong>公用的</strong>【收银台】，需要通过读取支付订单，展示支付信息。这样，才能和 demo 模块进行解耦。收银台如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/支付手册/支付宝支付接入/收银台-1.png" alt="收银台" tabindex="0" loading="lazy"><figcaption>收银台</figcaption></figure><p>③ 【前端】在 <code>demo</code> 模块下完单之后，前端需要跳转到【收银台】。前端接入代码在 <a href="https://github.com/yudaocode/yudao-ui-admin-vue2/blob/master/src/views/pay/demo/index.vue#L193-L201" target="_blank" rel="noopener noreferrer"><code>/views/pay/demo/index.vue</code></a>，如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/支付手册/支付宝支付接入/前端接入代码.png" alt="前端接入代码" tabindex="0" loading="lazy"><figcaption>前端接入代码</figcaption></figure><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>this.$router.push({</span></span>
<span class="line"><span>  name: &#39;PayCashier&#39;,</span></span>
<span class="line"><span>  query:{</span></span>
<span class="line"><span>    id: row.payOrderId, // 支付单号</span></span>
<span class="line"><span>    returnUrl: encodeURIComponent(&#39;/pay/demo-order?id=&#39; + row.id) // 支付成功后，跳转的 URL</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>})</span></span></code></pre></div><p>另外，收银台的前端代码，在 <a href="https://github.com/yudaocode/yudao-ui-admin-vue2/blob/master/src/views/pay/cashier/index.vue" target="_blank" rel="noopener noreferrer"><code>/views/pay/cashier/index.vue</code></a> 里，已经实现，感兴趣可以看看。</p><h2 id="_3-第三步-实现回调接口【重要】" tabindex="-1"><a class="header-anchor" href="#_3-第三步-实现回调接口【重要】"><span><a href="#_3-%E7%AC%AC%E4%B8%89%E6%AD%A5-%E5%AE%9E%E7%8E%B0%E5%9B%9E%E8%B0%83%E6%8E%A5%E5%8F%A3%E3%80%90%E9%87%8D%E8%A6%81%E3%80%91">#</a> 3. 第三步，实现回调接口【重要】</span></a></h2><p>友情提示：由于 demo 模块的支付接入已经实现，这里你只要看懂什么意思即可，不用操作。</p><p>在 <code>demo</code> 模块所在的 <code>yudao-module-xx-biz</code> 模块，实现一个支付回调的接口，提供给支付【中心】回调。对应的代码在 PayDemoOrderController 的 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-pay/yudao-module-pay-biz/src/main/java/cn/iocoder/yudao/module/pay/controller/admin/demo/PayDemoOrderController.java#L50-L58" target="_blank" rel="noopener noreferrer"><code>#updateDemoOrderPaid(...)</code></a> 方法中，如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/支付手册/支付宝支付接入/实现回调接口.png" alt="实现回调接口" tabindex="0" loading="lazy"><figcaption>实现回调接口</figcaption></figure><h2 id="_4-第四步-支付功能测试" tabindex="-1"><a class="header-anchor" href="#_4-第四步-支付功能测试"><span><a href="#_4-%E7%AC%AC%E5%9B%9B%E6%AD%A5-%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95">#</a> 4. 第四步，支付功能测试</span></a></h2><p>至此，我们已经完成了支付接入的所有步骤，接下来，我们来测试一下支付功能。</p><p>① 打开 [支付管理 -&gt; 接入示例 -&gt; 支付&amp;退款案例] 菜单，进入示例订单列表。点击【发起订单】按钮，选择一个商品，进行下单。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/支付手册/支付宝支付接入/测试-下单.png" alt="下单" tabindex="0" loading="lazy"><figcaption>下单</figcaption></figure><p>此时，在 <code>pay_order</code> 表中，会新增一条支付订单记录。</p><p>② 下单完成后，点击该订单对应的【支付】按钮，跳转到【收银台】。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/支付手册/支付宝支付接入/测试-跳转支付.png" alt="跳转支付" tabindex="0" loading="lazy"><figcaption>跳转支付</figcaption></figure><p>③ 选择【支付宝 PC 网站支付】支付渠道，跳转支付宝支付。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/支付手册/支付宝支付接入/测试-收银台.png" alt="收银台" tabindex="0" loading="lazy"><figcaption>收银台</figcaption></figure><p>友情提示：</p><p>选择完支付【渠道】，会调用后端 PayOrderController 的 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-pay/yudao-module-pay-biz/src/main/java/cn/iocoder/yudao/module/pay/controller/admin/order/PayOrderController.java#L92-L97" target="_blank" rel="noopener noreferrer"><code>#submit(...)</code></a> 方法，内部调用对应支付【渠道】的 PayClient 实现类，发起支付。</p><p>④ 此时，我们会看到一个支付宝的二维码，使用 <a href="https://opendocs.alipay.com/common/02kkv7#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E4%B8%8B%E8%BD%BD%E6%94%AF%E4%BB%98%E5%AE%9D%E5%AE%A2%E6%88%B7%E7%AB%AF" target="_blank" rel="noopener noreferrer"><strong>“沙箱环境”</strong> 的支付宝客户端</a>，扫码完成支付。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/支付手册/支付宝支付接入/测试-支付宝支付.png" alt="支付宝支付" tabindex="0" loading="lazy"><figcaption>支付宝支付</figcaption></figure><p>⑤ 支付完成后，先是支付【中心】的回调接口被回调，然后是 <code>demo</code> 模块的回调接口被回调。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/支付手册/支付宝支付接入/测试-支付回调.png" alt="支付回调" tabindex="0" loading="lazy"><figcaption>支付回调</figcaption></figure><p>至此，我们已经完成支付接入的测试流程，可以试着多多 debug 调试整个流程，并不复杂噢。</p>`,43))])}const h=p(c,[["render",g],["__file","alipay-pay-demo.html.vue"]]),f=JSON.parse('{"path":"/project/rouyi-vue-pro/pay/alipay-pay-demo.html","title":"支付宝支付接入","lang":"en-US","frontmatter":{"title":"支付宝支付接入","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":79,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 0. 概述","slug":"_0-概述","link":"#_0-概述","children":[]},{"level":2,"title":"# 1. 第一步，配置支付渠道","slug":"_1-第一步-配置支付渠道","link":"#_1-第一步-配置支付渠道","children":[]},{"level":2,"title":"# 2. 第二步，实现支付调用【重要】","slug":"_2-第二步-实现支付调用【重要】","link":"#_2-第二步-实现支付调用【重要】","children":[]},{"level":2,"title":"# 3. 第三步，实现回调接口【重要】","slug":"_3-第三步-实现回调接口【重要】","link":"#_3-第三步-实现回调接口【重要】","children":[]},{"level":2,"title":"# 4. 第四步，支付功能测试","slug":"_4-第四步-支付功能测试","link":"#_4-第四步-支付功能测试","children":[]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":6.62,"words":1986},"filePathRelative":"project/rouyi-vue-pro/pay/alipay-pay-demo.md","localizedDate":"July 7, 2024"}');export{h as comp,f as data};
