import{_ as s,o as e,c as n,a as i}from"./app-5QVbWi7Z.js";const r={};function t(l,a){return e(),n("div",null,a[0]||(a[0]=[i(`<h1 id="功能权限" tabindex="-1"><a class="header-anchor" href="#功能权限"><span>功能权限</span></a></h1><h2 id="👍-相关视频教程" tabindex="-1"><a class="header-anchor" href="#👍-相关视频教程"><span><a href="#%F0%9F%91%8D-%E7%9B%B8%E5%85%B3%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B">#</a> 👍 相关视频教程</span></a></h2><p>友情提示：虽然是基于 Boot 项目录制，但是 Cloud 一样可以学习。</p><ul><li><a href="https://t.zsxq.com/07nYzrfyz" target="_blank" rel="noopener noreferrer">功能权限 01：如何设计一套权限系统？</a></li><li><a href="https://t.zsxq.com/07IuNBmAq" target="_blank" rel="noopener noreferrer">功能权限 02：如何实现菜单的创建？</a></li><li><a href="https://t.zsxq.com/07f6AuJuZ" target="_blank" rel="noopener noreferrer">功能权限 03：如何实现角色的创建？</a></li><li><a href="https://t.zsxq.com/07uJqV7Y3" target="_blank" rel="noopener noreferrer">功能权限 04：如何给用户分配权限 —— 将菜单赋予角色？</a></li><li><a href="https://t.zsxq.com/07YBe6QjA" target="_blank" rel="noopener noreferrer">功能权限 05：如何给用户分配权限 —— 将角色赋予用户？</a></li><li><a href="https://t.zsxq.com/072ZVJurz" target="_blank" rel="noopener noreferrer">功能权限 06：后端如何实现 URL 权限的校验？</a></li><li><a href="https://t.zsxq.com/07rnMRRn2" target="_blank" rel="noopener noreferrer">功能权限 07：前端如何实现菜单的动态加载？</a></li><li><a href="https://t.zsxq.com/072JeIUfY" target="_blank" rel="noopener noreferrer">功能权限 08：前端如何实现按钮的权限校验？</a></li></ul><h2 id="_1-rbac-权限模型" tabindex="-1"><a class="header-anchor" href="#_1-rbac-权限模型"><span><a href="#_1-rbac-%E6%9D%83%E9%99%90%E6%A8%A1%E5%9E%8B">#</a> 1. RBAC 权限模型</span></a></h2><p>系统采用 RBAC 权限模型，全称是 Role-Based Access Control 基于角色的访问控制。</p><figure><img src="https://cloud.iocoder.cn/img/功能权限/01.png" alt="权限模型" tabindex="0" loading="lazy"><figcaption>权限模型</figcaption></figure><p>简单来说，每个用户拥有若干角色，每个角色拥有若干个菜单，菜单中存在菜单权限、按钮权限。这样，就形成了 <strong>“用户&lt;-&gt;角色&lt;-&gt;菜单”</strong> 的授权模型。 在这种模型中，用户与角色、角色与菜单之间构成了多对多的关系，如下图：</p><figure><img src="https://cloud.iocoder.cn/img/功能权限/02.png" alt="权限模型" tabindex="0" loading="lazy"><figcaption>权限模型</figcaption></figure><h2 id="_2-token-认证机制" tabindex="-1"><a class="header-anchor" href="#_2-token-认证机制"><span><a href="#_2-token-%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6">#</a> 2. Token 认证机制</span></a></h2><p>安全框架使用的是 <a href="https://www.iocoder.cn/Spring-Boot/Spring-Security/?yudao" target="_blank" rel="noopener noreferrer">Spring Security</a> + Token 方案，整体流程如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/功能权限/03.png" alt="Token 认证机制" tabindex="0" loading="lazy"><figcaption>Token 认证机制</figcaption></figure><p>① 前端调用登录接口，使用账号密码获得到认证 Token。响应示例如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;code&quot;:0,</span></span>
<span class="line"><span>  &quot;msg&quot;:&quot;&quot;,</span></span>
<span class="line"><span>  &quot;data&quot;:{</span></span>
<span class="line"><span>    &quot;token&quot;:&quot;d2a3cdbc6c53470db67a582bd115103f&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>管理后台的登录实现，可见 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/auth/AuthController.java#L56-L63" target="_blank" rel="noopener noreferrer">代码</a></li><li>用户 App 的登录实现，可见 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-member/yudao-module-member-biz/src/main/java/cn/iocoder/yudao/module/member/controller/app/auth/AppAuthController.java#L34-L41" target="_blank" rel="noopener noreferrer">代码</a></li></ul><p>疑问：为什么不使用 Spring Security 内置的表单登录？</p><p>Spring Security 的登录拓展起来不方便，例如说验证码、三方登录等等。</p><p>Token 存储在数据库中，对应 <code>system_oauth2_access_token</code> 访问令牌表的 <code>id</code> 字段。考虑到访问的性能，缓存在 Redis 的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/dal/redis/RedisKeyConstants.java#L21" target="_blank" rel="noopener noreferrer"><code>oauth2_access_token:%s</code></a> 键中。</p><p>疑问：为什么不使用 JWT(JSON Web Token)？</p><p>JWT 是无状态的，无法实现 Token 的作废，例如说用户登出系统、修改密码等等场景。</p><p>推荐阅读 <a href="https://www.iocoder.cn/Fight/Confused-about-cookies-sessions,-Tokens-JWT/?yudao" target="_blank" rel="noopener noreferrer">《还分不清 Cookie、Session、Token、JWT？》</a> 文章。</p><p>默认配置下，Token 有效期为 30 天，可通过 <code>system_oauth2_client</code> 表中 <code>client_id = default</code> 的记录进行自定义：</p><figure><img src="https://cloud.iocoder.cn/img/功能权限/04.png" alt=" 表" tabindex="0" loading="lazy"><figcaption> 表</figcaption></figure><ul><li>修改 <code>access_token_validity_seconds</code> 字段，设置访问令牌的过期时间，默认 1800 秒 = 30 分钟</li><li>修改 <code>refresh_token_validity_seconds</code> 字段，设置刷新令牌的过期时间，默认 2592000 秒 = 30 天</li></ul><p>② 前端调用其它接口，需要在请求头带上 Token 进行访问。请求头格式如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>### Authorization: Bearer 登录时返回的 Token</span></span>
<span class="line"><span>Authorization: Bearer d2a3cdbc6c53470db67a582bd115103f</span></span></code></pre></div><ul><li>具体的代码实现，可见 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-spring-boot-starter-security/src/main/java/cn/iocoder/yudao/framework/security/core/filter/TokenAuthenticationFilter.java" target="_blank" rel="noopener noreferrer">TokenAuthenticationFilter</a> 过滤器</li></ul><p>考虑到使用 Postman、Swagger 调试接口方便，提供了 <strong>Token 的模拟机制</strong>。请求头格式如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>### Authorization: Bearer test用户编号</span></span>
<span class="line"><span>Authorization: Bearer test1</span></span></code></pre></div><p>其中 <code>&quot;test&quot;</code> 可自定义，配置项如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>### application-local.yaml</span></span>
<span class="line"><span></span></span>
<span class="line"><span>yudao:</span></span>
<span class="line"><span>  security:</span></span>
<span class="line"><span>    mock-enable: true # 是否开启 Token 的模拟机制</span></span>
<span class="line"><span>    mock-secret: test # Token 模拟机制的 Token 前缀</span></span></code></pre></div><h2 id="_3-权限注解" tabindex="-1"><a class="header-anchor" href="#_3-权限注解"><span><a href="#_3-%E6%9D%83%E9%99%90%E6%B3%A8%E8%A7%A3">#</a> 3. 权限注解</span></a></h2><h3 id="_3-1-preauthorize-注解" tabindex="-1"><a class="header-anchor" href="#_3-1-preauthorize-注解"><span><a href="#_3-1-preauthorize-%E6%B3%A8%E8%A7%A3">#</a> 3.1 @PreAuthorize 注解</span></a></h3><p><a href="https://github.com/spring-projects/spring-security/blob/main/core/src/main/java/org/springframework/security/access/prepost/PreAuthorize.java" target="_blank" rel="noopener noreferrer"><code>@PreAuthorize</code></a> 是 Spring Security 内置的<strong>前置</strong>权限注解，添加在<strong>接口方法</strong>上，声明需要的权限，实现访问权限的控制。</p><p>① 基于【权限标识】的权限控制</p><p>权限标识，对应 <code>system_menu</code> 表的 <code>permission</code> 字段，推荐格式为 <code>\${系统}:\${模块}:\${操作}</code>，例如说 <code>system:admin:add</code> 标识 system 服务的添加管理员。</p><p>使用示例如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>// 符合 system:user:list 权限要求</span></span>
<span class="line"><span>@PreAuthorize(&quot;@ss.hasPermission(&#39;system:user:list&#39;)&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 符合 system:user:add 或 system:user:edit 权限要求即可</span></span>
<span class="line"><span>@PreAuthorize(&quot;@ss.hasAnyPermissions(&#39;system:user:add,system:user:edit&#39;)&quot;)</span></span></code></pre></div><p>② 基于【角色标识】的权限控制</p><p>权限标识，对应 <code>system_role</code> 表的 <code>code</code> 字段， 例如说 <code>super_admin</code> 超级管理员、<code>tenant_admin</code> 租户管理员。</p><p>使用示例如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>// 属于 user 角色</span></span>
<span class="line"><span>@PreAuthorize(&quot;@ss.hasRole(&#39;user&#39;)&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 属于 user 或者 admin 之一</span></span>
<span class="line"><span>@PreAuthorize(&quot;@ss.hasAnyRoles(&#39;user&#39;, &#39;admin&#39;)&quot;)</span></span></code></pre></div><p>实现原理是什么？</p><p>当 <code>@PreAuthorize</code> 注解里的 Spring EL 表达式返回 <code>false</code> 时，表示没有权限。</p><p>而 <code>@PreAuthorize(&quot;@ss.hasPermission(&#39;system:user:list&#39;)&quot;)</code> 表示调用 Bean 名字为 <code>ss</code> 的 <code>#hasPermission(...)</code> 方法，方法参数为 <code>&quot;system:user:list&quot;</code> 字符串。<code>ss</code> 对应的 Bean 是 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/service/permission/PermissionServiceImpl.java#L43" target="_blank" rel="noopener noreferrer">PermissionServiceImpl</a> 类，所以你只需要去看该方法的<a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/service/permission/PermissionServiceImpl.java#L293-L326" target="_blank" rel="noopener noreferrer">实现代码</a>。</p><h3 id="_3-2-preauthenticated-注解" tabindex="-1"><a class="header-anchor" href="#_3-2-preauthenticated-注解"><span><a href="#_3-2-preauthenticated-%E6%B3%A8%E8%A7%A3">#</a> 3.2 @PreAuthenticated 注解</span></a></h3><p><a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-spring-boot-starter-security/src/main/java/cn/iocoder/yudao/framework/security/core/annotations/PreAuthenticated.java" target="_blank" rel="noopener noreferrer"><code>@PreAuthenticated</code></a> 是项目自定义的<strong>认证</strong>注解，添加在<strong>接口方法</strong>上，声明登录的用户才允许访问。</p><p>主要使用场景是，针对用户 App 的 <code>/app-app/**</code> 的 RESTful API 接口，默认是无需登录的，通过 <code>@PreAuthenticated</code> 声明它需要进行登录。使用示例如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>// AppAuthController.java</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@PostMapping(&quot;/update-password&quot;)</span></span>
<span class="line"><span>@Operation(summary = &quot;修改用户密码&quot;, description = &quot;用户修改密码时使用&quot;)</span></span>
<span class="line"><span>@PreAuthenticated</span></span>
<span class="line"><span>public CommonResult&lt;Boolean&gt; updatePassword(@RequestBody @Valid AppAuthUpdatePasswordReqVO reqVO) {</span></span>
<span class="line"><span>    // ... 省略代码</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>具体的代码实现，可见 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-spring-boot-starter-security/src/main/java/cn/iocoder/yudao/framework/security/core/aop/PreAuthenticatedAspect.java" target="_blank" rel="noopener noreferrer">PreAuthenticatedAspect</a> 类。</p><h2 id="_4-自定义权限配置" tabindex="-1"><a class="header-anchor" href="#_4-自定义权限配置"><span><a href="#_4-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE">#</a> 4. 自定义权限配置</span></a></h2><p>默认配置下，管理后台的 <code>/admin-api/**</code> 所有 API 接口都<strong>必须</strong>登录后才允许访问，用户 App 的 <code>/app-api/**</code> 所有 API 接口<strong>无需</strong>登录就可以访问。</p><p>如下想要自定义权限配置，设置定义 API 接口可以匿名（不登录）进行访问，可以通过下面三种方式：</p><h3 id="_4-1-方式一-自定义-authorizerequestscustomizer-实现" tabindex="-1"><a class="header-anchor" href="#_4-1-方式一-自定义-authorizerequestscustomizer-实现"><span><a href="#_4-1-%E6%96%B9%E5%BC%8F%E4%B8%80-%E8%87%AA%E5%AE%9A%E4%B9%89-authorizerequestscustomizer-%E5%AE%9E%E7%8E%B0">#</a> 4.1 方式一：自定义 AuthorizeRequestsCustomizer 实现</span></a></h3><p>每个 Maven Module 可以实现自定义的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-spring-boot-starter-security/src/main/java/cn/iocoder/yudao/framework/security/config/YudaoWebSecurityConfigurerAdapter.java" target="_blank" rel="noopener noreferrer">AuthorizeRequestsCustomizer</a> Bean，额外定义每个 Module 的 API 接口的访问规则。例如说 <code>yudao-module-infra</code> 模块的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-infra/yudao-module-infra-biz/src/main/java/cn/iocoder/yudao/module/infra/framework/security/config/SecurityConfiguration.java" target="_blank" rel="noopener noreferrer">SecurityConfiguration</a> 类，代码如下：</p><p>① JDK 8 + Spring Boot 2.X 版本：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>@Configuration(&quot;infraSecurityConfiguration&quot;)</span></span>
<span class="line"><span>public class SecurityConfiguration {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Value(&quot;\${spring.boot.admin.context-path:&#39;&#39;}&quot;)</span></span>
<span class="line"><span>    private String adminSeverContextPath;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Bean(&quot;infraAuthorizeRequestsCustomizer&quot;)</span></span>
<span class="line"><span>    public AuthorizeRequestsCustomizer authorizeRequestsCustomizer() {</span></span>
<span class="line"><span>        return new AuthorizeRequestsCustomizer() {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            @Override</span></span>
<span class="line"><span>            public void customize(ExpressionUrlAuthorizationConfigurer&lt;HttpSecurity&gt;.ExpressionInterceptUrlRegistry registry) {</span></span>
<span class="line"><span>                // Swagger 接口文档</span></span>
<span class="line"><span>                registry.antMatchers(&quot;/swagger-ui.html&quot;).anonymous()</span></span>
<span class="line"><span>                        .antMatchers(&quot;/swagger-resources/**&quot;).anonymous()</span></span>
<span class="line"><span>                        .antMatchers(&quot;/webjars/**&quot;).anonymous()</span></span>
<span class="line"><span>                        .antMatchers(&quot;/*/api-docs&quot;).anonymous();</span></span>
<span class="line"><span>                // Spring Boot Actuator 的安全配置</span></span>
<span class="line"><span>                registry.antMatchers(&quot;/actuator&quot;).anonymous()</span></span>
<span class="line"><span>                        .antMatchers(&quot;/actuator/**&quot;).anonymous();</span></span>
<span class="line"><span>                // Druid 监控</span></span>
<span class="line"><span>                registry.antMatchers(&quot;/druid/**&quot;).anonymous();</span></span>
<span class="line"><span>                // Spring Boot Admin Server 的安全配置</span></span>
<span class="line"><span>                registry.antMatchers(adminSeverContextPath).anonymous()</span></span>
<span class="line"><span>                        .antMatchers(adminSeverContextPath + &quot;/**&quot;).anonymous();</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        };</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② JDK 21 + Spring Boot 3.X 版本：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>@Configuration(proxyBeanMethods = false, value = &quot;infraSecurityConfiguration&quot;)</span></span>
<span class="line"><span>public class SecurityConfiguration {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Value(&quot;\${spring.boot.admin.context-path:&#39;&#39;}&quot;)</span></span>
<span class="line"><span>    private String adminSeverContextPath;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Bean(&quot;infraAuthorizeRequestsCustomizer&quot;)</span></span>
<span class="line"><span>    public AuthorizeRequestsCustomizer authorizeRequestsCustomizer() {</span></span>
<span class="line"><span>        return new AuthorizeRequestsCustomizer() {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            @Override</span></span>
<span class="line"><span>            public void customize(AuthorizeHttpRequestsConfigurer&lt;HttpSecurity&gt;.AuthorizationManagerRequestMatcherRegistry registry) {</span></span>
<span class="line"><span>                // Swagger 接口文档</span></span>
<span class="line"><span>                registry.requestMatchers(&quot;/v3/api-docs/**&quot;).permitAll()</span></span>
<span class="line"><span>                        .requestMatchers(&quot;/swagger-ui.html&quot;).permitAll()</span></span>
<span class="line"><span>                        .requestMatchers(&quot;/swagger-ui/**&quot;).permitAll()</span></span>
<span class="line"><span>                        .requestMatchers(&quot;/swagger-resources/**&quot;).permitAll()</span></span>
<span class="line"><span>                        .requestMatchers(&quot;/webjars/**&quot;).permitAll()</span></span>
<span class="line"><span>                        .requestMatchers(&quot;/*/api-docs&quot;).permitAll();</span></span>
<span class="line"><span>                // Spring Boot Actuator 的安全配置</span></span>
<span class="line"><span>                registry.requestMatchers(&quot;/actuator&quot;).permitAll()</span></span>
<span class="line"><span>                        .requestMatchers(&quot;/actuator/**&quot;).permitAll();</span></span>
<span class="line"><span>                // Druid 监控</span></span>
<span class="line"><span>                registry.requestMatchers(&quot;/druid/**&quot;).permitAll();</span></span>
<span class="line"><span>                // Spring Boot Admin Server 的安全配置</span></span>
<span class="line"><span>                registry.requestMatchers(adminSeverContextPath).permitAll()</span></span>
<span class="line"><span>                        .requestMatchers(adminSeverContextPath + &quot;/**&quot;).permitAll();</span></span>
<span class="line"><span>                // 文件读取</span></span>
<span class="line"><span>                registry.requestMatchers(buildAdminApi(&quot;/infra/file/*/get/**&quot;)).permitAll();</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        };</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>友情提示</p><ul><li><code>permitAll()</code> 方法：所有用户可以任意访问，包括带上 Token 访问</li><li><code>anonymous()</code> 方法：匿名用户可以任意访问，带上 Token 访问会报错</li></ul><p>如果你对 Spring Security 了解不多，可以阅读艿艿写的 <a href="https://www.iocoder.cn/Spring-Boot/Spring-Security/?yudao" target="_blank" rel="noopener noreferrer">《芋道 Spring Boot 安全框架 Spring Security 入门 》</a> 文章。</p><h3 id="_4-2-方式二-permitall-注解" tabindex="-1"><a class="header-anchor" href="#_4-2-方式二-permitall-注解"><span><a href="#_4-2-%E6%96%B9%E5%BC%8F%E4%BA%8C-permitall-%E6%B3%A8%E8%A7%A3">#</a> 4.2 方式二：<code>@PermitAll</code> 注解</span></a></h3><p>在 API 接口上添加 <a href="https://javaee.github.io/javaee-spec/javadocs/javax/annotation/security/PermitAll.html" target="_blank" rel="noopener noreferrer"><code>@PermitAll</code></a> 注解，示例如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>// FileController.java</span></span>
<span class="line"><span>@GetMapping(&quot;/{configId}/get/{path}&quot;)</span></span>
<span class="line"><span>@PermitAll</span></span>
<span class="line"><span>public void getFileContent(HttpServletResponse response,</span></span>
<span class="line"><span>                           @PathVariable(&quot;configId&quot;) Long configId,</span></span>
<span class="line"><span>                           @PathVariable(&quot;path&quot;) String path) throws Exception {</span></span>
<span class="line"><span>    // ...</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="_4-3-方式三-yudao-security-permit-all-urls-配置项" tabindex="-1"><a class="header-anchor" href="#_4-3-方式三-yudao-security-permit-all-urls-配置项"><span><a href="#_4-3-%E6%96%B9%E5%BC%8F%E4%B8%89-yudao-security-permit-all-urls-%E9%85%8D%E7%BD%AE%E9%A1%B9">#</a> 4.3 方式三：<code>yudao.security.permit-all-urls</code> 配置项</span></a></h3><p>在 <code>application.yaml</code> 配置文件，通过 <code>yudao.security.permit-all-urls</code> 配置项设置，示例如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>yudao:</span></span>
<span class="line"><span>  security:</span></span>
<span class="line"><span>    permit-all-urls:</span></span>
<span class="line"><span>      - /admin-ui/** # /resources/admin-ui 目录下的静态资源</span></span>
<span class="line"><span>      - /admin-api/xxx/yyy</span></span></code></pre></div>`,68)]))}const p=s(r,[["render",t],["__file","resource-permission.html.vue"]]),c=JSON.parse('{"path":"/project/yudao-cloud/resource-permission.html","title":"功能权限","lang":"en-US","frontmatter":{"title":"功能权限","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":22,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 👍 相关视频教程","slug":"👍-相关视频教程","link":"#👍-相关视频教程","children":[]},{"level":2,"title":"# 1. RBAC 权限模型","slug":"_1-rbac-权限模型","link":"#_1-rbac-权限模型","children":[]},{"level":2,"title":"# 2. Token 认证机制","slug":"_2-token-认证机制","link":"#_2-token-认证机制","children":[]},{"level":2,"title":"# 3. 权限注解","slug":"_3-权限注解","link":"#_3-权限注解","children":[{"level":3,"title":"# 3.1 @PreAuthorize 注解","slug":"_3-1-preauthorize-注解","link":"#_3-1-preauthorize-注解","children":[]},{"level":3,"title":"# 3.2 @PreAuthenticated 注解","slug":"_3-2-preauthenticated-注解","link":"#_3-2-preauthenticated-注解","children":[]}]},{"level":2,"title":"# 4. 自定义权限配置","slug":"_4-自定义权限配置","link":"#_4-自定义权限配置","children":[{"level":3,"title":"# 4.1 方式一：自定义 AuthorizeRequestsCustomizer 实现","slug":"_4-1-方式一-自定义-authorizerequestscustomizer-实现","link":"#_4-1-方式一-自定义-authorizerequestscustomizer-实现","children":[]},{"level":3,"title":"# 4.2 方式二：@PermitAll 注解","slug":"_4-2-方式二-permitall-注解","link":"#_4-2-方式二-permitall-注解","children":[]},{"level":3,"title":"# 4.3 方式三：yudao.security.permit-all-urls 配置项","slug":"_4-3-方式三-yudao-security-permit-all-urls-配置项","link":"#_4-3-方式三-yudao-security-permit-all-urls-配置项","children":[]}]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":6.52,"words":1956},"filePathRelative":"project/yudao-cloud/resource-permission.md","localizedDate":"July 7, 2024"}');export{p as comp,c as data};
