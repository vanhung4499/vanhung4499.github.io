import{_ as a,o as e,c as n,a as s}from"./app-BRTHG7K9.js";const i={},d=s('<h1 id="ai-聊天对话" tabindex="-1"><a class="header-anchor" href="#ai-聊天对话"><span>AI 聊天对话</span></a></h1><p>AI 对话，基于 LLM 大模型，实现智能聊天的功能。</p><p>说白了，就是和机器人聊天。高级点，就是智能问答！</p><figure><img src="https://doc.iocoder.cn/img/AI手册/AI对话/对话.png" alt="AI 聊天" tabindex="0" loading="lazy"><figcaption>AI 聊天</figcaption></figure><p>整个功能，涉及到 5 个表（上图可以看到 4 个）：</p><ul><li>【配置】<code>ai_api_key</code>：API 秘钥表</li><li>【配置】<code>ai_chat_model</code>：聊天模型表</li><li>【配置】<code>ai_chat_role</code>：聊天角色表</li><li>【对话】<code>ai_chat_conversation</code>：聊天对话表</li><li>【对话】<code>ai_chat_message</code>：聊天消息表</li></ul><p>下面，我们逐个表进行介绍，这个过程中也会讲讲对应的功能。</p><blockquote><p>省略 creator/create_time/updater/update_time/deleted/tenant_id 等通用字段</p></blockquote><h2 id="_1-api-秘钥表" tabindex="-1"><a class="header-anchor" href="#_1-api-秘钥表"><span><a href="#_1-api-%E7%A7%98%E9%92%A5%E8%A1%A8">#</a> 1. API 秘钥表</span></a></h2><p>API 秘钥表，顾名思义，就是存储 AI 大模型的 API 密钥的表。</p><h3 id="_1-1-表结构" tabindex="-1"><a class="header-anchor" href="#_1-1-表结构"><span><a href="#_1-1-%E8%A1%A8%E7%BB%93%E6%9E%84">#</a> 1.1 表结构</span></a></h3><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>CREATE TABLE `ai_api_key` (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;编号&#39;,</span></span>\n<span class="line"><span>  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;名称&#39;,</span></span>\n<span class="line"><span>  `platform` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;平台&#39;,</span></span>\n<span class="line"><span>  `api_key` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;密钥&#39;,</span></span>\n<span class="line"><span>  `url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &#39;自定义 API 地址&#39;,</span></span>\n<span class="line"><span>  `status` int NOT NULL COMMENT &#39;状态&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`)</span></span>\n<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&#39;AI API 密钥表&#39;;</span></span></code></pre></div><p>① <code>platform</code> 字段：表示平台，对应 AiPlatformEnum 枚举，目前支持多个 AI 大模型：</p><ul><li>国内：【百度】文心一言、【阿里】通义千问、【讯飞】星火</li><li>国外：【OpenAI】GPT、【Meta】Llama、【Google】Gemini</li></ul><p>② <code>api_key</code> 字段：表示 API 密钥，对应不同的平台的密钥，例如说 OpenAI 的 API KEY。但是要注意，有些平台是多个值，例如说文心一言是 <code>appKey</code> + <code>secretKey</code> 组合，那它在 <code>api_key</code> 就是 <code>${appKey}|${secretKey}</code>。</p><p><code>url</code> 字段：表示自定义 API 地址。一般情况下不需要配置，除非你有自定义的需求，例如说 OpenAI 使用 API 中转。</p><p>具体它们怎么配置，或者怎么部署，可见对应的文档：</p><ul><li>国内模型：<a href="/ai/tongyi">《通义千问》</a>、<a href="/ai/yiyan">《文心一言》</a>、<a href="/ai/xinghuo">《讯飞星火》</a>、<a href="/ai/glm">《智谱 GLM》</a>、<a href="/ai/deep-seek">《DeepSeek》</a></li><li>国外模型：<a href="/ai/openai">《OpenAI（ChatGPT）》</a>、<a href="/ai/llama">《LLAMA》</a>、<a href="/ai/yiyan">《谷歌 Gemini》</a>、<a href="/ai/stable-diffusion">《Stable Diffusion》</a></li></ul><h3 id="_1-2-管理后台" tabindex="-1"><a class="header-anchor" href="#_1-2-管理后台"><span><a href="#_1-2-%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0">#</a> 1.2 管理后台</span></a></h3><p>前端对应 [AI 大模型 -&gt; 控制台 -&gt; API 密钥] 菜单，对应 <code>yudao-ui-admin-vue3</code> 项目的 <code>@/views/ai/model/apiKey</code> 目录。</p><figure><img src="https://doc.iocoder.cn/img/AI手册/AI对话/API密钥.png" alt="API 密钥" tabindex="0" loading="lazy"><figcaption>API 密钥</figcaption></figure><p>它的后端 HTTP 接口，由 <code>yudao-module-ai</code> 模块的 <code>model</code> 包的 AiApiKeyController 实现。</p><h2 id="_2-聊天模型表" tabindex="-1"><a class="header-anchor" href="#_2-聊天模型表"><span><a href="#_2-%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B%E8%A1%A8">#</a> 2. 聊天模型表</span></a></h2><p>聊天模型表，配置每个平台下有哪些可用的模型。</p><h3 id="_2-1-表结构" tabindex="-1"><a class="header-anchor" href="#_2-1-表结构"><span><a href="#_2-1-%E8%A1%A8%E7%BB%93%E6%9E%84">#</a> 2.1 表结构</span></a></h3><div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>CREATE TABLE `ai_chat_model` (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;编号&#39;,</span></span>\n<span class="line"><span>  `name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;模型名字&#39;,</span></span>\n<span class="line"><span>  `sort` int NOT NULL COMMENT &#39;排序&#39;,</span></span>\n<span class="line"><span>  `status` tinyint NOT NULL COMMENT &#39;状态&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `key_id` bigint NOT NULL COMMENT &#39;API 秘钥编号&#39;,</span></span>\n<span class="line"><span>  `platform` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;模型平台&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `model` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;模型标识&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `temperature` double DEFAULT NULL COMMENT &#39;温度参数&#39;,</span></span>\n<span class="line"><span>  `max_tokens` int DEFAULT NULL COMMENT &#39;单条回复的最大 Token 数量&#39;,</span></span>\n<span class="line"><span>  `max_contexts` int DEFAULT NULL COMMENT &#39;上下文的最大 Message 数量&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`)</span></span>\n<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&#39;AI 聊天模型表&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>① <code>key_id</code> 字段：表示 API 秘钥编号，对应 <code>ai_api_key</code> 表的 <code>id</code> 字段。</p><p><code>platform</code> 字段：表示模型平台，冗余 <code>ai_api_key</code> 表的 <code>platform</code> 字段。</p><p>② <code>model</code> 字段：表示模型标识，对应不同的平台的模型标识，例如说 OpenAI 的 <code>gpt-3.5-turbo</code>、<code>gpt-4-turbo</code>，通义千问的 <code>qwen-plus</code>、<code>qwen-max</code> 等等。</p><p>③ <code>temperature</code> 字段：表示温度参数，对应不同的平台的温度参数，例如说 OpenAI 的 <code>temperature</code>。</p><p><code>max_tokens</code> 字段：表示单条回复的最大 Token 数量，对应不同的平台的最大 Token 数量，例如说 OpenAI 的 <code>gpt-3.5-turbo</code> 为 4096，<code>gpt-4</code> 为 8192。</p><p><code>max_contexts</code> 字段：表示上下文的最大 Message 数量。因为模型的上下文是有上限的，所以和模型对话时，不会把历史的所有消息都发送过去，而是选择最近的 <code>max_contexts</code> 组消息。会有一些难理解，具体可以看看 AiChatMessageServiceImpl 的 <code>#filterContextMessages(...)</code> 方法。</p><p>疑问：为什么 ai_api_key 和 ai_chat_model 表是分开的？</p><p>一个平台有多个模型，它们会共用一个 API 密钥，所以是分开的，方便管理。</p><h3 id="_2-2-管理后台" tabindex="-1"><a class="header-anchor" href="#_2-2-管理后台"><span><a href="#_2-2-%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0">#</a> 2.2 管理后台</span></a></h3><p>前端对应 [AI 大模型 -&gt; 控制台 -&gt; 聊天模型] 菜单，对应 <code>yudao-ui-admin-vue3</code> 项目的 <code>@/views/ai/model/chatModel</code> 目录。</p><figure><img src="https://doc.iocoder.cn/img/AI手册/AI对话/聊天模型.png" alt="聊天模型" tabindex="0" loading="lazy"><figcaption>聊天模型</figcaption></figure><p>它的后端 HTTP 接口，由 <code>yudao-module-ai</code> 模块的 <code>model</code> 包的 AiChatModelController 实现。</p><h2 id="_3-聊天角色表" tabindex="-1"><a class="header-anchor" href="#_3-聊天角色表"><span><a href="#_3-%E8%81%8A%E5%A4%A9%E8%A7%92%E8%89%B2%E8%A1%A8">#</a> 3. 聊天角色表</span></a></h2><p>聊天角色表，配置机器人扮演怎么样的角色，例如说：通用 AI 助手、Python 专家、客服小姐姐等等。</p><h3 id="_3-1-表结构" tabindex="-1"><a class="header-anchor" href="#_3-1-表结构"><span><a href="#_3-1-%E8%A1%A8%E7%BB%93%E6%9E%84">#</a> 3.1 表结构</span></a></h3><div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>CREATE TABLE `ai_chat_role` (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;角色编号&#39;,</span></span>\n<span class="line"><span>  `name` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;角色名称&#39;,</span></span>\n<span class="line"><span>  `avatar` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;头像&#39;,</span></span>\n<span class="line"><span>  `description` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;角色描述&#39;,</span></span>\n<span class="line"><span>  `status` tinyint DEFAULT NULL COMMENT &#39;状态&#39;,</span></span>\n<span class="line"><span>  `sort` int NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;角色排序&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `user_id` bigint DEFAULT NULL COMMENT &#39;用户编号&#39;,</span></span>\n<span class="line"><span>  `public_status` bit(1) NOT NULL COMMENT &#39;是否公开&#39;,</span></span>\n<span class="line"><span>  `category` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &#39;角色类别&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `model_id` bigint DEFAULT NULL COMMENT &#39;模型编号&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `system_message` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &#39;角色上下文&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`)</span></span>\n<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&#39;AI 聊天角色表&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>① <code>user_id</code> 字段：对应 <code>system_users</code> 表的 <code>id</code> 字段，表示哪个用户创建的角色。</p><p><code>public_status</code> 字段：表示是否公开。如果是公开，那么其他用户也可以使用这个角色，一般由管理员创建。如果是私有，那么只有创建者 <code>user_id</code> 可以使用。</p><p><code>category</code> 字段：公开角色的所属类别，例如说：助手、编程开发、娱乐等等。</p><p>② <code>model_id</code> 字段：表示角色绑定的默认模型，对应 <code>ai_chat_model</code> 表的 <code>id</code> 字段。当然，也可以不绑定，此时使用 <code>ai_chat_model</code> 排序 <code>sort</code> 最小的模型。</p><p>③ <code>system_message</code> 字段：表示角色上下文，或者说角色设定。例如说 “Python 专家” 对应如下</p><blockquote><p>“<br> 我希望你能作为一名 python 专家。</p><p>我将向你提供有关我的技术问题的所有信息，而你的角色是解决我的问题。</p><p>你应该用你的计算机科学、网络基础设施和 IT 安全知识来解决我的问题。在你的回答中，使用聪明的、简单的、为各种层次的人所理解的语言会有帮助。</p><p>逐步解释你的解决方案并使用要点是很有帮助的。尽量避免过多的技术细节，但在必要时使用它们。我希望你用解决方案来回答，而不是写任何解释。</p><p>”</p></blockquote><h3 id="_3-2-管理后台" tabindex="-1"><a class="header-anchor" href="#_3-2-管理后台"><span><a href="#_3-2-%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0">#</a> 3.2 管理后台</span></a></h3><p>① 前端对应 [AI 大模型 -&gt; 控制台 -&gt; 聊天角色] 菜单，对应 <code>yudao-ui-admin-vue3</code> 项目的 <code>@/views/ai/model/chatRole</code> 目录，提供给管理员使用，创建公开角色。</p><figure><img src="https://doc.iocoder.cn/img/AI手册/AI对话/聊天角色.png" alt="聊天角色" tabindex="0" loading="lazy"><figcaption>聊天角色</figcaption></figure><p>它的后端 HTTP 接口，由 <code>yudao-module-ai</code> 模块的 <code>model</code> 包的 AiChatRoleController 实现。</p><p>② 前端聊天界面的【角色仓库】，对应 <code>yudao-ui-admin-vue3</code> 项目的 TODO 目录，提供给用户使用，创建私有角色。</p><figure><img src="https://doc.iocoder.cn/img/AI手册/AI对话/角色仓库.png" alt="角色仓库" tabindex="0" loading="lazy"><figcaption>角色仓库</figcaption></figure><ul><li>可以点击【使用】按钮，使用对应的角色创建对话</li><li>也可以点击【公共角色】标签，按分类查看公开角色列表，也支持【使用】按钮</li></ul><h2 id="_4-聊天对话" tabindex="-1"><a class="header-anchor" href="#_4-聊天对话"><span><a href="#_4-%E8%81%8A%E5%A4%A9%E5%AF%B9%E8%AF%9D">#</a> 4. 聊天对话</span></a></h2><p>聊天对话，一共有 2 个表，分别是 <code>ai_chat_conversation</code> 和 <code>ai_chat_message</code>。前者是对话的基本信息，后者是对话的消息列表。</p><h3 id="_4-1-表结构【聊天对话表】" tabindex="-1"><a class="header-anchor" href="#_4-1-表结构【聊天对话表】"><span><a href="#_4-1-%E8%A1%A8%E7%BB%93%E6%9E%84%E3%80%90%E8%81%8A%E5%A4%A9%E5%AF%B9%E8%AF%9D%E8%A1%A8%E3%80%91">#</a> 4.1 表结构【聊天对话表】</span></a></h3><div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>CREATE TABLE `ai_chat_conversation` (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;对话编号&#39;,</span></span>\n<span class="line"><span>  `title` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;对话标题&#39;,</span></span>\n<span class="line"><span>  `pinned` bit(1) NOT NULL COMMENT &#39;是否置顶&#39;,</span></span>\n<span class="line"><span>  `pinned_time` datetime DEFAULT NULL COMMENT &#39;置顶时间&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `user_id` bigint NOT NULL COMMENT &#39;用户编号&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `role_id` bigint DEFAULT NULL COMMENT &#39;聊天角色&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `model_id` bigint NOT NULL COMMENT &#39;模型编号&#39;,</span></span>\n<span class="line"><span>  `model` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;模型标识&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `system_message` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &#39;角色设定&#39;,</span></span>\n<span class="line"><span>  `temperature` double NOT NULL COMMENT &#39;温度参数&#39;,</span></span>\n<span class="line"><span>  `max_tokens` int NOT NULL COMMENT &#39;单条回复的最大 Token 数量&#39;,</span></span>\n<span class="line"><span>  `max_contexts` int NOT NULL COMMENT &#39;上下文的最大 Message 数量&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`)</span></span>\n<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=1781604279872581716 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&#39;AI 聊天对话表&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>① <code>user_id</code> 字段：对应 <code>system_users</code> 表的 <code>id</code> 字段，表示哪个用户创建的对话。</p><p>② <code>role_id</code> 字段：表示对话使用的角色，对应 <code>ai_chat_role</code> 表的 <code>id</code> 字段。如果没有使用角色，则为空，此时是点击聊天界面的【新建对话】产生的。</p><p>③ <code>model_id</code> 字段：表示对话使用的模型，对应 <code>ai_chat_model</code> 表的 <code>id</code> 字段。每个对话可以随时切换它所使用的模型。</p><p><code>model</code> 字段：表示模型标识，冗余 <code>ai_chat_model</code> 表的 <code>model</code> 字段。</p><figure><img src="https://doc.iocoder.cn/img/AI手册/AI对话/对话-修改模型.png" alt="修改模型" tabindex="0" loading="lazy"><figcaption>修改模型</figcaption></figure><p><code>system_message</code>、<code>temperature</code>、<code>max_tokens</code>、<code>max_contexts</code> 字段：就是对话的配置，上图也已经看到。</p><h3 id="_4-2-表结构【聊天消息表】" tabindex="-1"><a class="header-anchor" href="#_4-2-表结构【聊天消息表】"><span><a href="#_4-2-%E8%A1%A8%E7%BB%93%E6%9E%84%E3%80%90%E8%81%8A%E5%A4%A9%E6%B6%88%E6%81%AF%E8%A1%A8%E3%80%91">#</a> 4.2 表结构【聊天消息表】</span></a></h3><div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>CREATE TABLE `ai_chat_message` (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;消息编号&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `conversation_id` bigint NOT NULL COMMENT &#39;对话编号&#39;,</span></span>\n<span class="line"><span>  `user_id` bigint NOT NULL COMMENT &#39;用户编号&#39;,</span></span>\n<span class="line"><span>  `role_id` bigint DEFAULT NULL COMMENT &#39;角色编号&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `model` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;模型标识&#39;,</span></span>\n<span class="line"><span>  `model_id` bigint NOT NULL COMMENT &#39;模型编号&#39;,  </span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `type` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;消息类型&#39;,  </span></span>\n<span class="line"><span>  `reply_id` bigint DEFAULT NULL COMMENT &#39;回复编号&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `content` varchar(2048) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;消息内容&#39;,</span></span>\n<span class="line"><span>  `use_context` bit(1) NOT NULL DEFAULT b&#39;0&#39; COMMENT &#39;是否携带上下文&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`) USING BTREE</span></span>\n<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=2147 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&#39;AI 聊天消息表&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>① <code>conversation_id</code>、<code>user_id</code>、<code>role_id</code> 字段：关联到 <code>ai_chat_conversation</code> 表的相关字段。</p><p>② <code>model</code>、<code>model_id</code> 字段：该消息所使用的模型。因为对话可以随时切换模型，所以消息也需要记录。</p><p>③ <code>type</code> 字段：消息类型，对应 Spring AI 提供的 MessageType 枚举类，目前表里有 <code>user</code> 用户发送、<code>assistant</code> 模型回复。</p><p><code>reply_id</code> 字段：表示回复的消息编号。用户每次发送消息，会记录一条 <code>user</code> 类型的消息，然后模型回复的消息，会记录一条 <code>assistant</code> 类型的消息，这两条消息通过 <code>reply_id</code> 对应的。</p><p>④ <code>content</code> 字段：消息内容，对应用户发送的消息或者模型回复的消息。</p><p>⑤ <code>use_context</code> 字段：表示是否携带上下文。如果为 <code>true</code> 时，表示这条消息会携带上下文，此时调用模型时，会带该会话的最后 <code>max_contexts</code> 组消息。</p><p>注意，它是在消息发送框的左下角的蓝色 switch 【上下文】小按钮噢！</p><h3 id="_4-3-管理后台" tabindex="-1"><a class="header-anchor" href="#_4-3-管理后台"><span><a href="#_4-3-%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0">#</a> 4.3 管理后台</span></a></h3><p>① 前端对应 [AI 大模型 -&gt; AI 对话] 菜单，对应 <code>yudao-ui-admin-vue3</code> 项目的 <code>@/views/ai/chat</code> TODO 目录。上面已经有很多图了，就不重复截图了！</p><p>它的后端 HTTP 接口，由 <code>yudao-module-ai</code> 模块的 <code>chat</code> 包的 AiChatConversationController、AiChatMessageController 实现。</p><p>最最最关键的代码！！！大家可以重点看看！！！</p><p>AiChatMessageController 提供的 <code>#sendChatMessageStream(...)</code> 流式消息接口。</p><p>它的内部，调用 Spring AI 的 StreamingChatClient 来实现大模型的调用。</p><p>② 前端对应 [AI 大模型 -&gt; 控制台 -&gt; 聊天管理] 菜单，对应 <code>yudao-ui-admin-vue3</code> 项目的 <code>@/views/ai/chat/manager</code> 目录，提供给管理员使用，查看对话列表、消息列表。</p><figure><img src="https://doc.iocoder.cn/img/AI手册/AI对话/聊天管理.png" alt="聊天管理" tabindex="0" loading="lazy"><figcaption>聊天管理</figcaption></figure>',82),c=[d];function l(p,o){return e(),n("div",null,c)}const r=a(i,[["render",l],["__file","chat.html.vue"]]),u=JSON.parse('{"path":"/project/rouyi-vue-pro/ai/chat.html","title":"AI 聊天对话","lang":"en-US","frontmatter":{"title":"AI 聊天对话","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":130,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. API 秘钥表","slug":"_1-api-秘钥表","link":"#_1-api-秘钥表","children":[{"level":3,"title":"# 1.1 表结构","slug":"_1-1-表结构","link":"#_1-1-表结构","children":[]},{"level":3,"title":"# 1.2 管理后台","slug":"_1-2-管理后台","link":"#_1-2-管理后台","children":[]}]},{"level":2,"title":"# 2. 聊天模型表","slug":"_2-聊天模型表","link":"#_2-聊天模型表","children":[{"level":3,"title":"# 2.1 表结构","slug":"_2-1-表结构","link":"#_2-1-表结构","children":[]},{"level":3,"title":"# 2.2 管理后台","slug":"_2-2-管理后台","link":"#_2-2-管理后台","children":[]}]},{"level":2,"title":"# 3. 聊天角色表","slug":"_3-聊天角色表","link":"#_3-聊天角色表","children":[{"level":3,"title":"# 3.1 表结构","slug":"_3-1-表结构","link":"#_3-1-表结构","children":[]},{"level":3,"title":"# 3.2 管理后台","slug":"_3-2-管理后台","link":"#_3-2-管理后台","children":[]}]},{"level":2,"title":"# 4. 聊天对话","slug":"_4-聊天对话","link":"#_4-聊天对话","children":[{"level":3,"title":"# 4.1 表结构【聊天对话表】","slug":"_4-1-表结构【聊天对话表】","link":"#_4-1-表结构【聊天对话表】","children":[]},{"level":3,"title":"# 4.2 表结构【聊天消息表】","slug":"_4-2-表结构【聊天消息表】","link":"#_4-2-表结构【聊天消息表】","children":[]},{"level":3,"title":"# 4.3 管理后台","slug":"_4-3-管理后台","link":"#_4-3-管理后台","children":[]}]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":9.68,"words":2904},"filePathRelative":"project/rouyi-vue-pro/ai/chat.md","localizedDate":"July 7, 2024"}');export{r as comp,u as data};
