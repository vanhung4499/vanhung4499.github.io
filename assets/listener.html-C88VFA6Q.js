import{_ as a,o as i,c as n,a as o}from"./app-5QVbWi7Z.js";const s={};function r(t,e){return i(),n("div",null,e[0]||(e[0]=[o('<h1 id="执行监听器、任务监听器" tabindex="-1"><a class="header-anchor" href="#执行监听器、任务监听器"><span>执行监听器、任务监听器</span></a></h1><p>友情提示：</p><p>在 BPMN 设计流程图，配置完监听器后，一定要发布流程，否则监听器不会生效。</p><h2 id="_1-执行监听器" tabindex="-1"><a class="header-anchor" href="#_1-执行监听器"><span><a href="#_1-%E6%89%A7%E8%A1%8C%E7%9B%91%E5%90%AC%E5%99%A8">#</a> 1. 执行监听器</span></a></h2><p>执行监听器（execution listener），可以在流程执行中发生特定的事件时，执行外部 Java 代码或计算表达式。可以被捕获的事件有：</p><ul><li>流程实例的启动和结束</li><li>流程执行转移</li><li>活动的启动和结束</li><li>网关的启动和结束</li><li>中间事件的启动和结束</li><li>启动事件的结束，和结束事件的启动</li></ul><p>总结来说，可以监听的事件只有 start 开始、end 结束。</p><p>学习文档：</p><ul><li><a href="https://tkjohn.github.io/flowable-userguide/#executionListeners" target="_blank" rel="noopener noreferrer">《Flowable BPMN 用户手册 (v 6.3.0) —— 执行监听器》</a></li><li><a href="https://developer.aliyun.com/article/1233153" target="_blank" rel="noopener noreferrer">《Flowable 服务任务执行的三种方式》</a></li><li><a href="https://blog.csdn.net/CCCout/article/details/132454867" target="_blank" rel="noopener noreferrer">《Flowable 服务任务类，表达式，委托表达式（代理表达式）》</a><br> 我们可以在 BPMN 设计流程图时，给某个节点添加执行监听器，监听器可以是 Java 类、表达式、委托表达式。如下图所示：</li></ul><figure><img src="https://cloud.iocoder.cn/img/工作流手册/监听器/执行监听器的配置.png" alt="执行监听器" tabindex="0" loading="lazy"><figcaption>执行监听器</figcaption></figure><p>这三种监听器怎么使用呢？我们逐个来看看。</p><h3 id="_1-1-java-类监听器" tabindex="-1"><a class="header-anchor" href="#_1-1-java-类监听器"><span><a href="#_1-1-java-%E7%B1%BB%E7%9B%91%E5%90%AC%E5%99%A8">#</a> 1.1 Java 类监听器</span></a></h3><p>① 新建一个 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-bpm/yudao-module-bpm-biz/src/main/java/cn/iocoder/yudao/module/bpm/framework/flowable/core/listener/demo/exection/DemoDelegateClassExecutionListener.java" target="_blank" rel="noopener noreferrer">DemoDelegateClassExecutionListener</a> 类，需要实现 <code>org.flowable.engine.delegate.JavaDelegate</code> 接口，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/监听器/DemoDelegateClassExecutionListener.png" alt="DemoDelegateClassExecutionListener" tabindex="0" loading="lazy"><figcaption>DemoDelegateClassExecutionListener</figcaption></figure><p>② 在 BPMN 流程图中，配置 Java 类监听器，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/监听器/DemoDelegateClassExecutionListenerConfig.png" alt="配置监听器" tabindex="0" loading="lazy"><figcaption>配置监听器</figcaption></figure><p>注意，图中填写的是 <code>cn.iocoder.yudao.module.bpm.framework.flowable.core.listener.demo.exection.DemoDelegateClassExecutionListener</code> 全路径。</p><h3 id="_1-2-委托表达式监听器" tabindex="-1"><a class="header-anchor" href="#_1-2-委托表达式监听器"><span><a href="#_1-2-%E5%A7%94%E6%89%98%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9B%91%E5%90%AC%E5%99%A8">#</a> 1.2 委托表达式监听器</span></a></h3><p>① 新建一个 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-bpm/yudao-module-bpm-biz/src/main/java/cn/iocoder/yudao/module/bpm/framework/flowable/core/listener/demo/exection/DemoDelegateExpressionExecutionListener.java" target="_blank" rel="noopener noreferrer">DemoDelegateExpressionExecutionListener</a> 类，也需要实现 <code>org.flowable.engine.delegate.JavaDelegate</code> 接口，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/监听器/DemoDelegateExpressionExecutionListener.png" alt="DemoDelegateExpressionExecutionListener" tabindex="0" loading="lazy"><figcaption>DemoDelegateExpressionExecutionListener</figcaption></figure><p>并且，需要声明成 Spring Bean！本质上，“委托表达式”是“Java 类”的特例，和 Spring 做了集成。</p><p>② 在 BPMN 流程图中，配置委托表达式监听器，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/监听器/DemoDelegateExpressionExecutionListenerConfig.png" alt="配置监听器" tabindex="0" loading="lazy"><figcaption>配置监听器</figcaption></figure><p>注意，图中填写的是 <code>${demoDelegateExpressionExecutionListener}</code>，这个是 Spring Bean 的名称。</p><h3 id="_1-3-spring-表达式监听器" tabindex="-1"><a class="header-anchor" href="#_1-3-spring-表达式监听器"><span><a href="#_1-3-spring-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9B%91%E5%90%AC%E5%99%A8">#</a> 1.3 Spring 表达式监听器</span></a></h3><p>① 新建一个 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-bpm/yudao-module-bpm-biz/src/main/java/cn/iocoder/yudao/module/bpm/framework/flowable/core/listener/demo/exection/DemoSpringExpressionExecutionListener.java" target="_blank" rel="noopener noreferrer">DemoSpringExpressionExecutionListener</a> 类，只需要声明成 Spring Bean，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/监听器/DemoSpringExpressionExecutionListener.png" alt="DemoSpringExpressionExecutionListener" tabindex="0" loading="lazy"><figcaption>DemoSpringExpressionExecutionListener</figcaption></figure><p>② 在 BPMN 流程图中，配置 Spring 表达式监听器，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/监听器/DemoSpringExpressionExecutionListenerConfig.png" alt="配置监听器" tabindex="0" loading="lazy"><figcaption>配置监听器</figcaption></figure><p>注意，图中填写的是 <code>${demoSpringExpressionExecutionListener.execute(execution)}</code>，这个就是通过 Spring EL 表达式，实现对某个 Bean 的某个方法的调用。</p><h2 id="_2-任务监听器" tabindex="-1"><a class="header-anchor" href="#_2-任务监听器"><span><a href="#_2-%E4%BB%BB%E5%8A%A1%E7%9B%91%E5%90%AC%E5%99%A8">#</a> 2. 任务监听器</span></a></h2><p>任务监听器（task listener），用于在特定的任务相关事件发生时，执行自定义的 Java 逻辑或表达式。</p><p>相比执行器来说，它只能监听 UserTask 用户任务，但是事件有 create 创建、assignment 指派、complete 完成、delete 删除、update 更新、timeout 超时。</p><p>学习文档：</p><ul><li><a href="https://tkjohn.github.io/flowable-userguide/#taskListeners" target="_blank" rel="noopener noreferrer">《Flowable BPMN 用户手册 (v 6.3.0) —— 任务监听器》</a><br> 我们可以在 BPMN 设计流程图时，给某个节点添加任务监听器，监听器可以是 Java 类、表达式、委托表达式。如下图所示：</li></ul><p>友情提示：任务监听器，和执行监听器的使用基本是一致的。</p><h3 id="_2-1-java-类监听器" tabindex="-1"><a class="header-anchor" href="#_2-1-java-类监听器"><span><a href="#_2-1-java-%E7%B1%BB%E7%9B%91%E5%90%AC%E5%99%A8">#</a> 2.1 Java 类监听器</span></a></h3><p>① 新建一个 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-bpm/yudao-module-bpm-biz/src/main/java/cn/iocoder/yudao/module/bpm/framework/flowable/core/listener/demo/task/DemoDelegateClassTaskListener.java" target="_blank" rel="noopener noreferrer">DemoDelegateClassTaskListener</a> 类，需要实现 <code>org.flowable.engine.delegate.TaskListener</code> 接口，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/监听器/DemoDelegateClassTaskListener.png" alt="DemoDelegateClassTaskListener" tabindex="0" loading="lazy"><figcaption>DemoDelegateClassTaskListener</figcaption></figure><p>② 在 BPMN 流程图中，配置 Java 类监听器，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/监听器/DemoDelegateClassTaskListenerConfig.png" alt="配置监听器" tabindex="0" loading="lazy"><figcaption>配置监听器</figcaption></figure><p>注意，图中填写的是 <code>cn.iocoder.yudao.module.bpm.framework.flowable.core.listener.demo.task.DemoDelegateClassTaskListener</code> 全路径。</p><h3 id="_2-2-委托表达式监听器" tabindex="-1"><a class="header-anchor" href="#_2-2-委托表达式监听器"><span><a href="#_2-2-%E5%A7%94%E6%89%98%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9B%91%E5%90%AC%E5%99%A8">#</a> 2.2 委托表达式监听器</span></a></h3><p>① 新建一个 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-bpm/yudao-module-bpm-biz/src/main/java/cn/iocoder/yudao/module/bpm/framework/flowable/core/listener/demo/task/DemoDelegateExpressionTaskListener.java" target="_blank" rel="noopener noreferrer">DemoDelegateExpressionTaskListener</a> 类，也需要实现 <code>org.flowable.engine.delegate.TaskListener</code> 接口，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/监听器/DemoDelegateExpressionTaskListener.png" alt="DemoDelegateExpressionTaskListener" tabindex="0" loading="lazy"><figcaption>DemoDelegateExpressionTaskListener</figcaption></figure><p>并且，需要声明成 Spring Bean！本质上，“委托表达式”是“Java 类”的特例，和 Spring 做了集成。</p><p>② 在 BPMN 流程图中，配置委托表达式监听器，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/监听器/DemoDelegateExpressionTaskListenerConfig.png" alt="配置监听器" tabindex="0" loading="lazy"><figcaption>配置监听器</figcaption></figure><p>注意，图中填写的是 <code>${demoDelegateExpressionTaskListener}</code>，这个是 Spring Bean 的名称。</p><h3 id="_2-3-spring-表达式监听器" tabindex="-1"><a class="header-anchor" href="#_2-3-spring-表达式监听器"><span><a href="#_2-3-spring-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9B%91%E5%90%AC%E5%99%A8">#</a> 2.3 Spring 表达式监听器</span></a></h3><p>① 新建一个 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-bpm/yudao-module-bpm-biz/src/main/java/cn/iocoder/yudao/module/bpm/framework/flowable/core/listener/demo/task/DemoSpringExpressionTaskListener.java" target="_blank" rel="noopener noreferrer">DemoSpringExpressionTaskListener</a> 类，只需要声明成 Spring Bean，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/监听器/DemoSpringExpressionTaskListener.png" alt="DemoSpringExpressionTaskListener" tabindex="0" loading="lazy"><figcaption>DemoSpringExpressionTaskListener</figcaption></figure><p>② 在 BPMN 流程图中，配置 Spring 表达式监听器，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/监听器/DemoSpringExpressionTaskListenerConfig.png" alt="配置监听器" tabindex="0" loading="lazy"><figcaption>配置监听器</figcaption></figure><p>注意，图中填写的是 <code>${demoSpringExpressionTaskListener.notify(task)}</code>，这个就是通过 Spring EL 表达式，实现对某个 Bean 的某个方法的调用。</p><h2 id="_3-流程监听器的模版" tabindex="-1"><a class="header-anchor" href="#_3-流程监听器的模版"><span><a href="#_3-%E6%B5%81%E7%A8%8B%E7%9B%91%E5%90%AC%E5%99%A8%E7%9A%84%E6%A8%A1%E7%89%88">#</a> 3. 流程监听器的模版</span></a></h2><p>在 [工作流程 -&gt; 流程管理 -&gt; 流程监控器] 菜单，可以配置执行监听器、任务监听器的模版。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/监听器/流程监控器.png" alt="流程监控器" tabindex="0" loading="lazy"><figcaption>流程监控器</figcaption></figure><ul><li>前端，对应 <code>views/bpm/processListener/index.vue</code> 提供界面</li><li>后端，对应 <code>BpmProcessListenerController</code> 提供接口</li></ul><h3 id="_3-1-使用场景" tabindex="-1"><a class="header-anchor" href="#_3-1-使用场景"><span><a href="#_3-1-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">#</a> 3.1 使用场景</span></a></h3><p>当我们在 BPMN 流程图中，配置监听器时，可以选择模版，而不需要每次都填写监听器信息。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/监听器/选择监听器.png" alt="选择监听器" tabindex="0" loading="lazy"><figcaption>选择监听器</figcaption></figure><h3 id="_3-2-表结构" tabindex="-1"><a class="header-anchor" href="#_3-2-表结构"><span><a href="#_3-2-%E8%A1%A8%E7%BB%93%E6%9E%84">#</a> 3.2 表结构</span></a></h3><p>流程监听器表，是我们自己定义的 <code>bpm_process_instance_copy</code> 表，结构如下：</p><blockquote><p>省略 creator/create_time/updater/update_time/deleted/tenant_id 等通用字段</p></blockquote><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE `bpm_process_listener` (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;编号&#39;,</span></span>\n<span class="line"><span>  `name` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &#39;&#39; COMMENT &#39;监听器名字&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `type` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;监听器类型&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `status` tinyint NOT NULL COMMENT &#39;监听器状态&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `event` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &#39;&#39; COMMENT &#39;监听事件&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `value_type` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &#39;&#39; COMMENT &#39;监听器值类型&#39;,</span></span>\n<span class="line"><span>  `value` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;监听器值&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`) USING BTREE</span></span>\n<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=119 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&#39;BPM 流程监听器表&#39;;</span></span></code></pre></div><p>① <code>type</code> 字段，表示监听器类型，可以是 <code>execution</code> 执行监听器、<code>task</code> 任务监听器。</p><p>② <code>event</code> 字段，表示监听事件，可以是执行监听器的 <code>start</code> 开始、<code>end</code> 结束，或者任务监听器的 <code>create</code> 创建、<code>assignment</code> 指派、<code>complete</code> 完成、<code>delete</code> 删除、<code>update</code> 更新、<code>timeout</code> 超时。</p><p>③ <code>value_type</code> 字段，表示监听器值类型，可以是 <code>class</code> Java 类、<code>expression</code> 表达式、<code>delegateExpression</code> 委托表达式。</p><p><code>value</code> 字段，表示监听器值，可以是 Java 类的全路径、表达式、委托表达式。</p>',70)]))}const p=a(s,[["render",r],["__file","listener.html.vue"]]),c=JSON.parse('{"path":"/project/yudao-cloud/bpm/listener.html","title":"执行监听器、任务监听器","lang":"en-US","frontmatter":{"title":"执行监听器、任务监听器","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":77,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 执行监听器","slug":"_1-执行监听器","link":"#_1-执行监听器","children":[{"level":3,"title":"# 1.1 Java 类监听器","slug":"_1-1-java-类监听器","link":"#_1-1-java-类监听器","children":[]},{"level":3,"title":"# 1.2 委托表达式监听器","slug":"_1-2-委托表达式监听器","link":"#_1-2-委托表达式监听器","children":[]},{"level":3,"title":"# 1.3 Spring 表达式监听器","slug":"_1-3-spring-表达式监听器","link":"#_1-3-spring-表达式监听器","children":[]}]},{"level":2,"title":"# 2. 任务监听器","slug":"_2-任务监听器","link":"#_2-任务监听器","children":[{"level":3,"title":"# 2.1 Java 类监听器","slug":"_2-1-java-类监听器","link":"#_2-1-java-类监听器","children":[]},{"level":3,"title":"# 2.2 委托表达式监听器","slug":"_2-2-委托表达式监听器","link":"#_2-2-委托表达式监听器","children":[]},{"level":3,"title":"# 2.3 Spring 表达式监听器","slug":"_2-3-spring-表达式监听器","link":"#_2-3-spring-表达式监听器","children":[]}]},{"level":2,"title":"# 3. 流程监听器的模版","slug":"_3-流程监听器的模版","link":"#_3-流程监听器的模版","children":[{"level":3,"title":"# 3.1 使用场景","slug":"_3-1-使用场景","link":"#_3-1-使用场景","children":[]},{"level":3,"title":"# 3.2 表结构","slug":"_3-2-表结构","link":"#_3-2-表结构","children":[]}]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":6.56,"words":1967},"filePathRelative":"project/yudao-cloud/bpm/listener.md","localizedDate":"July 7, 2024"}');export{p as comp,c as data};
