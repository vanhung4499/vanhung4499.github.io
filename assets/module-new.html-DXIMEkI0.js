import{_ as e,g as l,o as p,c as d,e as s,h as a,f as c,w as t,a as r}from"./app-5QVbWi7Z.js";const o={};function v(u,n){const i=l("RouteLink");return p(),d("div",null,[n[3]||(n[3]=s("h1",{id:"新建服务",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#新建服务"},[s("span",null,"新建服务")])],-1)),n[4]||(n[4]=s("p",null,[a("本章节，将介绍如何新建名字为 "),s("code",null,"yudao-module-demo"),a(" 的示例服务，并添加 RESTful API 接口。")],-1)),s("p",null,[n[1]||(n[1]=a("虽然内容看起来比较长，是因为艿艿写的比较详细，大量截图，保姆级教程！其实只有 6 个步骤，保持耐心，跟着艿艿一点点来。🙂 完成之后，你会对整个 ")),c(i,{to:"/project-intro/"},{default:t(()=>n[0]||(n[0]=[a("项目结构")])),_:1}),n[2]||(n[2]=a(" 有更充分的了解。"))]),n[5]||(n[5]=r(`<h2 id="👍-相关视频教程" tabindex="-1"><a class="header-anchor" href="#👍-相关视频教程"><span><a href="#%F0%9F%91%8D-%E7%9B%B8%E5%85%B3%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B">#</a> 👍 相关视频教程</span></a></h2><ul><li><a href="https://t.zsxq.com/07EUrZrNV" target="_blank" rel="noopener noreferrer">从零开始 06：如何 5 分钟，创建一个新模块？</a> 【该视频是 Boot 单体版，Cloud 待录制】</li></ul><h2 id="_1-新建-demo-模块" tabindex="-1"><a class="header-anchor" href="#_1-新建-demo-模块"><span><a href="#_1-%E6%96%B0%E5%BB%BA-demo-%E6%A8%A1%E5%9D%97">#</a> 1. 新建 demo 模块</span></a></h2><p>① 选择 File -&gt; New -&gt; Module 菜单，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/新建服务/40.png" alt="打开 New Module" tabindex="0" loading="lazy"><figcaption>打开 New Module</figcaption></figure><p>② 选择 Maven 类型，选择父模块为 <code>yudao</code>，输入名字为 <code>yudao-module-demo</code>，并点击 Create 按钮，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/新建服务/42.png" alt="填写 Module 信息" tabindex="0" loading="lazy"><figcaption>填写 Module 信息</figcaption></figure><p>③ 打开 <code>yudao-module-demo</code> 模块，删除 src 文件，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/新建服务/43.png" alt="删除 src 文件" tabindex="0" loading="lazy"><figcaption>删除 src 文件</figcaption></figure><p>④ 打开 <code>yudao-module-demo</code> 模块的 <code>pom.xml</code> 文件，修改内容如下：</p><p>提示</p><p><code>&lt;!-- --&gt;</code> 部分，只是注释，不需要写到 XML 中。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span>
<span class="line"><span>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span>
<span class="line"><span>         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span>         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span></span>
<span class="line"><span>    &lt;parent&gt;</span></span>
<span class="line"><span>        &lt;artifactId&gt;yudao&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;groupId&gt;cn.iocoder.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>        &lt;version&gt;\${revision}&lt;/version&gt; &lt;!-- 1. 修改 version 为 \${revision} --&gt;</span></span>
<span class="line"><span>    &lt;/parent&gt;</span></span>
<span class="line"><span>    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;artifactId&gt;yudao-module-demo&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;packaging&gt;pom&lt;/packaging&gt; &lt;!-- 2. 新增 packaging 为 pom --&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;name&gt;\${project.artifactId}&lt;/name&gt; &lt;!-- 3. 新增 name 为 \${project.artifactId} --&gt;</span></span>
<span class="line"><span>    &lt;description&gt; &lt;!-- 4. 新增 description 为该模块的描述 --&gt;</span></span>
<span class="line"><span>        demo 模块，主要实现 XXX、YYY、ZZZ 等功能。</span></span>
<span class="line"><span>    &lt;/description&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;/project&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-新建-demo-api-子模块" tabindex="-1"><a class="header-anchor" href="#_2-新建-demo-api-子模块"><span><a href="#_2-%E6%96%B0%E5%BB%BA-demo-api-%E5%AD%90%E6%A8%A1%E5%9D%97">#</a> 2. 新建 demo-api 子模块</span></a></h2><p>① 新建 <code>yudao-module-demo-api</code> 子模块，整个过程和“新建 demo 模块”是一致的，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/新建服务/40.png" alt="打开 New Module" tabindex="0" loading="lazy"><figcaption>打开 New Module</figcaption></figure><figure><img src="https://cloud.iocoder.cn/img/新建服务/42-api.png" alt="填写 Module 信息" tabindex="0" loading="lazy"><figcaption>填写 Module 信息</figcaption></figure><p>② 打开 <code>yudao-module-demo-api</code> 模块的 <code>pom.xml</code> 文件，修改内容如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span>
<span class="line"><span>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span>
<span class="line"><span>         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span>         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span></span>
<span class="line"><span>    &lt;parent&gt;</span></span>
<span class="line"><span>        &lt;artifactId&gt;yudao-module-demo&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;groupId&gt;cn.iocoder.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>        &lt;version&gt;\${revision}&lt;/version&gt; &lt;!-- 1. 修改 version 为 \${revision} --&gt;</span></span>
<span class="line"><span>    &lt;/parent&gt;</span></span>
<span class="line"><span>    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;yudao-module-demo-api&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;packaging&gt;jar&lt;/packaging&gt; &lt;!-- 2. 新增 packaging 为 jar --&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;name&gt;\${project.artifactId}&lt;/name&gt; &lt;!-- 3. 新增 name 为 \${project.artifactId} --&gt;</span></span>
<span class="line"><span>    &lt;description&gt; &lt;!-- 4. 新增 description 为该模块的描述 --&gt;</span></span>
<span class="line"><span>        demo 模块 API，暴露给其它模块调用</span></span>
<span class="line"><span>    &lt;/description&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;dependencies&gt;  &lt;!-- 5. 新增 yudao-common 依赖 --&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;cn.iocoder.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;yudao-common&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span>    &lt;/dependencies&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;/project&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③ 【可选】新建 <code>cn.iocoder.yudao.module.demo</code> <strong>基础</strong>包，其中 <code>demo</code> 为模块名。之后，新建 <code>api</code> 和 <code>enums</code> 包。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/新建服务/44.png" alt="新建基础包" tabindex="0" loading="lazy"><figcaption>新建基础包</figcaption></figure><h2 id="_3-新建-demo-biz-子模块" tabindex="-1"><a class="header-anchor" href="#_3-新建-demo-biz-子模块"><span><a href="#_3-%E6%96%B0%E5%BB%BA-demo-biz-%E5%AD%90%E6%A8%A1%E5%9D%97">#</a> 3. 新建 demo-biz 子模块</span></a></h2><p>① 新建 <code>yudao-module-demo-biz</code> 子模块，整个过程和“新建 demo 模块”也是一致的，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/新建服务/40.png" alt="打开 New Module" tabindex="0" loading="lazy"><figcaption>打开 New Module</figcaption></figure><figure><img src="https://cloud.iocoder.cn/img/新建服务/42-biz.png" alt="填写 Module 信息" tabindex="0" loading="lazy"><figcaption>填写 Module 信息</figcaption></figure><p>② 打开 <code>yudao-module-demo-biz</code> 模块的 <code>pom.xml</code> 文件，修改成内容如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span>
<span class="line"><span>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span>
<span class="line"><span>         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span>         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span></span>
<span class="line"><span>    &lt;parent&gt;</span></span>
<span class="line"><span>        &lt;artifactId&gt;yudao-module-demo&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;groupId&gt;cn.iocoder.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>        &lt;version&gt;\${revision}&lt;/version&gt; &lt;!-- 1. 修改 version 为 \${revision} --&gt;</span></span>
<span class="line"><span>    &lt;/parent&gt;</span></span>
<span class="line"><span>    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span></span>
<span class="line"><span>    &lt;packaging&gt;jar&lt;/packaging&gt; &lt;!-- 2. 新增 packaging 为 jar --&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;artifactId&gt;yudao-module-demo-biz&lt;/artifactId&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;name&gt;\${project.artifactId}&lt;/name&gt; &lt;!-- 3. 新增 name 为 \${project.artifactId} --&gt;</span></span>
<span class="line"><span>    &lt;description&gt; &lt;!-- 4. 新增 description 为该模块的描述 --&gt;</span></span>
<span class="line"><span>        demo 模块，主要实现 XXX、YYY、ZZZ 等功能。</span></span>
<span class="line"><span>    &lt;/description&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;dependencies&gt;  &lt;!-- 5. 新增依赖，这里引入的都是比较常用的业务组件、技术组件 --&gt;</span></span>
<span class="line"><span>        &lt;!-- Spring Cloud 基础 --&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;spring-cloud-starter-bootstrap&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;cn.iocoder.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;yudao-spring-boot-starter-env&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        &lt;!-- 依赖服务 --&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;cn.iocoder.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;yudao-module-system-api&lt;/artifactId&gt;</span></span>
<span class="line"><span>            &lt;version&gt;\${revision}&lt;/version&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;cn.iocoder.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;yudao-module-infra-api&lt;/artifactId&gt;</span></span>
<span class="line"><span>            &lt;version&gt;\${revision}&lt;/version&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;cn.iocoder.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;yudao-module-demo-api&lt;/artifactId&gt;</span></span>
<span class="line"><span>            &lt;version&gt;\${revision}&lt;/version&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        &lt;!-- 业务组件 --&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;cn.iocoder.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;yudao-spring-boot-starter-biz-data-permission&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;cn.iocoder.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;yudao-spring-boot-starter-biz-tenant&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        &lt;!-- Web 相关 --&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;cn.iocoder.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;yudao-spring-boot-starter-web&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;cn.iocoder.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;yudao-spring-boot-starter-security&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        &lt;!-- DB 相关 --&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;cn.iocoder.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;yudao-spring-boot-starter-mybatis&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;cn.iocoder.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;yudao-spring-boot-starter-redis&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        &lt;!-- RPC 远程调用相关 --&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;cn.iocoder.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;yudao-spring-boot-starter-rpc&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        &lt;!-- Registry 注册中心相关 --&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        &lt;!-- Config 配置中心相关 --&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        &lt;!-- Job 定时任务相关 --&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;cn.iocoder.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;yudao-spring-boot-starter-job&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        &lt;!-- 消息队列相关 --&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;cn.iocoder.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;yudao-spring-boot-starter-mq&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        &lt;!-- Test 测试相关 --&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;cn.iocoder.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;yudao-spring-boot-starter-test&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        &lt;!-- 工具类相关 --&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;cn.iocoder.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;yudao-spring-boot-starter-excel&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        &lt;!-- 监控相关 --&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;cn.iocoder.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;yudao-spring-boot-starter-monitor&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span>    &lt;/dependencies&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;build&gt;</span></span>
<span class="line"><span>        &lt;!-- 设置构建的 jar 包名 --&gt;</span></span>
<span class="line"><span>        &lt;finalName&gt;\${project.artifactId}&lt;/finalName&gt;</span></span>
<span class="line"><span>        &lt;plugins&gt;</span></span>
<span class="line"><span>            &lt;!-- 打包 --&gt;</span></span>
<span class="line"><span>            &lt;plugin&gt;</span></span>
<span class="line"><span>                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span></span>
<span class="line"><span>                &lt;version&gt;\${spring.boot.version}&lt;/version&gt;</span></span>
<span class="line"><span>                &lt;configuration&gt;</span></span>
<span class="line"><span>                    &lt;fork&gt;true&lt;/fork&gt;</span></span>
<span class="line"><span>                &lt;/configuration&gt;</span></span>
<span class="line"><span>                &lt;executions&gt;</span></span>
<span class="line"><span>                    &lt;execution&gt;</span></span>
<span class="line"><span>                        &lt;goals&gt;</span></span>
<span class="line"><span>                            &lt;goal&gt;repackage&lt;/goal&gt; &lt;!-- 将引入的 jar 打入其中 --&gt;</span></span>
<span class="line"><span>                        &lt;/goals&gt;</span></span>
<span class="line"><span>                    &lt;/execution&gt;</span></span>
<span class="line"><span>                &lt;/executions&gt;</span></span>
<span class="line"><span>            &lt;/plugin&gt;</span></span>
<span class="line"><span>        &lt;/plugins&gt;</span></span>
<span class="line"><span>    &lt;/build&gt;</span></span>
<span class="line"><span>&lt;/project&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③ 【必选】新建 <code>cn.iocoder.yudao.module.demo</code> <strong>基础</strong>包，其中 <code>demo</code> 为模块名。之后，新建 <code>controller.admin</code> 和 <code>controller.user</code> 等包。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/新建服务/45.png" alt="新建基础包" tabindex="0" loading="lazy"><figcaption>新建基础包</figcaption></figure><p>【JDK 8 + Spring Boot 2.X 版本】其中 SecurityConfiguration 的 Java 代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>package cn.iocoder.yudao.module.demo.framework.security.config;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import cn.iocoder.yudao.framework.security.config.AuthorizeRequestsCustomizer;</span></span>
<span class="line"><span>import cn.iocoder.yudao.module.infra.enums.ApiConstants;</span></span>
<span class="line"><span>import org.springframework.beans.factory.annotation.Value;</span></span>
<span class="line"><span>import org.springframework.context.annotation.Bean;</span></span>
<span class="line"><span>import org.springframework.context.annotation.Configuration;</span></span>
<span class="line"><span>import org.springframework.security.config.annotation.web.builders.HttpSecurity;</span></span>
<span class="line"><span>import org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * Demo 模块的 Security 配置</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@Configuration(proxyBeanMethods = false)</span></span>
<span class="line"><span>public class SecurityConfiguration {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Bean</span></span>
<span class="line"><span>    public AuthorizeRequestsCustomizer authorizeRequestsCustomizer() {</span></span>
<span class="line"><span>        return new AuthorizeRequestsCustomizer() {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            @Override</span></span>
<span class="line"><span>            public void customize(ExpressionUrlAuthorizationConfigurer&lt;HttpSecurity&gt;.ExpressionInterceptUrlRegistry registry) {</span></span>
<span class="line"><span>                // Swagger 接口文档</span></span>
<span class="line"><span>                registry.requestMatchers(&quot;/v3/api-docs/**&quot;).permitAll() // 元数据</span></span>
<span class="line"><span>                        .requestMatchers(&quot;/swagger-ui.html&quot;).permitAll(); // Swagger UI</span></span>
<span class="line"><span>                // Druid 监控</span></span>
<span class="line"><span>                registry.requestMatchers(&quot;/druid/**&quot;).permitAll();</span></span>
<span class="line"><span>                // Spring Boot Actuator 的安全配置</span></span>
<span class="line"><span>                registry.requestMatchers(&quot;/actuator&quot;).permitAll()</span></span>
<span class="line"><span>                        .requestMatchers(&quot;/actuator/**&quot;).permitAll();</span></span>
<span class="line"><span>                // RPC 服务的安全配置</span></span>
<span class="line"><span>                registry.requestMatchers(ApiConstants.PREFIX + &quot;/**&quot;).permitAll();</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        };</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【JDK 21 + Spring Boot 3.X 版本】其中 SecurityConfiguration 的 Java 代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>package cn.iocoder.yudao.module.demo.framework.security.config;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import cn.iocoder.yudao.framework.security.config.AuthorizeRequestsCustomizer;</span></span>
<span class="line"><span>import cn.iocoder.yudao.module.system.enums.ApiConstants;</span></span>
<span class="line"><span>import org.springframework.context.annotation.Bean;</span></span>
<span class="line"><span>import org.springframework.context.annotation.Configuration;</span></span>
<span class="line"><span>import org.springframework.security.config.annotation.web.builders.HttpSecurity;</span></span>
<span class="line"><span>import org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * Demo 模块的 Security 配置</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@Configuration(proxyBeanMethods = false)</span></span>
<span class="line"><span>public class SecurityConfiguration {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Bean</span></span>
<span class="line"><span>    public AuthorizeRequestsCustomizer authorizeRequestsCustomizer() {</span></span>
<span class="line"><span>        return new AuthorizeRequestsCustomizer() {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            @Override</span></span>
<span class="line"><span>            public void customize(ExpressionUrlAuthorizationConfigurer&lt;HttpSecurity&gt;.ExpressionInterceptUrlRegistry registry) {</span></span>
<span class="line"><span>                // Swagger 接口文档</span></span>
<span class="line"><span>                registry.antMatchers(&quot;/v3/api-docs/**&quot;).permitAll() // 元数据</span></span>
<span class="line"><span>                        .antMatchers(&quot;/swagger-ui.html&quot;).permitAll(); // Swagger UI</span></span>
<span class="line"><span>                // Druid 监控</span></span>
<span class="line"><span>                registry.antMatchers(&quot;/druid/**&quot;).anonymous();</span></span>
<span class="line"><span>                // Spring Boot Actuator 的安全配置</span></span>
<span class="line"><span>                registry.antMatchers(&quot;/actuator&quot;).anonymous()</span></span>
<span class="line"><span>                        .antMatchers(&quot;/actuator/**&quot;).anonymous();</span></span>
<span class="line"><span>                // RPC 服务的安全配置</span></span>
<span class="line"><span>                registry.antMatchers(ApiConstants.PREFIX + &quot;/**&quot;).permitAll();</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        };</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 DemoServerApplication 的 Java 代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>package cn.iocoder.yudao.module.demo;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.springframework.boot.SpringApplication;</span></span>
<span class="line"><span>import org.springframework.boot.autoconfigure.SpringBootApplication;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * 项目的启动类</span></span>
<span class="line"><span> *</span></span>
<span class="line"><span> * @author 芋道源码</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@SpringBootApplication</span></span>
<span class="line"><span>public class DemoServerApplication {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public static void main(String[] args) {</span></span>
<span class="line"><span>        SpringApplication.run(DemoServerApplication.class, args);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④ 打开 Maven 菜单，点击刷新按钮，让引入的 Maven 依赖生效。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/新建服务/46.png" alt="刷新 Maven 依赖" tabindex="0" loading="lazy"><figcaption>刷新 Maven 依赖</figcaption></figure><p>⑤ 在 <code>resources</code> 目录下，新建配置文件。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/新建服务/101.png" alt="配置文件" tabindex="0" loading="lazy"><figcaption>配置文件</figcaption></figure><p>其中 <code>application.yml</code> 的配置如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>spring:</span></span>
<span class="line"><span>  main:</span></span>
<span class="line"><span>    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。</span></span>
<span class="line"><span>    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Feign 等会存在重复定义的服务</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  # Servlet 配置</span></span>
<span class="line"><span>  servlet:</span></span>
<span class="line"><span>    # 文件上传相关配置项</span></span>
<span class="line"><span>    multipart:</span></span>
<span class="line"><span>      max-file-size: 16MB # 单个文件大小</span></span>
<span class="line"><span>      max-request-size: 32MB # 设置总上传的文件大小</span></span>
<span class="line"><span>  mvc:</span></span>
<span class="line"><span>    pathmatch:</span></span>
<span class="line"><span>      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  # Jackson 配置项</span></span>
<span class="line"><span>  jackson:</span></span>
<span class="line"><span>    serialization:</span></span>
<span class="line"><span>      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳</span></span>
<span class="line"><span>      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401</span></span>
<span class="line"><span>      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳</span></span>
<span class="line"><span>      fail-on-empty-beans: false # 允许序列化无属性的 Bean</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  # Cache 配置项</span></span>
<span class="line"><span>  cache:</span></span>
<span class="line"><span>    type: REDIS</span></span>
<span class="line"><span>    redis:</span></span>
<span class="line"><span>      time-to-live: 1h # 设置过期时间为 1 小时</span></span>
<span class="line"><span></span></span>
<span class="line"><span>--- #################### 接口文档配置 ####################</span></span>
<span class="line"><span></span></span>
<span class="line"><span>springdoc:</span></span>
<span class="line"><span>  api-docs:</span></span>
<span class="line"><span>    enabled: true # 1. 是否开启 Swagger 接文档的元数据</span></span>
<span class="line"><span>    path: /v3/api-docs</span></span>
<span class="line"><span>  swagger-ui:</span></span>
<span class="line"><span>    enabled: true # 2.1 是否开启 Swagger 文档的官方 UI 界面</span></span>
<span class="line"><span>    path: /swagger-ui.html</span></span>
<span class="line"><span>  default-flat-param-object: true # 参见 https://doc.xiaominfo.com/docs/faq/v4/knife4j-parameterobject-flat-param 文档</span></span>
<span class="line"><span></span></span>
<span class="line"><span>knife4j:</span></span>
<span class="line"><span>  enable: true # 2.2 是否开启 Swagger 文档的 Knife4j UI 界面</span></span>
<span class="line"><span>  setting:</span></span>
<span class="line"><span>    language: zh_cn</span></span>
<span class="line"><span></span></span>
<span class="line"><span># MyBatis Plus 的配置项</span></span>
<span class="line"><span>mybatis-plus:</span></span>
<span class="line"><span>  configuration:</span></span>
<span class="line"><span>    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。</span></span>
<span class="line"><span>  global-config:</span></span>
<span class="line"><span>    db-config:</span></span>
<span class="line"><span>      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。</span></span>
<span class="line"><span>      #      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库</span></span>
<span class="line"><span>      #      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库</span></span>
<span class="line"><span>      #      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解</span></span>
<span class="line"><span>      logic-delete-value: 1 # 逻辑已删除值(默认为 1)</span></span>
<span class="line"><span>      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)</span></span>
<span class="line"><span>    banner: false # 关闭控制台的 Banner 打印</span></span>
<span class="line"><span>  type-aliases-package: \${yudao.info.base-package}.module.*.dal.dataobject</span></span>
<span class="line"><span>  encryptor:</span></span>
<span class="line"><span>    password: XDV71a+xqStEA3WH # 加解密的秘钥，可使用 https://www.imaegoo.com/2020/aes-key-generator/ 网站生成</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mybatis-plus-join:</span></span>
<span class="line"><span>  banner: false # 关闭控制台的 Banner 打印</span></span>
<span class="line"><span></span></span>
<span class="line"><span># VO 转换（数据翻译）相关</span></span>
<span class="line"><span>easy-trans:</span></span>
<span class="line"><span>  is-enable-global: true # 启用全局翻译（拦截所有 SpringMVC ResponseBody 进行自动翻译 )。如果对于性能要求很高可关闭此配置，或通过 @IgnoreTrans 忽略某个接口</span></span>
<span class="line"><span>  is-enable-cloud: false # 禁用 TransType.RPC 微服务模式</span></span>
<span class="line"><span></span></span>
<span class="line"><span>--- #################### RPC 远程调用相关配置 ####################</span></span>
<span class="line"><span></span></span>
<span class="line"><span>--- #################### MQ 消息队列相关配置 ####################</span></span>
<span class="line"><span></span></span>
<span class="line"><span>--- #################### 定时任务相关配置 ####################</span></span>
<span class="line"><span></span></span>
<span class="line"><span>xxl:</span></span>
<span class="line"><span>  job:</span></span>
<span class="line"><span>    executor:</span></span>
<span class="line"><span>      appname: \${spring.application.name} # 执行器 AppName</span></span>
<span class="line"><span>      logpath: \${user.home}/logs/xxl-job/\${spring.application.name} # 执行器运行日志文件存储磁盘路径</span></span>
<span class="line"><span>    accessToken: default_token # 执行器通讯TOKEN</span></span>
<span class="line"><span></span></span>
<span class="line"><span>--- #################### 芋道相关配置 ####################</span></span>
<span class="line"><span></span></span>
<span class="line"><span>yudao:</span></span>
<span class="line"><span>  info:</span></span>
<span class="line"><span>    version: 1.0.0</span></span>
<span class="line"><span>    base-package: cn.iocoder.yudao.module.demo</span></span>
<span class="line"><span>  web:</span></span>
<span class="line"><span>    admin-ui:</span></span>
<span class="line"><span>      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址</span></span>
<span class="line"><span>  swagger:</span></span>
<span class="line"><span>    title: 管理后台</span></span>
<span class="line"><span>    description: 提供管理员管理的所有功能</span></span>
<span class="line"><span>    version: \${yudao.info.version}</span></span>
<span class="line"><span>    base-package: \${yudao.info.base-package}</span></span>
<span class="line"><span>  tenant: # 多租户相关配置项</span></span>
<span class="line"><span>    enable: true</span></span>
<span class="line"><span></span></span>
<span class="line"><span>debug: false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>yudao.info.version.base-package</code> 配置项：可以改成你的项目的基准包名。</li></ul><p>其中 <code>application-local.yml</code> 的配置如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>--- #################### 数据库相关配置 ####################</span></span>
<span class="line"><span>spring:</span></span>
<span class="line"><span>  # 数据源配置项</span></span>
<span class="line"><span>  autoconfigure:</span></span>
<span class="line"><span>    exclude:</span></span>
<span class="line"><span>      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源</span></span>
<span class="line"><span>      - de.codecentric.boot.admin.client.config.SpringBootAdminClientAutoConfiguration # 禁用 Spring Boot Admin 的 Client 的自动配置</span></span>
<span class="line"><span>  datasource:</span></span>
<span class="line"><span>    druid: # Druid 【监控】相关的全局配置</span></span>
<span class="line"><span>      web-stat-filter:</span></span>
<span class="line"><span>        enabled: true</span></span>
<span class="line"><span>      stat-view-servlet:</span></span>
<span class="line"><span>        enabled: true</span></span>
<span class="line"><span>        allow: # 设置白名单，不填则允许所有访问</span></span>
<span class="line"><span>        url-pattern: /druid/*</span></span>
<span class="line"><span>        login-username: # 控制台管理用户名和密码</span></span>
<span class="line"><span>        login-password:</span></span>
<span class="line"><span>      filter:</span></span>
<span class="line"><span>        stat:</span></span>
<span class="line"><span>          enabled: true</span></span>
<span class="line"><span>          log-slow-sql: true # 慢 SQL 记录</span></span>
<span class="line"><span>          slow-sql-millis: 100</span></span>
<span class="line"><span>          merge-sql: true</span></span>
<span class="line"><span>        wall:</span></span>
<span class="line"><span>          config:</span></span>
<span class="line"><span>            multi-statement-allow: true</span></span>
<span class="line"><span>    dynamic: # 多数据源配置</span></span>
<span class="line"><span>      druid: # Druid 【连接池】相关的全局配置</span></span>
<span class="line"><span>        initial-size: 1 # 初始连接数</span></span>
<span class="line"><span>        min-idle: 1 # 最小连接池数量</span></span>
<span class="line"><span>        max-active: 20 # 最大连接池数量</span></span>
<span class="line"><span>        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒</span></span>
<span class="line"><span>        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒</span></span>
<span class="line"><span>        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒</span></span>
<span class="line"><span>        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒</span></span>
<span class="line"><span>        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效</span></span>
<span class="line"><span>        test-while-idle: true</span></span>
<span class="line"><span>        test-on-borrow: false</span></span>
<span class="line"><span>        test-on-return: false</span></span>
<span class="line"><span>      primary: master</span></span>
<span class="line"><span>      datasource:</span></span>
<span class="line"><span>        master:</span></span>
<span class="line"><span>          url: jdbc:mysql://127.0.0.1:3306/ruoyi-vue-pro?useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true&amp;nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例</span></span>
<span class="line"><span>          #          url: jdbc:mysql://127.0.0.1:3306/ruoyi-vue-pro?useSSL=true&amp;allowPublicKeyRetrieval=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai # MySQL Connector/J 5.X 连接的示例</span></span>
<span class="line"><span>          #          url: jdbc:postgresql://127.0.0.1:5432/ruoyi-vue-pro # PostgreSQL 连接的示例</span></span>
<span class="line"><span>          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例</span></span>
<span class="line"><span>          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=ruoyi-vue-pro # SQLServer 连接的示例</span></span>
<span class="line"><span>          #          url: jdbc:dm://10.211.55.4:5236?schema=RUOYI_VUE_PRO # DM 连接的示例</span></span>
<span class="line"><span>          username: root</span></span>
<span class="line"><span>          password: 123456</span></span>
<span class="line"><span>        #          username: sa # SQL Server 连接的示例</span></span>
<span class="line"><span>        #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W # SQL Server 连接的示例</span></span>
<span class="line"><span>        #          username: SYSDBA # DM 连接的示例</span></span>
<span class="line"><span>        #          password: SYSDBA # DM 连接的示例</span></span>
<span class="line"><span>        slave: # 模拟从库，可根据自己需要修改</span></span>
<span class="line"><span>          lazy: true # 开启懒加载，保证启动速度</span></span>
<span class="line"><span>          url: jdbc:mysql://127.0.0.1:3306/ruoyi-vue-pro?useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true&amp;nullCatalogMeansCurrent=true</span></span>
<span class="line"><span>          username: root</span></span>
<span class="line"><span>          password: 123456</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优</span></span>
<span class="line"><span>  redis:</span></span>
<span class="line"><span>    host: 127.0.0.1 # 地址</span></span>
<span class="line"><span>    port: 6379 # 端口</span></span>
<span class="line"><span>    database: 0 # 数据库索引</span></span>
<span class="line"><span>#    password: 123456 # 密码，建议生产环境开启</span></span>
<span class="line"><span></span></span>
<span class="line"><span>--- #################### MQ 消息队列相关配置 ####################</span></span>
<span class="line"><span></span></span>
<span class="line"><span>--- #################### 定时任务相关配置 ####################</span></span>
<span class="line"><span></span></span>
<span class="line"><span>xxl:</span></span>
<span class="line"><span>  job:</span></span>
<span class="line"><span>    admin:</span></span>
<span class="line"><span>      addresses: http://127.0.0.1:9090/xxl-job-admin # 调度中心部署跟地址</span></span>
<span class="line"><span></span></span>
<span class="line"><span>--- #################### 服务保障相关配置 ####################</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Lock4j 配置项</span></span>
<span class="line"><span>lock4j:</span></span>
<span class="line"><span>  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒</span></span>
<span class="line"><span>  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒</span></span>
<span class="line"><span></span></span>
<span class="line"><span>--- #################### 监控相关配置 ####################</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Actuator 监控端点的配置项</span></span>
<span class="line"><span>management:</span></span>
<span class="line"><span>  endpoints:</span></span>
<span class="line"><span>    web:</span></span>
<span class="line"><span>      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator</span></span>
<span class="line"><span>      exposure:</span></span>
<span class="line"><span>        include: &#39;*&#39; # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Spring Boot Admin 配置项</span></span>
<span class="line"><span>spring:</span></span>
<span class="line"><span>  boot:</span></span>
<span class="line"><span>    admin:</span></span>
<span class="line"><span>      # Spring Boot Admin Client 客户端的相关配置</span></span>
<span class="line"><span>      client:</span></span>
<span class="line"><span>        instance:</span></span>
<span class="line"><span>          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 日志文件配置</span></span>
<span class="line"><span>logging:</span></span>
<span class="line"><span>  level:</span></span>
<span class="line"><span>    # 配置自己写的 MyBatis Mapper 打印日志</span></span>
<span class="line"><span>    cn.iocoder.yudao.module.demo.dal.mysql: debug</span></span>
<span class="line"><span></span></span>
<span class="line"><span>--- #################### 芋道相关配置 ####################</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 芋道配置项，设置当前项目所有自定义的配置</span></span>
<span class="line"><span>yudao:</span></span>
<span class="line"><span>  env: # 多环境的配置项</span></span>
<span class="line"><span>    tag: \${HOSTNAME}</span></span>
<span class="line"><span>  security:</span></span>
<span class="line"><span>    mock-enable: true</span></span>
<span class="line"><span>  xss:</span></span>
<span class="line"><span>    enable: false</span></span>
<span class="line"><span>    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系</span></span>
<span class="line"><span>      - \${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求</span></span>
<span class="line"><span>      - \${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求</span></span>
<span class="line"><span>  access-log: # 访问日志的配置项</span></span>
<span class="line"><span>    enable: false</span></span>
<span class="line"><span>  demo: false # 关闭演示模式</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>logging.level.cn.iocoder.yudao.module.demo.dal.mysql</code> 配置项：可以改成你的项目的基准包名。</li></ul><p>其中 <code>bootstrap.yml</code> 的配置如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>spring:</span></span>
<span class="line"><span>  application:</span></span>
<span class="line"><span>    name: demo-server</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  profiles:</span></span>
<span class="line"><span>    active: local</span></span>
<span class="line"><span></span></span>
<span class="line"><span>server:</span></span>
<span class="line"><span>  port: 48099</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 日志文件配置。注意，如果 logging.file.name 不放在 bootstrap.yaml 配置文件，而是放在 application.yaml 中，会导致出现 LOG_FILE_IS_UNDEFINED 文件</span></span>
<span class="line"><span>logging:</span></span>
<span class="line"><span>  file:</span></span>
<span class="line"><span>    name: \${user.home}/logs/\${spring.application.name}.log # 日志文件名，全路径</span></span></code></pre></div><ul><li><code>spring.application.name</code> 配置项：可以改成你想要的服务名。</li><li><code>server.port</code> 配置项：可以改成你想要的端口号。</li></ul><p>其中 <code>bootstrap-local.yml</code> 的配置如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>--- #################### 注册中心相关配置 ####################</span></span>
<span class="line"><span></span></span>
<span class="line"><span>spring:</span></span>
<span class="line"><span>  cloud:</span></span>
<span class="line"><span>    nacos:</span></span>
<span class="line"><span>      server-addr: 127.0.0.1:8848</span></span>
<span class="line"><span>      discovery:</span></span>
<span class="line"><span>        namespace: dev # 命名空间。这里使用 dev 开发环境</span></span>
<span class="line"><span>        metadata:</span></span>
<span class="line"><span>          version: 1.0.0 # 服务实例的版本号，可用于灰度发布</span></span>
<span class="line"><span></span></span>
<span class="line"><span>--- #################### 配置中心相关配置 ####################</span></span>
<span class="line"><span></span></span>
<span class="line"><span>spring:</span></span>
<span class="line"><span>  cloud:</span></span>
<span class="line"><span>    nacos:</span></span>
<span class="line"><span>      # Nacos Config 配置项，对应 NacosConfigProperties 配置属性类</span></span>
<span class="line"><span>      config:</span></span>
<span class="line"><span>        server-addr: 127.0.0.1:8848 # Nacos 服务器地址</span></span>
<span class="line"><span>        namespace: dev # 命名空间。这里使用 dev 开发环境</span></span>
<span class="line"><span>        group: DEFAULT_GROUP # 使用的 Nacos 配置分组，默认为 DEFAULT_GROUP</span></span>
<span class="line"><span>        name: # 使用的 Nacos 配置集的 dataId，默认为 spring.application.name</span></span>
<span class="line"><span>        file-extension: yaml # 使用的 Nacos 配置集的 dataId 的文件拓展名，同时也是 Nacos 配置集的配置格式，默认为 properties</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>logback-spring.xml</code> 的配置如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>&lt;configuration&gt;</span></span>
<span class="line"><span>    &lt;!-- 引用 Spring Boot 的 logback 基础配置 --&gt;</span></span>
<span class="line"><span>    &lt;include resource=&quot;org/springframework/boot/logging/logback/defaults.xml&quot; /&gt;</span></span>
<span class="line"><span>    &lt;!-- 变量 yudao.info.base-package，基础业务包 --&gt;</span></span>
<span class="line"><span>    &lt;springProperty scope=&quot;context&quot; name=&quot;yudao.info.base-package&quot; source=&quot;yudao.info.base-package&quot;/&gt;</span></span>
<span class="line"><span>    &lt;!-- 格式化输出：%d 表示日期，%X{tid} SkWalking 链路追踪编号，%thread 表示线程名，%-5level：级别从左显示 5 个字符宽度，%msg：日志消息，%n是换行符 --&gt;</span></span>
<span class="line"><span>    &lt;property name=&quot;PATTERN_DEFAULT&quot; value=&quot;%d{\${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} \${LOG_LEVEL_PATTERN:-%5p} \${PID:- } --- [%thread] [%tid] %-40.40logger{39} : %m%n\${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}&quot;/&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;!-- 控制台 Appender --&gt;</span></span>
<span class="line"><span>    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;　　　　　</span></span>
<span class="line"><span>        &lt;encoder class=&quot;ch.qos.logback.core.encoder.LayoutWrappingEncoder&quot;&gt;</span></span>
<span class="line"><span>            &lt;layout class=&quot;org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout&quot;&gt;</span></span>
<span class="line"><span>                &lt;pattern&gt;\${PATTERN_DEFAULT}&lt;/pattern&gt;</span></span>
<span class="line"><span>            &lt;/layout&gt;</span></span>
<span class="line"><span>        &lt;/encoder&gt;</span></span>
<span class="line"><span>    &lt;/appender&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;!-- 文件 Appender --&gt;</span></span>
<span class="line"><span>    &lt;!-- 参考 Spring Boot 的 file-appender.xml 编写 --&gt;</span></span>
<span class="line"><span>    &lt;appender name=&quot;FILE&quot;  class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span></span>
<span class="line"><span>        &lt;encoder class=&quot;ch.qos.logback.core.encoder.LayoutWrappingEncoder&quot;&gt;</span></span>
<span class="line"><span>            &lt;layout class=&quot;org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout&quot;&gt;</span></span>
<span class="line"><span>                &lt;pattern&gt;\${PATTERN_DEFAULT}&lt;/pattern&gt;</span></span>
<span class="line"><span>            &lt;/layout&gt;</span></span>
<span class="line"><span>        &lt;/encoder&gt;</span></span>
<span class="line"><span>        &lt;!-- 日志文件名 --&gt;</span></span>
<span class="line"><span>        &lt;file&gt;\${LOG_FILE}&lt;/file&gt;</span></span>
<span class="line"><span>        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&gt;</span></span>
<span class="line"><span>            &lt;!-- 滚动后的日志文件名 --&gt;</span></span>
<span class="line"><span>            &lt;fileNamePattern&gt;\${LOGBACK_ROLLINGPOLICY_FILE_NAME_PATTERN:-\${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz}&lt;/fileNamePattern&gt;</span></span>
<span class="line"><span>            &lt;!-- 启动服务时，是否清理历史日志，一般不建议清理 --&gt;</span></span>
<span class="line"><span>            &lt;cleanHistoryOnStart&gt;\${LOGBACK_ROLLINGPOLICY_CLEAN_HISTORY_ON_START:-false}&lt;/cleanHistoryOnStart&gt;</span></span>
<span class="line"><span>            &lt;!-- 日志文件，到达多少容量，进行滚动 --&gt;</span></span>
<span class="line"><span>            &lt;maxFileSize&gt;\${LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE:-10MB}&lt;/maxFileSize&gt;</span></span>
<span class="line"><span>            &lt;!-- 日志文件的总大小，0 表示不限制 --&gt;</span></span>
<span class="line"><span>            &lt;totalSizeCap&gt;\${LOGBACK_ROLLINGPOLICY_TOTAL_SIZE_CAP:-0}&lt;/totalSizeCap&gt;</span></span>
<span class="line"><span>            &lt;!-- 日志文件的保留天数 --&gt;</span></span>
<span class="line"><span>            &lt;maxHistory&gt;\${LOGBACK_ROLLINGPOLICY_MAX_HISTORY:-30}&lt;/maxHistory&gt;</span></span>
<span class="line"><span>        &lt;/rollingPolicy&gt;</span></span>
<span class="line"><span>    &lt;/appender&gt;</span></span>
<span class="line"><span>    &lt;!-- 异步写入日志，提升性能 --&gt;</span></span>
<span class="line"><span>    &lt;appender name=&quot;ASYNC&quot; class=&quot;ch.qos.logback.classic.AsyncAppender&quot;&gt;</span></span>
<span class="line"><span>        &lt;!-- 不丢失日志。默认的，如果队列的 80% 已满,则会丢弃 TRACT、DEBUG、INFO 级别的日志 --&gt;</span></span>
<span class="line"><span>        &lt;discardingThreshold&gt;0&lt;/discardingThreshold&gt;</span></span>
<span class="line"><span>        &lt;!-- 更改默认的队列的深度，该值会影响性能。默认值为 256 --&gt;</span></span>
<span class="line"><span>        &lt;queueSize&gt;256&lt;/queueSize&gt;</span></span>
<span class="line"><span>        &lt;appender-ref ref=&quot;FILE&quot;/&gt;</span></span>
<span class="line"><span>    &lt;/appender&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;!-- SkyWalking GRPC 日志收集，实现日志中心。注意：SkyWalking 8.4.0 版本开始支持 --&gt;</span></span>
<span class="line"><span>    &lt;appender name=&quot;GRPC&quot; class=&quot;org.apache.skywalking.apm.toolkit.log.logback.v1.x.log.GRPCLogClientAppender&quot;&gt;</span></span>
<span class="line"><span>        &lt;encoder class=&quot;ch.qos.logback.core.encoder.LayoutWrappingEncoder&quot;&gt;</span></span>
<span class="line"><span>            &lt;layout class=&quot;org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout&quot;&gt;</span></span>
<span class="line"><span>                &lt;pattern&gt;\${PATTERN_DEFAULT}&lt;/pattern&gt;</span></span>
<span class="line"><span>            &lt;/layout&gt;</span></span>
<span class="line"><span>        &lt;/encoder&gt;</span></span>
<span class="line"><span>    &lt;/appender&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;!-- 本地环境 --&gt;</span></span>
<span class="line"><span>    &lt;springProfile name=&quot;local&quot;&gt;</span></span>
<span class="line"><span>        &lt;root level=&quot;INFO&quot;&gt;</span></span>
<span class="line"><span>            &lt;appender-ref ref=&quot;STDOUT&quot;/&gt;</span></span>
<span class="line"><span>            &lt;appender-ref ref=&quot;GRPC&quot;/&gt; &lt;!-- 本地环境下，如果不想接入 SkyWalking 日志服务，可以注释掉本行 --&gt;</span></span>
<span class="line"><span>            &lt;appender-ref ref=&quot;ASYNC&quot;/&gt;  &lt;!-- 本地环境下，如果不想打印日志，可以注释掉本行 --&gt;</span></span>
<span class="line"><span>        &lt;/root&gt;</span></span>
<span class="line"><span>    &lt;/springProfile&gt;</span></span>
<span class="line"><span>    &lt;!-- 其它环境 --&gt;</span></span>
<span class="line"><span>    &lt;springProfile name=&quot;dev,test,stage,prod,default&quot;&gt;</span></span>
<span class="line"><span>        &lt;root level=&quot;INFO&quot;&gt;</span></span>
<span class="line"><span>            &lt;appender-ref ref=&quot;STDOUT&quot;/&gt;</span></span>
<span class="line"><span>            &lt;appender-ref ref=&quot;ASYNC&quot;/&gt;</span></span>
<span class="line"><span>            &lt;appender-ref ref=&quot;GRPC&quot;/&gt;</span></span>
<span class="line"><span>        &lt;/root&gt;</span></span>
<span class="line"><span>    &lt;/springProfile&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;/configuration&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-新建-restful-api-接口" tabindex="-1"><a class="header-anchor" href="#_4-新建-restful-api-接口"><span><a href="#_4-%E6%96%B0%E5%BB%BA-restful-api-%E6%8E%A5%E5%8F%A3">#</a> 4. 新建 RESTful API 接口</span></a></h2><p>① 在 <code>controller.admin</code> 包，新建一个 DemoTestController 类，并新建一个 <code>/demo/test/get</code> 接口。代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>package cn.iocoder.yudao.module.demo.controller.admin;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import cn.iocoder.yudao.framework.common.pojo.CommonResult;</span></span>
<span class="line"><span>import io.swagger.v3.oas.annotations.tags.Tag;</span></span>
<span class="line"><span>import io.swagger.v3.oas.annotations.Operation;</span></span>
<span class="line"><span>import org.springframework.validation.annotation.Validated;</span></span>
<span class="line"><span>import org.springframework.web.bind.annotation.GetMapping;</span></span>
<span class="line"><span>import org.springframework.web.bind.annotation.RequestMapping;</span></span>
<span class="line"><span>import org.springframework.web.bind.annotation.RestController;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import static cn.iocoder.yudao.framework.common.pojo.CommonResult.success;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Tag(name = &quot;管理后台 - Test&quot;)</span></span>
<span class="line"><span>@RestController</span></span>
<span class="line"><span>@RequestMapping(&quot;/demo/test&quot;)</span></span>
<span class="line"><span>@Validated</span></span>
<span class="line"><span>public class DemoTestController {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @GetMapping(&quot;/get&quot;)</span></span>
<span class="line"><span>    @Operation(summary = &quot;获取 test 信息&quot;)</span></span>
<span class="line"><span>    public CommonResult&lt;String&gt; get() {</span></span>
<span class="line"><span>        return success(&quot;true&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>，<code>/demo</code> 是该模块所有 RESTful API 的基础路径，<code>/test</code> 是 Test 功能的基础路径。</p><p>① 在 <code>controller.app</code> 包，新建一个 AppDemoTestController 类，并新建一个 <code>/demo/test/get</code> 接口。代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>package cn.iocoder.yudao.module.demo.controller.app;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import cn.iocoder.yudao.framework.common.pojo.CommonResult;</span></span>
<span class="line"><span>import io.swagger.v3.oas.annotations.tags.Tag;</span></span>
<span class="line"><span>import io.swagger.v3.oas.annotations.Operation;</span></span>
<span class="line"><span>import org.springframework.validation.annotation.Validated;</span></span>
<span class="line"><span>import org.springframework.web.bind.annotation.GetMapping;</span></span>
<span class="line"><span>import org.springframework.web.bind.annotation.RequestMapping;</span></span>
<span class="line"><span>import org.springframework.web.bind.annotation.RestController;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import static cn.iocoder.yudao.framework.common.pojo.CommonResult.success;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Tag(name = &quot;用户 App - Test&quot;)</span></span>
<span class="line"><span>@RestController</span></span>
<span class="line"><span>@RequestMapping(&quot;/demo/test&quot;)</span></span>
<span class="line"><span>@Validated</span></span>
<span class="line"><span>public class AppDemoTestController {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @GetMapping(&quot;/get&quot;)</span></span>
<span class="line"><span>    @Operation(summary = &quot;获取 test 信息&quot;)</span></span>
<span class="line"><span>    public CommonResult&lt;String&gt; get() {</span></span>
<span class="line"><span>        return success(&quot;true&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Controller 的命名上，额外增加 <strong>App</strong> 作为前缀，一方面区分是管理后台还是用户 App 的 Controller，另一方面避免 Spring Bean 的名字冲突。</p><p>可能你会奇怪，这里我们定义了两个 <code>/demo/test/get</code> 接口，会不会存在重复导致冲突呢？答案，当然是并不会。原因是：</p><ul><li><code>controller.admin</code> 包下的接口，默认会增加 <code>/admin-api</code>，即最终的访问地址是 <code>/admin-api/demo/test/get</code></li><li><code>controller.app</code> 包下的接口，默认会增加 <code>/app-api</code>，即最终的访问地址是 <code>/app-api/demo/test/get</code></li></ul><h2 id="_5-启动-demo-服务" tabindex="-1"><a class="header-anchor" href="#_5-启动-demo-服务"><span><a href="#_5-%E5%90%AF%E5%8A%A8-demo-%E6%9C%8D%E5%8A%A1">#</a> 5. 启动 demo 服务</span></a></h2><p>① 运行 SystemServerApplication 类，将 <code>system</code> 服务启动。运行 InfraServerApplication 类，将 <code>infra</code> 服务启动。</p><p>② 运行 DemoServerApplication 类，将新建的 <code>demo</code> 服务进行启动。启动完成后，使用浏览器打开 <a href="http://127.0.0.1:48099/doc.html" target="_blank" rel="noopener noreferrer">http://127.0.0.1:48099/doc.html</a> 地址，进入该服务的 Swagger 接口文档。</p><p>③ 打开“管理后台 - Test”接口，进行 <code>/admin-api/demo/test/get</code> 接口的调试，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/新建服务/48.png" alt="测试  接口" tabindex="0" loading="lazy"><figcaption>测试 接口</figcaption></figure><p>④ 打开“用户 App - Test”接口，进行 <code>/app-api/demo/test/get</code> 接口的调试，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/新建服务/49.png" alt="测试  接口" tabindex="0" loading="lazy"><figcaption>测试 接口</figcaption></figure><h2 id="_6-网关配置" tabindex="-1"><a class="header-anchor" href="#_6-网关配置"><span><a href="#_6-%E7%BD%91%E5%85%B3%E9%85%8D%E7%BD%AE">#</a> 6. 网关配置</span></a></h2><p>① 打开 <code>yudao-gateway</code> 网关项目的 <code>application.yml</code> 配置文件，增加 <code>demo</code> 服务的路由配置。代码如下：</p><figure><img src="https://cloud.iocoder.cn/img/新建服务/102.png" alt="网关路由配置" tabindex="0" loading="lazy"><figcaption>网关路由配置</figcaption></figure><p>友情提示：图中的 /v2/ 都改成 /v3/，或者以下面的文字为准！！！</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>        - id: demo-admin-api # 路由的编号</span></span>
<span class="line"><span>          uri: grayLb://demo-server</span></span>
<span class="line"><span>          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组</span></span>
<span class="line"><span>            - Path=/admin-api/demo/**</span></span>
<span class="line"><span>          filters:</span></span>
<span class="line"><span>            - RewritePath=/admin-api/demo/v3/api-docs, /v3/api-docs # 配置，保证转发到 /v2/api-docs</span></span>
<span class="line"><span>        - id: demo-app-api # 路由的编号</span></span>
<span class="line"><span>          uri: grayLb://demo-server</span></span>
<span class="line"><span>          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组</span></span>
<span class="line"><span>            - Path=/app-api/demo/**</span></span>
<span class="line"><span>          filters:</span></span>
<span class="line"><span>            - RewritePath=/app-api/demo/v3/api-docs, /v3/api-docs</span></span></code></pre></div><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>      - name: demo-server</span></span>
<span class="line"><span>        service-name: demo-server</span></span>
<span class="line"><span>        url: /admin-api/demo/v3/api-docs</span></span></code></pre></div><p>② 运行 GatewayServerApplication 类，将 <code>gateway</code> 网关服务启动。</p><p>③ 使用浏览器打开 <a href="http://127.0.0.1:48080/doc.html" target="_blank" rel="noopener noreferrer">http://127.0.0.1:48080/doc.html</a> 地址，进入网关的 Swagger 接口文档。然后，选择 <code>demo-server</code> 服务，即可进行 <code>/admin-api/demo/test/get</code> 和 <code>/app-api/demo/test/get</code> 接口的调试，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/新建服务/103.png" alt="网关 Swagger 接口文档" tabindex="0" loading="lazy"><figcaption>网关 Swagger 接口文档</figcaption></figure>`,77))])}const g=e(o,[["render",v],["__file","module-new.html.vue"]]),b=JSON.parse('{"path":"/project/yudao-cloud/module-new.html","title":"新建服务","lang":"en-US","frontmatter":{"title":"新建服务","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":18,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 👍 相关视频教程","slug":"👍-相关视频教程","link":"#👍-相关视频教程","children":[]},{"level":2,"title":"# 1. 新建 demo 模块","slug":"_1-新建-demo-模块","link":"#_1-新建-demo-模块","children":[]},{"level":2,"title":"# 2. 新建 demo-api 子模块","slug":"_2-新建-demo-api-子模块","link":"#_2-新建-demo-api-子模块","children":[]},{"level":2,"title":"# 3. 新建 demo-biz 子模块","slug":"_3-新建-demo-biz-子模块","link":"#_3-新建-demo-biz-子模块","children":[]},{"level":2,"title":"# 4. 新建 RESTful API 接口","slug":"_4-新建-restful-api-接口","link":"#_4-新建-restful-api-接口","children":[]},{"level":2,"title":"# 5. 启动 demo 服务","slug":"_5-启动-demo-服务","link":"#_5-启动-demo-服务","children":[]},{"level":2,"title":"# 6. 网关配置","slug":"_6-网关配置","link":"#_6-网关配置","children":[]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":15.97,"words":4791},"filePathRelative":"project/yudao-cloud/module-new.md","localizedDate":"July 7, 2024"}');export{g as comp,b as data};
