import{_ as p,g as c,o as r,c as t,a as l,e as a,h as e,f as s,w as d}from"./app-5QVbWi7Z.js";const o={};function u(L,n){const i=c("RouteLink");return r(),t("div",null,[n[12]||(n[12]=l('<h1 id="【交易】交易订单" tabindex="-1"><a class="header-anchor" href="#【交易】交易订单"><span>【交易】交易订单</span></a></h1><h2 id="_1-表结构" tabindex="-1"><a class="header-anchor" href="#_1-表结构"><span><a href="#_1-%E8%A1%A8%E7%BB%93%E6%9E%84">#</a> 1. 表结构</span></a></h2><p>交易订单，由 <code>yudao-module-trade-biz</code> 后端模块的 <code>order</code> 包实现，分成三个表：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/交易订单/表关系.png" alt="表关系" tabindex="0" loading="lazy"><figcaption>表关系</figcaption></figure><ul><li><code>trade_order</code> 订单主表</li><li><code>trade_order_item</code> 订单项子表</li><li><code>trade_order_log</code> 订单日志表</li></ul><h3 id="_1-订单表" tabindex="-1"><a class="header-anchor" href="#_1-订单表"><span><a href="#_1-%E8%AE%A2%E5%8D%95%E8%A1%A8">#</a> 1. 订单表</span></a></h3><blockquote><p>省略 creator/create_time/updater/update_time/deleted/tenant_id 等通用字段</p></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE `trade_order`  (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;订单编号&#39;,</span></span>\n<span class="line"><span>  `no` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT &#39;订单流水号&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `type` int NOT NULL DEFAULT 0 COMMENT &#39;订单类型&#39;,</span></span>\n<span class="line"><span>  `seckill_activity_id` bigint NULL DEFAULT NULL COMMENT &#39;秒杀活动编号&#39;,</span></span>\n<span class="line"><span>  `bargain_activity_id` bigint NULL DEFAULT NULL COMMENT &#39;砍价活动编号&#39;,</span></span>\n<span class="line"><span>  `bargain_record_id` bigint NULL DEFAULT NULL COMMENT &#39;砍价记录编号&#39;,</span></span>\n<span class="line"><span>  `combination_activity_id` bigint NULL DEFAULT NULL COMMENT &#39;拼团活动编号&#39;,</span></span>\n<span class="line"><span>  `combination_head_id` bigint NULL DEFAULT NULL COMMENT &#39;拼团团长编号&#39;,</span></span>\n<span class="line"><span>  `combination_record_id` bigint NULL DEFAULT NULL COMMENT &#39;拼团记录编号&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `user_id` bigint UNSIGNED NOT NULL COMMENT &#39;用户编号&#39;,</span></span>\n<span class="line"><span>  `terminal` int NOT NULL COMMENT &#39;订单来源终端&#39;,</span></span>\n<span class="line"><span>  `user_ip` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL DEFAULT &#39;&#39; COMMENT &#39;用户 IP&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `status` int NOT NULL DEFAULT 0 COMMENT &#39;订单状态&#39;,</span></span>\n<span class="line"><span>  `cancel_type` int NULL DEFAULT NULL COMMENT &#39;取消类型&#39;,</span></span>\n<span class="line"><span>  `comment_status` bit(1) NOT NULL DEFAULT b&#39;0&#39; COMMENT &#39;是否评价&#39;,</span></span>\n<span class="line"><span>  `cancel_time` datetime NULL DEFAULT NULL COMMENT &#39;订单取消时间&#39;,</span></span>\n<span class="line"><span>  `finish_time` datetime NULL DEFAULT NULL COMMENT &#39;订单完成时间&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `user_remark` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT &#39;用户备注&#39;,</span></span>\n<span class="line"><span>  `product_count` int NOT NULL COMMENT &#39;购买的商品数量&#39;,</span></span>\n<span class="line"><span>  `remark` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT &#39;商家备注&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `brokerage_user_id` bigint NULL DEFAULT NULL COMMENT &#39;推广人编号&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `pay_order_id` bigint NULL DEFAULT NULL COMMENT &#39;支付订单编号&#39;,</span></span>\n<span class="line"><span>  `pay_status` bit(1) NOT NULL DEFAULT b&#39;0&#39; COMMENT &#39;是否已支付：[0:未支付 1:已经支付过]&#39;,</span></span>\n<span class="line"><span>  `pay_time` datetime NULL DEFAULT NULL COMMENT &#39;订单支付时间&#39;,</span></span>\n<span class="line"><span>  `pay_channel_code` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT &#39;支付成功的支付渠道&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `total_price` int NOT NULL DEFAULT 0 COMMENT &#39;商品原价（总），单位：分&#39;,</span></span>\n<span class="line"><span>  `discount_price` int NOT NULL DEFAULT 0 COMMENT &#39;订单优惠（总），单位：分&#39;,</span></span>\n<span class="line"><span>  `delivery_price` int NOT NULL DEFAULT 0 COMMENT &#39;运费金额，单位：分&#39;,</span></span>\n<span class="line"><span>  `adjust_price` int NOT NULL DEFAULT 0 COMMENT &#39;订单调价（总），单位：分&#39;,</span></span>\n<span class="line"><span>  `pay_price` int NOT NULL DEFAULT 0 COMMENT &#39;应付金额（总），单位：分&#39;,</span></span>\n<span class="line"><span>  `coupon_price` int NOT NULL DEFAULT 0 COMMENT &#39;优惠劵减免金额，单位：分&#39;,</span></span>\n<span class="line"><span>  `point_price` int NOT NULL DEFAULT 0 COMMENT &#39;积分抵扣的金额&#39;,</span></span>\n<span class="line"><span>  `vip_price` int NOT NULL DEFAULT 0 COMMENT &#39;VIP 减免金额，单位：分&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `coupon_id` bigint UNSIGNED NULL DEFAULT NULL COMMENT &#39;优惠劵编号&#39;,</span></span>\n<span class="line"><span>  `use_point` int NOT NULL DEFAULT 0 COMMENT &#39;使用的积分&#39;,</span></span>\n<span class="line"><span>  `give_point` int NOT NULL DEFAULT 0 COMMENT &#39;赠送的积分&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `refund_status` tinyint NOT NULL DEFAULT 0 COMMENT &#39;售后状态&#39;,</span></span>\n<span class="line"><span>  `refund_point` int NOT NULL DEFAULT 0 COMMENT &#39;退还的使用的积分&#39;,</span></span>\n<span class="line"><span>  `refund_price` int NOT NULL DEFAULT 0 COMMENT &#39;退款金额，单位：分&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `delivery_type` tinyint NOT NULL COMMENT &#39;配送类型&#39;,</span></span>\n<span class="line"><span>  `logistics_id` bigint NULL DEFAULT NULL COMMENT &#39;发货物流公司编号&#39;,</span></span>\n<span class="line"><span>  `logistics_no` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT &#39;物流公司单号&#39;,</span></span>\n<span class="line"><span>  `delivery_time` datetime NULL DEFAULT NULL COMMENT &#39;发货时间&#39;,</span></span>\n<span class="line"><span>  `receive_time` datetime NULL DEFAULT NULL COMMENT &#39;收货时间&#39;,</span></span>\n<span class="line"><span>  `receiver_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT &#39;收件人名称&#39;,</span></span>\n<span class="line"><span>  `receiver_mobile` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT &#39;收件人手机&#39;,</span></span>\n<span class="line"><span>  `receiver_area_id` int NULL DEFAULT NULL COMMENT &#39;收件人地区编号&#39;,</span></span>\n<span class="line"><span>  `receiver_detail_address` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT &#39;收件人详细地址&#39;,</span></span>\n<span class="line"><span>  `pick_up_store_id` bigint NULL DEFAULT NULL COMMENT &#39;自提门店编号&#39;,</span></span>\n<span class="line"><span>  `pick_up_verify_code` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT &#39;自提核销码&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  PRIMARY KEY (`id`) USING BTREE</span></span>\n<span class="line"><span>) ENGINE = InnoDB AUTO_INCREMENT = 128 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_bin COMMENT = &#39;交易订单表&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字段还是非常多的，我们来分块来看看。</p><p>① <code>no</code> 字段：订单流水号，主要展示给用户看，由 TradeNoRedisDAO 的 <code>#generate(...)</code> 方法生成。</p><p>而 <code>id</code> 字段是数据库自增的订单编号，系统内部使用，一般不展示给用户查看。</p><p>② <code>type</code> 字段：订单类型，使用 TradeOrderTypeEnum 枚举，目前有 4 种类型的订单：</p><ul><li>普通：一般情况下的订单，未参与秒杀、砍价、拼团活动</li><li>秒杀：参与秒杀活动，会关联 <code>seckill_activity_id</code> 字段</li><li>砍价：参与砍价活动，会关联 <code>bargain_activity_id</code>、<code>bargain_record_id</code> 字段</li><li>拼团：参与拼团活动，会关联 <code>combination_activity_id</code>、<code>combination_head_id</code>、<code>combination_record_id</code> 字段</li></ul><p>③ 【用户】<code>user_id</code>、<code>terminal</code>、<code>user_ip</code> 字段：下单的用户信息。</p><p>④ 【状态】<code>status</code> 字段：订单状态，由 TradeOrderStatusEnum 枚举，流转状态如下图：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/交易订单/订单状态流转.png" alt="订单状态流转" tabindex="0" loading="lazy"><figcaption>订单状态流转</figcaption></figure><p><code>cancel_type</code> 字段：取消类型，标记 <code>status</code> 为“已取消”的原因，由 TradeOrderCancelTypeEnum 枚举，例如说：超时未支付、退款关闭、买家取消。</p><p><code>comment_status</code> 字段：订单是否评价。目的是，uni-app 筛选未评价的订单列表，也有商城系统会该字段融合到 <code>status</code> 作为“待评价”状态。</p><p>⑤ 【支付】<code>pay_status</code> 字段：是否已支付。由于订单可以全部退款变成“已关闭”状态，所以需要 <code>pay_status</code> 区分该订单实际是否发生过支付。</p>',19)),a("p",null,[n[1]||(n[1]=a("code",null,"pay_order_id",-1)),n[2]||(n[2]=e(" 字段：关联的支付中心的支付单号。对支付中心还不了解的同学，可以阅读下 ")),s(i,{to:"/pay/build/"},{default:d(()=>n[0]||(n[0]=[e("《支付手册》")])),_:1}),n[3]||(n[3]=e(" 文档。"))]),n[13]||(n[13]=l('<p>⑥ 【价格】各种价格字段，最终使用 <code>pay_price</code> 字段进行支付，分类如下：</p><ul><li><code>+</code> 收钱：<code>total_price</code>、<code>delivery_price</code></li><li><code>-</code> 优惠：<code>discount_price</code>、<code>coupon_price</code>、<code>point_price</code>、<code>vip_price</code></li><li><code>?</code> 改价：<code>adjust_price</code></li></ul><p>价格字段拆的这些细，主要是 uni-app 或者管理后台需要展示，同时我们也需要搞清楚一个订单的具体价格明细。</p><p>⑦ 【营销】<code>coupon_id</code>、<code>use_point</code>、<code>give_point</code> 字段：优惠劵、积分相关信息。</p><p>⑧ 【退款】<code>refund_status</code> 字段：订单的整体售后（退款）状态，由 TradeOrderRefundStatusEnum 枚举，有 3 种状态：未退款、部分退款、全部退款。如果全部退款，则订单 <code>status</code> 变成“已关闭”。</p><p><code>refund_point</code>、<code>refund_price</code> 字段：退款的积分、金额。</p><p>⑨ 【配送】<code>delivery_type</code> 字段：配送类型，由 DeliveryTypeEnum 枚举，有 2 种类型：</p><ul><li>快递发货：使用 <code>logistics_id</code>、<code>logistics_no</code>、<code>receiver_name</code>、<code>receiver_mobile</code>、<code>receiver_area_id</code>、<code>receiver_detail_address</code> 字段</li><li>用户自提：使用 <code>pick_up_store_id</code>、<code>pick_up_verify_code</code> 字段</li></ul><p>⑩ 各种 <code>_time</code> 结尾的字段，就是各种阶段、操作的时间，满足业务查询、统计需求。</p><h3 id="_1-2-订单项表" tabindex="-1"><a class="header-anchor" href="#_1-2-订单项表"><span><a href="#_1-2-%E8%AE%A2%E5%8D%95%E9%A1%B9%E8%A1%A8">#</a> 1.2 订单项表</span></a></h3><blockquote><p>省略 creator/create_time/updater/update_time/deleted/tenant_id 等通用字段</p></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE `trade_order_item`  (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;订单项编号&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `user_id` bigint UNSIGNED NOT NULL COMMENT &#39;用户编号&#39;,</span></span>\n<span class="line"><span>  `order_id` bigint UNSIGNED NOT NULL COMMENT &#39;订单编号&#39;,</span></span>\n<span class="line"><span>  `cart_id` bigint UNSIGNED NULL DEFAULT NULL COMMENT &#39;购物车项编号&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `spu_id` bigint UNSIGNED NOT NULL COMMENT &#39;商品 SPU 编号&#39;,</span></span>\n<span class="line"><span>  `spu_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT &#39;商品 SPU 名称&#39;,</span></span>\n<span class="line"><span>  `sku_id` bigint UNSIGNED NOT NULL COMMENT &#39;商品 SKU 编号&#39;,</span></span>\n<span class="line"><span>  `properties` json NULL COMMENT &#39;商品属性数组，JSON 格式&#39;,</span></span>\n<span class="line"><span>  `pic_url` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT &#39;商品图片&#39;,</span></span>\n<span class="line"><span>  `count` int NOT NULL COMMENT &#39;购买数量&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `comment_status` bit(1) NOT NULL DEFAULT b&#39;0&#39; COMMENT &#39;是否评价&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `price` int NOT NULL DEFAULT 0 COMMENT &#39;商品原价（单），单位：分&#39;,</span></span>\n<span class="line"><span>  `discount_price` int NOT NULL DEFAULT 0 COMMENT &#39;商品级优惠（总），单位：分&#39;,</span></span>\n<span class="line"><span>  `delivery_price` int NOT NULL DEFAULT 0 COMMENT &#39;运费金额，单位：分&#39;,</span></span>\n<span class="line"><span>  `adjust_price` int NOT NULL DEFAULT 0 COMMENT &#39;订单调价（总），单位：分&#39;,</span></span>\n<span class="line"><span>  `pay_price` int NOT NULL DEFAULT 0 COMMENT &#39;子订单实付金额（总），不算主订单分摊金额，单位：分&#39;,</span></span>\n<span class="line"><span>  `coupon_price` int NOT NULL DEFAULT 0 COMMENT &#39;优惠劵减免金额，单位：分&#39;,</span></span>\n<span class="line"><span>  `point_price` int NOT NULL DEFAULT 0 COMMENT &#39;积分抵扣的金额&#39;,</span></span>\n<span class="line"><span>  `vip_price` int NOT NULL DEFAULT 0 COMMENT &#39;VIP 减免金额，单位：分&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `use_point` int NOT NULL DEFAULT 0 COMMENT &#39;使用的积分&#39;,</span></span>\n<span class="line"><span>  `give_point` int NOT NULL DEFAULT 0 COMMENT &#39;赠送的积分&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `after_sale_id` bigint UNSIGNED NULL DEFAULT NULL COMMENT &#39;售后订单编号&#39;,</span></span>\n<span class="line"><span>  `after_sale_status` int NOT NULL DEFAULT 0 COMMENT &#39;售后状态&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`) USING BTREE</span></span>\n<span class="line"><span>) ENGINE = InnoDB AUTO_INCREMENT = 124 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_bin COMMENT = &#39;交易订单明细表&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字段也是非常多，但是和订单表类似，我们也来分块来看看。</p><p>① 【用户】<code>user_id</code> 字段：对应的用户编号。</p><p>② 【订单】<code>order_id</code> 字段：关联的订单编号。</p><p>③ 【商品】<code>spu_id</code>、<code>spu_name</code>、<code>sku_id</code>、<code>properties</code>、<code>pic_url</code>、<code>count</code> 字段：商品 SPU、SKU 相关信息。用户下单的每个 SKU 会对应一条 <code>trade_order_item</code> 记录。</p><p>④ 【状态】<code>comment_status</code> 字段：订单项是否评价。</p><p>⑤ 【价格】<code>price</code>、<code>discount_price</code>、<code>delivery_price</code>、<code>adjust_price</code>、<code>pay_price</code>、<code>coupon_price</code>、<code>point_price</code>、<code>vip_price</code> 字段：订单项的价格信息。</p><p>⑥ 【营销】<code>use_point</code>、<code>give_point</code> 字段：订单项的积分信息。</p><p>⑦ 【售后】<code>after_sale_id</code>、<code>after_sale_status</code> 字段：订单项的售后信息。每个订单项只能发起一次售后，所以这里只有一个 <code>after_sale_id</code> 字段。</p><h3 id="_1-3-订单日志表" tabindex="-1"><a class="header-anchor" href="#_1-3-订单日志表"><span><a href="#_1-3-%E8%AE%A2%E5%8D%95%E6%97%A5%E5%BF%97%E8%A1%A8">#</a> 1.3 订单日志表</span></a></h3><blockquote><p>省略 creator/create_time/updater/update_time/deleted/tenant_id 等通用字段</p></blockquote><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE `trade_order_log`  (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;日志主键&#39;,</span></span>\n<span class="line"><span>  `user_id` bigint NOT NULL COMMENT &#39;用户编号&#39;,</span></span>\n<span class="line"><span>  `user_type` tinyint NOT NULL DEFAULT 0 COMMENT &#39;用户类型&#39;,</span></span>\n<span class="line"><span>  `order_id` bigint NOT NULL COMMENT &#39;订单号&#39;,</span></span>\n<span class="line"><span>  `before_status` tinyint NULL DEFAULT NULL COMMENT &#39;操作前状态&#39;,</span></span>\n<span class="line"><span>  `after_status` tinyint NULL DEFAULT NULL COMMENT &#39;操作后状态&#39;,</span></span>\n<span class="line"><span>  `operate_type` int NOT NULL DEFAULT 0 COMMENT &#39;操作类型&#39;,</span></span>\n<span class="line"><span>  `content` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &#39;&#39; COMMENT &#39;操作内容&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`) USING BTREE</span></span>\n<span class="line"><span>) ENGINE = InnoDB AUTO_INCREMENT = 8602 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = &#39;交易订单日志&#39;;</span></span></code></pre></div><p>每次订单状态变更，都会记录一条日志，方便后续查询、统计。</p><p>通过 <code>@TradeOrderLog</code> 注解，基于 Spring AOP 实现记录，具体可以看看 TradeOrderLogAspect 类。</p><h2 id="_2-订单流程" tabindex="-1"><a class="header-anchor" href="#_2-订单流程"><span><a href="#_2-%E8%AE%A2%E5%8D%95%E6%B5%81%E7%A8%8B">#</a> 2. 订单流程</span></a></h2><p>本小节，我们按照订单的 <code>结算 =&gt; 提交 =&gt; 支付 =&gt; 发货 =&gt; 收货 =&gt; 评价</code> 流程，来看看订单的各个阶段。</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/交易订单/订单流程.png" alt="订单流程" tabindex="0" loading="lazy"><figcaption>订单流程</figcaption></figure><figure><img src="https://cloud.iocoder.cn/img/商城手册/交易订单/订单流程-去结算.png" alt="去结算" tabindex="0" loading="lazy"><figcaption>去结算</figcaption></figure><h3 id="_2-1-结算【买家】" tabindex="-1"><a class="header-anchor" href="#_2-1-结算【买家】"><span><a href="#_2-1-%E7%BB%93%E7%AE%97%E3%80%90%E4%B9%B0%E5%AE%B6%E3%80%91">#</a> 2.1 结算【买家】</span></a></h3><p>① 前端对应 <code>yudao-mall-uniapp</code> 项目的 <code>pages/order/confirm.vue</code> 页面，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/交易订单/订单结算页-移动端.png" alt="订单结算页" tabindex="0" loading="lazy"><figcaption>订单结算页</figcaption></figure><p>② 后端对应 AppTradeOrderController 的 <code>#settlementOrder(...)</code> 提供的“获得订单结算信息”接口，核心的价格计算通过 TradePriceCalculator 实现。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/交易订单/订单结算页-TradePriceCalculator.png" alt="TradePriceCalculator 类图" tabindex="0" loading="lazy"><figcaption>TradePriceCalculator 类图</figcaption></figure><p>TradePriceCalculator 只是一个接口，它有多个实现类，满足不同的价格计算组合：</p><ul><li>优惠劵：TradeCouponPriceCalculator</li><li>运费：TradeDeliveryPriceCalculator</li><li>积分：TradePointUsePriceCalculator、TradePointGiveCalculator</li><li>VIP：TradeMemberLevelPriceCalculator</li><li>限时折扣：TradeDiscountActivityPriceCalculator</li><li>满减送：TradeRewardActivityPriceCalculator</li><li>拼团：TradeCombinationActivityPriceCalculator</li><li>秒杀：TradeSeckillActivityPriceCalculator</li><li>砍价：TradeBargainActivityPriceCalculator</li></ul><h3 id="_2-2-提交【买家】" tabindex="-1"><a class="header-anchor" href="#_2-2-提交【买家】"><span><a href="#_2-2-%E6%8F%90%E4%BA%A4%E3%80%90%E4%B9%B0%E5%AE%B6%E3%80%91">#</a> 2.2 提交【买家】</span></a></h3><p>点击「提交订单」按钮后，会调用 AppTradeOrderController 的 <code>#submitOrder(...)</code> 提供的“提交订单”接口，插入一条 <code>trade_order</code>、多条 <code>trade_order_item</code> 记录。</p><p>订单状态：待支付</p><p>由于这个过程中会涉及到很多业务，所以我们把它们抽象成一个又一个 TradeOrderHandler 实现，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/交易订单/订单提交-后端.png" alt="TradeOrderHandler 实现类" tabindex="0" loading="lazy"><figcaption>TradeOrderHandler 实现类</figcaption></figure><ul><li>库存扣减：TradeProductSkuOrderHandler</li><li>积分扣减：TradeMemberPointOrderHandler</li><li>优惠劵使用：TradeCouponOrderHandler</li><li>订单分销：TradeBrokerageOrderHandler</li><li>拼团处理：TradeCombinationOrderHandler</li><li>秒杀处理：TradeSeckillOrderHandler</li><li>砍价处理：TradeBargainOrderHandler</li></ul><h3 id="_2-3-支付【买家】" tabindex="-1"><a class="header-anchor" href="#_2-3-支付【买家】"><span><a href="#_2-3-%E6%94%AF%E4%BB%98%E3%80%90%E4%B9%B0%E5%AE%B6%E3%80%91">#</a> 2.3 支付【买家】</span></a></h3><p>① 订单提交成功后，会进入支付页面，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/交易订单/订单支付页-支付选择.png" alt="订单支付页" tabindex="0" loading="lazy"><figcaption>订单支付页</figcaption></figure>',45)),a("p",null,[n[6]||(n[6]=e("这块已经在 ")),s(i,{to:"/pay/wx-pub-pay-demo/"},{default:d(()=>n[4]||(n[4]=[e("《微信公众号支付接入》")])),_:1}),n[7]||(n[7]=e("、")),s(i,{to:"/pay/wx-lite-pay-demo/"},{default:d(()=>n[5]||(n[5]=[e("《微信小程序支付接入》")])),_:1}),n[8]||(n[8]=e(" 文档中介绍过了，这里就不再赘述。"))]),n[14]||(n[14]=l('<p>② 支付成功后，【支付中心】会回调 AppTradeOrderController 的 <code>#updateOrderPaid(...)</code> 提供的“支付成功回调”接口，更新 <code>trade_order</code> 为已支付（待发货）。</p><p>订单状态：待发货（已支付）</p><p>③ 支付成功后，【前端】会跳转到“支付结果”页面，对应 <code>yudao-mall-uniapp</code> 项目的 <code>pages/pay/result.vue</code> 页面。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/交易订单/订单支付页-结果.png" alt="支付结果页" tabindex="0" loading="lazy"><figcaption>支付结果页</figcaption></figure><p>④ 点击「查看订单」按钮，进入我的订单列表，对应 <code>yudao-mall-uniapp</code> 项目的 <code>pages/order/list.vue</code> 页面。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/交易订单/订单支付页-订单列表.png" alt="订单列表页" tabindex="0" loading="lazy"><figcaption>订单列表页</figcaption></figure><p>⑤ 点击某个订单，进入订单详情，对应 <code>yudao-mall-uniapp</code> 项目的 <code>pages/order/detail.vue</code> 页面。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/交易订单/订单支付页-订单详情.png" alt="订单详情页" tabindex="0" loading="lazy"><figcaption>订单详情页</figcaption></figure><p>此时，需要等待卖家发货。</p><h3 id="_2-4-发货【卖家】" tabindex="-1"><a class="header-anchor" href="#_2-4-发货【卖家】"><span><a href="#_2-4-%E5%8F%91%E8%B4%A7%E3%80%90%E5%8D%96%E5%AE%B6%E3%80%91">#</a> 2.4 发货【卖家】</span></a></h3><p>① 卖家可以在订单列表进行发货，对应 [商城系统 -&gt; 订单中心 -&gt; 订单列表] 菜单，对应 <code>yudao-ui-admin-vue3</code> 项目的 <code>@/views/trade/order</code> 目录。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/交易订单/订单发货页-订单列表.png" alt="订单列表" tabindex="0" loading="lazy"><figcaption>订单列表</figcaption></figure><p>当然，也可以在订单详情页进行发货，点击「详情」按钮进入，对应 <code>yudao-ui-admin-vue3</code> 项目的 <code>@/views/trade/order/detail.vue</code> 文件。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/交易订单/订单发货页-订单详情.png" alt="订单详情" tabindex="0" loading="lazy"><figcaption>订单详情</figcaption></figure><p>② 卖家点击「发货」按钮，进入发货页面，对应 <code>yudao-ui-admin-vue3</code> 项目的 <code>@/views/trade/order/delivery.vue</code> 文件。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/交易订单/订单发货页-发货弹窗.png" alt="发货弹窗" tabindex="0" loading="lazy"><figcaption>发货弹窗</figcaption></figure><p>这里，我们选择物流公司为“申通快递”，并输入物流单号为“777168349863987”（因为它有真实物流数据），点击「确定」按钮，完成发货，更新 <code>trade_order</code> 为已发货（待收货）。</p><p>订单状态：已发货（待收货）</p><h3 id="_2-5-收货【买家】" tabindex="-1"><a class="header-anchor" href="#_2-5-收货【买家】"><span><a href="#_2-5-%E6%94%B6%E8%B4%A7%E3%80%90%E4%B9%B0%E5%AE%B6%E3%80%91">#</a> 2.5 收货【买家】</span></a></h3><p>① 买家点击「查看物流」按钮，进入物流详情页，对应 <code>yudao-mall-uniapp</code> 项目的 <code>pages/order/express/log.vue</code> 页面。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/交易订单/订单收货-物流详情页.png" alt="物流详情页" tabindex="0" loading="lazy"><figcaption>物流详情页</figcaption></figure><p>② 物流信息，由 AppTradeOrderController 的 <code>#getOrderExpressTrackList(...)</code> 提供的“获得交易订单的物流轨迹”接口。它的核心实现由 ExpressClient 实现，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/交易订单/订单收货-ExpressClient.png" alt="ExpressClient 类图" tabindex="0" loading="lazy"><figcaption>ExpressClient 类图</figcaption></figure><ul><li>KdNiaoExpressClient：对接快递鸟的客户端，官方文档 <a href="https://www.kdniao.com/api-follow" target="_blank" rel="noopener noreferrer">https://www.kdniao.com/api-follow</a></li><li>Kd100ExpressClient：对接快递 100 的客户端，官方文档 <a href="https://api.kuaidi100.com/document/" target="_blank" rel="noopener noreferrer">https://api.kuaidi100.com/document/</a></li></ul><p>具体使用哪个客户端，可修改 <code>application.yaml</code> 配置文件的 <code>yudao.trade.express.client</code> 配置项。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/交易订单/订单收货-配置文件.png" alt="配置文件" tabindex="0" loading="lazy"><figcaption>配置文件</figcaption></figure><p>③ 回到订单详情页，点击「确认收货」按钮，完成收货，更新 <code>trade_order</code> 为已完成。</p><p>订单状态：已完成（未评价）</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/交易订单/订单收货-确认收货.png" alt="确认收货" tabindex="0" loading="lazy"><figcaption>确认收货</figcaption></figure><h3 id="_2-6-评价【买家】" tabindex="-1"><a class="header-anchor" href="#_2-6-评价【买家】"><span><a href="#_2-6-%E8%AF%84%E4%BB%B7%E3%80%90%E4%B9%B0%E5%AE%B6%E3%80%91">#</a> 2.6 评价【买家】</span></a></h3>',30)),a("p",null,[n[10]||(n[10]=e("① 买家点击「评价」按钮，进入评价页，这块已经在 ")),s(i,{to:"/mall/product-comment/"},{default:d(()=>n[9]||(n[9]=[e("《【商品】商品评价》")])),_:1}),n[11]||(n[11]=e(" 文档中介绍过了，这里就不再赘述。"))]),n[15]||(n[15]=a("p",null,[e("评价接口由 AppTradeOrderController 的 "),a("code",null,"#createOrderItemComment(...)"),e(" 所提供的“创建交易订单项的评价”接口。")],-1)),n[16]||(n[16]=a("p",null,[e("② 评价成功后，更新 "),a("code",null,"trade_order"),e(" 为已评价。")],-1)),n[17]||(n[17]=a("p",null,"订单状态：已完成（已评价）",-1)),n[18]||(n[18]=a("p",null,"至此，订单流程结束~可以试着多多 debug 调试整个流程，并不复杂噢。",-1))])}const T=p(o,[["render",u],["__file","trade-order.html.vue"]]),N=JSON.parse('{"path":"/project/yudao-cloud/mall/trade-order.html","title":"【交易】交易订单","lang":"en-US","frontmatter":{"title":"【交易】交易订单","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":100,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 表结构","slug":"_1-表结构","link":"#_1-表结构","children":[{"level":3,"title":"# 1. 订单表","slug":"_1-订单表","link":"#_1-订单表","children":[]},{"level":3,"title":"# 1.2 订单项表","slug":"_1-2-订单项表","link":"#_1-2-订单项表","children":[]},{"level":3,"title":"# 1.3 订单日志表","slug":"_1-3-订单日志表","link":"#_1-3-订单日志表","children":[]}]},{"level":2,"title":"# 2. 订单流程","slug":"_2-订单流程","link":"#_2-订单流程","children":[{"level":3,"title":"# 2.1 结算【买家】","slug":"_2-1-结算【买家】","link":"#_2-1-结算【买家】","children":[]},{"level":3,"title":"# 2.2 提交【买家】","slug":"_2-2-提交【买家】","link":"#_2-2-提交【买家】","children":[]},{"level":3,"title":"# 2.3 支付【买家】","slug":"_2-3-支付【买家】","link":"#_2-3-支付【买家】","children":[]},{"level":3,"title":"# 2.4 发货【卖家】","slug":"_2-4-发货【卖家】","link":"#_2-4-发货【卖家】","children":[]},{"level":3,"title":"# 2.5 收货【买家】","slug":"_2-5-收货【买家】","link":"#_2-5-收货【买家】","children":[]},{"level":3,"title":"# 2.6 评价【买家】","slug":"_2-6-评价【买家】","link":"#_2-6-评价【买家】","children":[]}]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":13.47,"words":4042},"filePathRelative":"project/yudao-cloud/mall/trade-order.md","localizedDate":"July 7, 2024"}');export{T as comp,N as data};
