import{_ as n,o as s,c as a,d as i}from"./app-C7tm95bn.js";const t={},l=i(`<h2 id="y-tuong" tabindex="-1"><a class="header-anchor" href="#y-tuong"><span>Ý tưởng</span></a></h2><p><strong>Bridge Pattern</strong> là một mẫu thiết kế cấu trúc, cho phép tách biệt phần <strong>trừu tượng</strong> và phần <strong>thực thi</strong>, cho phép chúng có thể thay đổi độc lập.</p><p>Nếu một hệ thống cần thêm tính linh hoạt giữa vai trò trừu tượng và vai trò cụ thể, tránh thiết lập một liên kết tĩnh giữa hai tầng. Cả vai trò trừu tượng và vai trò cụ thể đều có thể được mở rộng bằng cách tạo lớp con. Trong trường hợp này, Bridge Pattern cho phép kết hợp linh hoạt giữa các vai trò trừu tượng và vai trò cụ thể và mở rộng chúng một cách độc lập.</p><p>Yêu cầu thiết kế là bất kỳ thay đổi nào trong vai trò cụ thể không được ảnh hưởng đến khách hàng, hoặc nói cách khác, thay đổi trong vai trò cụ thể phải hoàn toàn trong suốt đối với khách hàng.</p><h2 id="cac-tinh-huong-su-dung" tabindex="-1"><a class="header-anchor" href="#cac-tinh-huong-su-dung"><span>Các tình huống sử dụng</span></a></h2><ul><li>Nếu bạn muốn phân tách hoặc tái cấu trúc một lớp phức tạp có nhiều chức năng (ví dụ: một lớp có thể tương tác với nhiều máy chủ cơ sở dữ liệu), bạn có thể sử dụng Bridge Pattern.</li><li>Nếu bạn muốn mở rộng một lớp theo nhiều chiều độc lập, bạn có thể sử dụng mẫu này.</li><li>Nếu bạn cần chuyển đổi phương pháp thực thi khác nhau trong thời gian chạy, bạn có thể sử dụng Bridge Pattern.</li></ul><h2 id="cau-truc" tabindex="-1"><a class="header-anchor" href="#cau-truc"><span>Cấu trúc</span></a></h2><figure><img src="https://raw.githubusercontent.com/vanhung4499/images/master/snap/20231006153154.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="mo-ta-cau-truc" tabindex="-1"><a class="header-anchor" href="#mo-ta-cau-truc"><span>Mô tả cấu trúc</span></a></h3><ol><li><strong>Phần trừu tượng</strong> (Abstraction) cung cấp logic điều khiển cấp cao, phụ thuộc vào đối tượng triển khai để hoàn thành công việc thực tế ở cấp thấp.</li><li><strong>Phần triển khai</strong> (Implementation) khai báo giao diện chung cho tất cả các triển khai cụ thể. Phần trừu tượng chỉ có thể tương tác với đối tượng triển khai thông qua các phương thức được khai báo ở đây. <ul><li>Phần trừu tượng có thể liệt kê các phương thức giống như phần triển khai, nhưng phần trừu tượng thường khai báo các hành vi phức tạp, phụ thuộc vào nhiều hoạt động nguyên tắc được khai báo bởi phần triển khai.</li></ul></li><li><strong>Triển khai cụ thể</strong> (Concrete Implementations) bao gồm mã cụ thể cho từng nền tảng.</li><li><strong>Phần trừu tượng tinh tế</strong> (Refined Abstraction) cung cấp biến thể của logic điều khiển. Giống như lớp cha của nó, chúng tương tác với các triển khai khác nhau thông qua giao diện triển khai chung.</li><li>Thông thường, <strong>khách hàng</strong> (Client) chỉ quan tâm cách tương tác với phần trừu tượng. Tuy nhiên, khách hàng cần kết nối đối tượng trừu tượng với một đối tượng triển khai.</li></ol><h3 id="mau-ma-cau-truc" tabindex="-1"><a class="header-anchor" href="#mau-ma-cau-truc"><span>Mẫu mã cấu trúc</span></a></h3><p>【Implementor】định nghĩa <strong>giao diện triển khai</strong>.</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">interface</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Implementor</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // Định nghĩa các chức năng cụ thể cần thiết cho phần trừu tượng</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> operationImpl</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>【Abstraction】định nghĩa <strong>giao diện trừu tượng</strong>.</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">abstract</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Abstraction</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // Giữ một đối tượng Implementor, tạo thành mối quan hệ tổng hợp</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    protected</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Implementor</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> implementor</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Abstraction</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Implementor</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;"> implementor</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">implementor</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> implementor;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // Có thể cần chuyển tiếp đến phần triển khai cụ thể để triển khai</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> operation</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        implementor</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">operationImpl</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>【ConcreteImplementor】triển khai giao diện được định nghĩa trong <strong>Implementor</strong>.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ConcreteImplementorA</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> implements</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Implementor</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    @</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> operationImpl</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // triển khai thực sự</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        System</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Triển khai cụ thể A&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ConcreteImplementorB</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> implements</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Implementor</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    @</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> operationImpl</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // triển khai thực sự</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        System</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Triển khai cụ thể B&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【RefinedAbstraction】mở rộng lớp <strong>Abstraction</strong>.</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> RefinedAbstraction</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> extends</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Abstraction</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> RefinedAbstraction</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Implementor</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;"> implementor</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        super</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(implementor);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> otherOperation</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // triển khai một số chức năng, có thể sử dụng phương thức triển khai cụ thể của phần triển khai,</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // nhưng phương thức này có thể sử dụng các phương thức được định nghĩa trong Abstraction để hoàn thành nhiều chức năng hơn.</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>【Client】</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> BridgePattern</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> static</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[] </span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        Implementor</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> implementor</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> ConcreteImplementorA</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        RefinedAbstraction</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> abstraction</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> RefinedAbstraction</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(implementor);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        abstraction</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">operation</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        abstraction</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">otherOperation</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>【Output】</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>Triển khai cụ thể A</span></span>
<span class="line"><span>Các hoạt động khác</span></span></code></pre></div><h2 id="pseudocode" tabindex="-1"><a class="header-anchor" href="#pseudocode"><span>Pseudocode</span></a></h2><figure><img src="https://raw.githubusercontent.com/vanhung4499/images/master/snap/20210430170020.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>Lớp cơ bản của điều khiển từ xa khai báo một biến thành viên tham chiếu đến đối tượng thiết bị. Tất cả các điều khiển từ xa tương tác với thiết bị thông qua giao diện thiết bị chung, cho phép cùng một điều khiển từ xa hỗ trợ nhiều loại thiết bị khác nhau.</p><p>Bạn có thể phát triển các lớp điều khiển từ xa độc lập với lớp thiết bị, chỉ cần tạo một lớp con của điều khiển từ xa. Ví dụ, điều khiển từ xa cơ bản có thể chỉ có hai nút nhưng bạn có thể mở rộng chúng với các tính năng mới như một viên pin phụ hoặc một màn hình cảm ứng.</p><p>Mã khách hàng kết nối điều khiển từ xa với đối tượng thiết bị thông qua hàm tạo của điều khiển từ xa.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// Phần trừu tượng định nghĩa giao diện cho &quot;phần điều khiển&quot; của hai cấp lớp. Nó</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// giữ một tham chiếu đến đối tượng trong cấp lớp &quot;thực hiện&quot; và sẽ chuyển tiếp tất</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// cả công việc thực tế cho đối tượng đó.</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> RemoteControl</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> is</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    protected</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> field device: Device</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    constructor RemoteControl(device: Device) is</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        this.device = device</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    method togglePower() is</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        if (device.isEnabled()) then</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">            device.disable()</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        else</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">            device.enable()</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    method volumeDown() is</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        device.setVolume(device.getVolume() - 10)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    method volumeUp() is</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        device.setVolume(device.getVolume() + 10)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    method channelDown() is</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        device.setChannel(device.getChannel() - 1)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    method channelUp() is</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        device.setChannel(device.getChannel() + 1)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// Bạn có thể mở rộng lớp trừu tượng mà không phụ thuộc vào lớp thiết bị.</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> AdvancedRemoteControl</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> extends</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> RemoteControl</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> is</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    method mute() is</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        device.setVolume(0)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// Giao diện &quot;thực hiện&quot; khai báo các phương thức chung cho tất cả các lớp thực hiện.</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// Nó không cần phù hợp với giao diện trừu tượng. Trên thực tế, hai giao diện này có</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// thể hoàn toàn khác nhau. Thông thường, giao diện thực hiện chỉ cung cấp các hoạt</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// động cơ bản, trong khi giao diện trừu tượng định nghĩa các hoạt động cấp cao hơn</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// dựa trên các hoạt động cơ bản này.</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">interface </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Device</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> is</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    method isEnabled()</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    method enable()</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    method disable()</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    method getVolume()</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    method setVolume(percent)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    method getChannel()</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    method setChannel(channel)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// Tất cả các thiết bị tuân thủ cùng một giao diện.</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">class </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Tv</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> implements</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Device</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> is</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">class </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Radio</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> implements </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Device</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> is</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// Vị trí nào đó trong mã khách hàng.</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">tv = new </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Tv</span><span style="color:#E06C75;--shiki-dark:#E06C75;">()</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">remote = new </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">RemoteControl</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(tv)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">remote.togglePower()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">radio = new </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Radio</span><span style="color:#E06C75;--shiki-dark:#E06C75;">()</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">remote = new </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">AdvancedRemoteControl</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(radio)</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vi-du" tabindex="-1"><a class="header-anchor" href="#vi-du"><span>Ví dụ</span></a></h2><p><strong>Ứng dụng ví dụ:</strong> Mẫu cầu rất hữu ích khi xử lý ứng dụng đa nền tảng, hỗ trợ nhiều loại máy chủ cơ sở dữ liệu hoặc làm việc với nhiều nhà cung cấp API cụ thể (ví dụ: nền tảng đám mây và mạng xã hội).</p><p><strong>Cách nhận biết</strong>: Mẫu cầu có thể được nhận biết thông qua sự phân biệt rõ ràng giữa thực thể điều khiển và nhiều nền tảng khác nhau mà nó phụ thuộc.</p><p>Một ví dụ điển hình về việc áp dụng mẫu cầu trong Java là gói cầu của thành phần ghi nhật ký slf4j.</p><p>Giả sử bạn đang phát triển một ứng dụng và các thành phần được gọi trong ứng dụng đã sử dụng common-logging. Bây giờ bạn cần sử dụng jcl-over-slf4j.jar để chuyển hướng thông tin ghi nhật ký đến slf4j-api, sau đó slf4j-api sẽ gọi thành phần ghi nhật ký thực tế mà nó phụ thuộc. Quá trình này được gọi là cầu. Dưới đây là mô hình cầu chính thức của slf4j:</p><figure><img src="https://raw.githubusercontent.com/vanhung4499/images/master/snap/20231006153729.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="moi-quan-he-voi-cac-mau-khac" tabindex="-1"><a class="header-anchor" href="#moi-quan-he-voi-cac-mau-khac"><span>Mối quan hệ với các mẫu khác</span></a></h2><ul><li>[[Bridge Pattern]] thường được thiết kế ở giai đoạn đầu của quá trình phát triển để cho phép các phần khác nhau của chương trình hoạt động độc lập. Mặt khác, [[Adapter Pattern]] thường được sử dụng trong các chương trình đã có để cho phép các lớp không tương thích hoạt động cùng nhau.</li><li>[[Bridge Pattern]], [[State Pattern]] và [Strategy Pattern]] (bao gồm một phần [[Adapter Pattern]]) có giao diện rất tương tự. Trên thực tế, chúng đều dựa trên [[Composite Pattern]] - tức là giao việc cho các đối tượng khác nhau, nhưng lại giải quyết các vấn đề khác nhau. Mẫu không chỉ là cách tổ chức mã theo cách cụ thể, bạn cũng có thể sử dụng chúng để thảo luận với các nhà phát triển khác về các vấn đề mà mẫu giải quyết.</li></ul>`,37),e=[l];function c(r,p){return s(),a("div",null,e)}const h=n(t,[["render",c],["__file","bridge.html.vue"]]),d=JSON.parse('{"path":"/design/design-pattern/patterns/structural/bridge.html","title":"Bridge Pattern","lang":"en-US","frontmatter":{"title":"Bridge Pattern","tags":["design-pattern"],"categories":["design-pattern"],"date created":"2023-10-06T00:00:00.000Z","date modified":"2023-10-06T00:00:00.000Z","description":"Ý tưởng Bridge Pattern là một mẫu thiết kế cấu trúc, cho phép tách biệt phần trừu tượng và phần thực thi, cho phép chúng có thể thay đổi độc lập. Nếu một hệ thống cần thêm tính ...","head":[["meta",{"property":"og:url","content":"https://vanhung4499.github.io/design/design-pattern/patterns/structural/bridge.html"}],["meta",{"property":"og:site_name","content":"VanHung4499"}],["meta",{"property":"og:title","content":"Bridge Pattern"}],["meta",{"property":"og:description","content":"Ý tưởng Bridge Pattern là một mẫu thiết kế cấu trúc, cho phép tách biệt phần trừu tượng và phần thực thi, cho phép chúng có thể thay đổi độc lập. Nếu một hệ thống cần thêm tính ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/vanhung4499/images/master/snap/20231006153154.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-28T15:54:38.000Z"}],["meta",{"property":"article:author","content":"Hung Nguyen"}],["meta",{"property":"article:tag","content":"design-pattern"}],["meta",{"property":"article:modified_time","content":"2024-06-28T15:54:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bridge Pattern\\",\\"image\\":[\\"https://raw.githubusercontent.com/vanhung4499/images/master/snap/20231006153154.png\\",\\"https://raw.githubusercontent.com/vanhung4499/images/master/snap/20210430170020.png\\",\\"https://raw.githubusercontent.com/vanhung4499/images/master/snap/20231006153729.png\\"],\\"dateModified\\":\\"2024-06-28T15:54:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hung Nguyen\\",\\"url\\":\\"https://vanhung4499.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Ý tưởng","slug":"y-tuong","link":"#y-tuong","children":[]},{"level":2,"title":"Các tình huống sử dụng","slug":"cac-tinh-huong-su-dung","link":"#cac-tinh-huong-su-dung","children":[]},{"level":2,"title":"Cấu trúc","slug":"cau-truc","link":"#cau-truc","children":[{"level":3,"title":"Mô tả cấu trúc","slug":"mo-ta-cau-truc","link":"#mo-ta-cau-truc","children":[]},{"level":3,"title":"Mẫu mã cấu trúc","slug":"mau-ma-cau-truc","link":"#mau-ma-cau-truc","children":[]}]},{"level":2,"title":"Pseudocode","slug":"pseudocode","link":"#pseudocode","children":[]},{"level":2,"title":"Ví dụ","slug":"vi-du","link":"#vi-du","children":[]},{"level":2,"title":"Mối quan hệ với các mẫu khác","slug":"moi-quan-he-voi-cac-mau-khac","link":"#moi-quan-he-voi-cac-mau-khac","children":[]}],"git":{"createdTime":1719590078000,"updatedTime":1719590078000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":6.56,"words":1969},"filePathRelative":"design/design-pattern/patterns/structural/bridge.md","localizedDate":"June 28, 2024","excerpt":"<h2>Ý tưởng</h2>\\n<p><strong>Bridge Pattern</strong> là một mẫu thiết kế cấu trúc, cho phép tách biệt phần <strong>trừu tượng</strong> và phần <strong>thực thi</strong>, cho phép chúng có thể thay đổi độc lập.</p>\\n<p>Nếu một hệ thống cần thêm tính linh hoạt giữa vai trò trừu tượng và vai trò cụ thể, tránh thiết lập một liên kết tĩnh giữa hai tầng. Cả vai trò trừu tượng và vai trò cụ thể đều có thể được mở rộng bằng cách tạo lớp con. Trong trường hợp này, Bridge Pattern cho phép kết hợp linh hoạt giữa các vai trò trừu tượng và vai trò cụ thể và mở rộng chúng một cách độc lập.</p>","autoDesc":true}');export{h as comp,d as data};
