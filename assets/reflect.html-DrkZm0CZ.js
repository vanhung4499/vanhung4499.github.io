import{_ as s,o as a,c as n,d as i}from"./app-CwNOAUqW.js";const t={},l=i(`<h1 id="reflect" tabindex="-1"><a class="header-anchor" href="#reflect"><span>Reflect</span></a></h1><p>Reflect là một đối tượng tích hợp sẵn trong JavaScript, nó cung cấp các phương thức để chặn các hoạt động JavaScript. Các phương thức này tương tự như các phương thức của đối tượng xử lý. Reflect không phải là một đối tượng hàm, vì vậy nó không thể được tạo bằng cách sử dụng từ khóa <code>new</code>.</p><p>Mục đích thiết kế của Reflect là:</p><ol><li>Đưa các phương thức của đối tượng Object mà rõ ràng thuộc về ngôn ngữ (ví dụ: <code>Object.defineProperty</code>) vào đối tượng Reflect. Hiện tại, một số phương thức được triển khai cả trên đối tượng Object và Reflect, nhưng trong tương lai, các phương thức mới chỉ sẽ được triển khai trên đối tượng Reflect. Điều này có nghĩa là chúng ta có thể truy cập các phương thức thuộc ngôn ngữ từ đối tượng Reflect.</li><li>Sửa đổi kết quả trả về của một số phương thức của đối tượng Object để làm cho chúng hợp lý hơn. Ví dụ, <code>Object.defineProperty(obj, name, desc)</code> sẽ ném ra một lỗi khi không thể định nghĩa thuộc tính, trong khi <code>Reflect.defineProperty(obj, name, desc)</code> sẽ trả về <code>false</code>.</li><li>Chuyển các hoạt động <strong>lệnh</strong> của đối tượng Object thành <strong>hành vi hàm</strong>. Ví dụ, <code>name in obj</code> và <code>delete obj[name]</code> được chuyển thành <code>Reflect.has(obj, name)</code> và <code>Reflect.deleteProperty(obj, name)</code> để chúng trở thành hành vi hàm.</li><li>Các phương thức của đối tượng Reflect tương ứng một-đến-một với các phương thức của đối tượng Proxy. Điều này cho phép đối tượng Proxy dễ dàng gọi các phương thức tương ứng của Reflect để hoàn thành hành vi mặc định, đồng thời làm cơ sở cho việc sửa đổi hành vi. Nghĩa là, bất kể Proxy sửa đổi hành vi mặc định như thế nào, bạn vẫn có thể truy cập hành vi mặc định từ Reflect.</li></ol><p>Ví dụ:</p><div class="language-js" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">Proxy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  set</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">receiver</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> success</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">set</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">receiver</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E06C75;--shiki-dark:#E06C75;">success</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">      console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;property &#39;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> name</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39; on &#39;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> target</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39; set to &#39;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> successs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">});</span></span></code></pre></div><p>Trong đoạn mã trên, phương thức Proxy chặn việc gán giá trị cho thuộc tính của đối tượng <code>target</code>. Nó sử dụng phương thức <code>Reflect.set</code> để gán giá trị cho thuộc tính của đối tượng, đảm bảo hoàn thành hành vi ban đầu, sau đó triển khai chức năng bổ sung.</p><div class="language-js" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> proxy</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;get&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  deleteProperty</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;delete&#39;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">deleteProperty</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  has</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;has&#39;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">has</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">});</span></span></code></pre></div><p>Trong đoạn mã trên, mỗi hoạt động chặn của đối tượng Proxy (<code>get</code>, <code>delete</code>, <code>has</code>) đều gọi phương thức tương ứng của Reflect bên trong, đảm bảo thực hiện hành vi gốc. Công việc được thêm vào là ghi log mỗi hoạt động.</p><p>Có đối tượng Reflect, nhiều hoạt động trở nên dễ đọc hơn.</p><div class="language-js" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// Cách viết cũ</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Function</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prototype</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">apply</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">call</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Math</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">floor</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">undefined</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, [</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1.75</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// Cách viết mới</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Reflect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">apply</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Math</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">floor</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">undefined</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, [</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1.75</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 1</span></span></code></pre></div><p>Khác với hầu hết các đối tượng toàn cục khác, Reflect không có hàm tạo, bạn không thể sử dụng nó với toán tử <code>new</code> hoặc gọi đối tượng Reflect như một hàm. Tất cả các thuộc tính và phương thức của Reflect đều là tĩnh (giống như đối tượng Math).</p><h2 id="cac-phuong-thuc-tinh" tabindex="-1"><a class="header-anchor" href="#cac-phuong-thuc-tinh"><span>Các phương thức tĩnh</span></a></h2><table><thead><tr><th>Phương thức tĩnh</th><th>Mô tả</th></tr></thead><tbody><tr><td><code>Reflect.apply</code></td><td>Thực hiện gọi một hàm và truyền một mảng làm tham số, tương tự như <code>Function.prototype.apply</code></td></tr><tr><td><code>Reflect.construct</code></td><td>Thực hiện việc tạo một đối tượng từ một hàm tạo, tương đương với việc thực hiện <code>new target(…args)</code></td></tr><tr><td><code>Reflect.defineProperty</code></td><td>Tương tự như <code>Object.defineProperty</code></td></tr><tr><td><code>Reflect.deleteProperty</code></td><td>Thực hiện việc xóa một thuộc tính của đối tượng, tương đương với việc thực hiện <code>delete target[name]</code></td></tr><tr><td><code>Reflect.get</code></td><td>Lấy giá trị của một thuộc tính của đối tượng</td></tr><tr><td><code>Reflect.getOwnPropertyDescriptor</code></td><td>Tương tự như <code>Object.getOwnPropertyDescriptor</code></td></tr><tr><td><code>Reflect.getPrototypeOf</code></td><td>Tương tự như <code>Object.getPrototypeOf</code></td></tr><tr><td><code>Reflect.has</code></td><td>Kiểm tra xem một thuộc tính có tồn tại trong đối tượng hay không, tương đương với <code>in</code></td></tr><tr><td><code>Reflect.isExtensible</code></td><td>Tương tự như <code>Object.isExtensible</code></td></tr><tr><td><code>Reflect.ownKeys</code></td><td>Trả về một mảng chứa tất cả các thuộc tính riêng của đối tượng (không bao gồm thuộc tính kế thừa)</td></tr><tr><td><code>Reflect.preventExtensions</code></td><td>Tương tự như <code>Object.preventExtensions</code></td></tr><tr><td><code>Reflect.set</code></td><td>Gán giá trị cho một thuộc tính của đối tượng, trả về Boolean, nếu thành công, trả về <code>true</code></td></tr><tr><td><code>Reflect.setPrototypeOf</code></td><td>Tương tự như <code>Object.setPrototypeOf</code></td></tr></tbody></table><h2 id="uu-điem-so-voi-cac-phuong-phap-truyen-thong" tabindex="-1"><a class="header-anchor" href="#uu-điem-so-voi-cac-phuong-phap-truyen-thong"><span>Ưu điểm so với các phương pháp truyền thống</span></a></h2><p>Việc sử dụng Reflect để thao tác với đối tượng phù hợp hơn với hướng đối tượng, tất cả các phương thức thao tác với đối tượng đều được đặt trên đối tượng Reflect.</p><table><thead><tr><th></th><th>Thao tác với Reflect</th><th>Các phương pháp truyền thống để thao tác với đối tượng</th></tr></thead><tbody><tr><td>Hướng đối tượng</td><td>Tất cả các phương thức đều được đặt trên đối tượng <code>Reflect</code>, phù hợp với hướng đối tượng</td><td>Các phương thức chỉ định, <code>=</code>, <code>in</code>, <code>delete</code></td></tr><tr><td>Hàm số</td><td>Tất cả các phương thức đều là hàm số</td><td>Kết hợp giữa các lệnh, gán giá trị, và hàm số</td></tr><tr><td>Báo lỗi theo quy chuẩn</td><td><code>defineProperty</code> trả về <code>false</code> nếu không thành công, các phương thức khác báo lỗi nếu tham số không hợp lệ</td><td><code>defineProperty</code> báo lỗi nếu không thành công, các phương thức khác không báo lỗi nếu tham số không hợp lệ</td></tr><tr><td>Mở rộng phương thức</td><td>Tham số <code>receiver</code> xác định <code>this</code></td><td>Không thể mở rộng</td></tr></tbody></table><h2 id="vi-du" tabindex="-1"><a class="header-anchor" href="#vi-du"><span>Ví dụ</span></a></h2><h3 id="mo-hinh-quan-sat" tabindex="-1"><a class="header-anchor" href="#mo-hinh-quan-sat"><span>Mô hình Quan sát</span></a></h3><p>Mô hình Quan sát (Observer Pattern) đề cập đến việc tự động quan sát đối tượng dữ liệu, khi đối tượng có sự thay đổi, các hàm sẽ tự động được thực thi.</p><div class="language-js" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> person</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> observerable</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Tom&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  age</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">10</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  console</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">\`</span><span style="color:#C678DD;--shiki-dark:#C678DD;">\${</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">person</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#C678DD;--shiki-dark:#C678DD;">}</span><span style="color:#98C379;--shiki-dark:#98C379;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">\${</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">person</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">age</span><span style="color:#C678DD;--shiki-dark:#C678DD;">}</span><span style="color:#98C379;--shiki-dark:#98C379;">\`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">observe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">person</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;Jerry&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// Jerry, 10</span></span></code></pre></div><p>Trong đoạn mã trên, đối tượng dữ liệu <code>person</code> là đối tượng được quan sát, hàm <code>print</code> là người quan sát. Khi đối tượng dữ liệu thay đổi, hàm <code>print</code> sẽ tự động được thực thi.</p><p>Dưới đây, chúng ta sử dụng Proxy để viết một phiên bản đơn giản nhất của mô hình Quan sát, tức là triển khai hai hàm <code>observable</code> và <code>observe</code>. Ý tưởng là hàm <code>observable</code> trả về một đối tượng Proxy của đối tượng gốc, chặn các hoạt động gán giá trị và kích hoạt các hàm đóng vai trò là người quan sát.</p><div class="language-js" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> queuedObservers</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Set</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> observe</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;"> fn</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> =&gt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> queuedObservers</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">add</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">fn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> observable</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;"> obj</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> =&gt;</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, { </span><span style="color:#E06C75;--shiki-dark:#E06C75;">set</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> set</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">receiver</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> result</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">set</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">receiver</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  queuedObservers</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">forEach</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">observer</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> =&gt;</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> observer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  return</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> result</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><h3 id="lay-va-đat-thuoc-tinh-bang-reflect" tabindex="-1"><a class="header-anchor" href="#lay-va-đat-thuoc-tinh-bang-reflect"><span>Lấy và đặt thuộc tính bằng Reflect</span></a></h3><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Ironman</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  firstName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Tony&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  lastName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Stark&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  get</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> fullName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#98C379;--shiki-dark:#98C379;"> \`</span><span style="color:#C678DD;--shiki-dark:#C678DD;">\${</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">firstName</span><span style="color:#C678DD;--shiki-dark:#C678DD;">}</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> \${</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">lastName</span><span style="color:#C678DD;--shiki-dark:#C678DD;">}</span><span style="color:#98C379;--shiki-dark:#98C379;">\`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// Lấy thuộc tính riêng, cả hai phương pháp cũ và mới đều có thể thực hiện</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Reflect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">Ironman</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;firstName&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// Tony</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Reflect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">Ironman</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;lastName&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// Tony</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Reflect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">Ironman</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;fullName&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// Tony Stark</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Spiderman</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  firstName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Peter&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  lastName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;Parker&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// Lấy thuộc tính thông qua Reflect, chỉ Reflect mới có thể thực hiện</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Reflect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">Ironman</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;fullName&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">Spiderman</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// Peter Parker</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),e=[l];function o(r,c){return a(),n("div",null,e)}const B=s(t,[["render",o],["__file","reflect.html.vue"]]),h=JSON.parse('{"path":"/programming/js/built-in/reflection/reflect.html","title":"Reflect","lang":"en-US","frontmatter":{"title":"Reflect","tags":["js","programming"],"categories":["js","programming"],"date created":"2023-08-07T00:00:00.000Z","date modified":"2023-08-08T00:00:00.000Z","order":1,"description":"Reflect Reflect là một đối tượng tích hợp sẵn trong JavaScript, nó cung cấp các phương thức để chặn các hoạt động JavaScript. Các phương thức này tương tự như các phương thức củ...","head":[["meta",{"property":"og:url","content":"https://vanhung4499.github.io/programming/js/built-in/reflection/reflect.html"}],["meta",{"property":"og:site_name","content":"VanHung4499"}],["meta",{"property":"og:title","content":"Reflect"}],["meta",{"property":"og:description","content":"Reflect Reflect là một đối tượng tích hợp sẵn trong JavaScript, nó cung cấp các phương thức để chặn các hoạt động JavaScript. Các phương thức này tương tự như các phương thức củ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-28T15:54:38.000Z"}],["meta",{"property":"article:author","content":"Hung Nguyen"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"programming"}],["meta",{"property":"article:modified_time","content":"2024-06-28T15:54:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Reflect\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-28T15:54:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hung Nguyen\\",\\"url\\":\\"https://vanhung4499.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Các phương thức tĩnh","slug":"cac-phuong-thuc-tinh","link":"#cac-phuong-thuc-tinh","children":[]},{"level":2,"title":"Ưu điểm so với các phương pháp truyền thống","slug":"uu-điem-so-voi-cac-phuong-phap-truyen-thong","link":"#uu-điem-so-voi-cac-phuong-phap-truyen-thong","children":[]},{"level":2,"title":"Ví dụ","slug":"vi-du","link":"#vi-du","children":[{"level":3,"title":"Mô hình Quan sát","slug":"mo-hinh-quan-sat","link":"#mo-hinh-quan-sat","children":[]},{"level":3,"title":"Lấy và đặt thuộc tính bằng Reflect","slug":"lay-va-đat-thuoc-tinh-bang-reflect","link":"#lay-va-đat-thuoc-tinh-bang-reflect","children":[]}]}],"git":{"createdTime":1719590078000,"updatedTime":1719590078000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":5.28,"words":1584},"filePathRelative":"programming/js/built-in/reflection/reflect.md","localizedDate":"June 28, 2024","excerpt":"\\n<p>Reflect là một đối tượng tích hợp sẵn trong JavaScript, nó cung cấp các phương thức để chặn các hoạt động JavaScript. Các phương thức này tương tự như các phương thức của đối tượng xử lý. Reflect không phải là một đối tượng hàm, vì vậy nó không thể được tạo bằng cách sử dụng từ khóa <code>new</code>.</p>","autoDesc":true}');export{B as comp,h as data};
