import{_ as d,o as e,c as r,a}from"./app-5QVbWi7Z.js";const o={};function i(l,t){return e(),r("div",null,t[0]||(t[0]=[a('<h1 id="审批通过、不通过、驳回" tabindex="-1"><a class="header-anchor" href="#审批通过、不通过、驳回"><span>审批通过、不通过、驳回</span></a></h1><p>相关视频：</p><ul><li><a href="https://t.zsxq.com/04QZzjAme" target="_blank" rel="noopener noreferrer">16、如何实现我的待办任务列表？</a></li><li><a href="https://t.zsxq.com/04uj6AQJE" target="_blank" rel="noopener noreferrer">17、如何实现我的已办任务列表？</a></li><li><a href="https://t.zsxq.com/04Q7UbqBM" target="_blank" rel="noopener noreferrer">18、如何实现任务的审批通过？</a></li><li><a href="https://t.zsxq.com/04BQvJM7y" target="_blank" rel="noopener noreferrer">19、如何实现任务的审批不通过？</a></li><li><a href="https://t.zsxq.com/04Ie2v7m2" target="_blank" rel="noopener noreferrer">20、如何实现流程的审批记录？</a><br> 本文，我们围绕 [审批中心] 菜单下的 [待办任务]、[已办任务] 两个子菜单，讲解审批通过、审批不通过、驳回的操作流程。</li></ul><h2 id="_1-待办任务" tabindex="-1"><a class="header-anchor" href="#_1-待办任务"><span><a href="#_1-%E5%BE%85%E5%8A%9E%E4%BB%BB%E5%8A%A1">#</a> 1. 待办任务</span></a></h2><p>待办任务，仅展示需要我审批的任务，对应 [审批中心 -&gt; 待办任务] 菜单，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/任务列表/待办任务.png" alt="待办任务" tabindex="0" loading="lazy"><figcaption>待办任务</figcaption></figure><ul><li>后端，对应 BpmTaskController 的 <code>#getTaskTodoPage(...)</code> 提供接口</li><li>前端，对应 <code>/views/bpm/task/todo/index.vue</code> 实现界面</li></ul><h3 id="_1-1-表结构" tabindex="-1"><a class="header-anchor" href="#_1-1-表结构"><span><a href="#_1-1-%E8%A1%A8%E7%BB%93%E6%9E%84">#</a> 1.1 表结构</span></a></h3><p>① 流程任务表，由 Flowable 提供的 <code>ACT_RU_TASK</code> 表实现，如下所示：</p><table><thead><tr><th>字段</th><th>类型</th><th>主键</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>ID_</td><td>NVARCHAR2(64)</td><td>Y</td><td>主键</td><td></td></tr><tr><td>REV_</td><td>INTEGER</td><td>N</td><td>数据版本</td><td></td></tr><tr><td>EXECUTION_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>任务所在的执行流 ID</td><td></td></tr><tr><td>PROC_INST_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>流程实例 ID</td><td></td></tr><tr><td>PROC_DEF_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>流程定义数据 ID</td><td></td></tr><tr><td>NAME_</td><td>NVARCHAR2(255)</td><td>N</td><td>任务名称</td><td></td></tr><tr><td>PARENT_TASK_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>父任务 ID</td><td></td></tr><tr><td>DESCRIPTION_</td><td>NVARCHAR2(2000)</td><td>N</td><td>说明</td><td></td></tr><tr><td>TASK_DEF_KEY_</td><td>NVARCHAR2(255)</td><td>N</td><td>任务定义的 ID 值</td><td></td></tr><tr><td>OWNER_</td><td>NVARCHAR2(255)</td><td>N</td><td>任务拥有人</td><td></td></tr><tr><td>ASSIGNEE_</td><td>NVARCHAR2(255)</td><td>N</td><td>被指派执行该任务的人</td><td></td></tr><tr><td>DELEGATION_</td><td>NVARCHAR2(64)</td><td>N</td><td></td><td></td></tr><tr><td>PRIORITY_</td><td>INTEGER</td><td>N</td><td></td><td></td></tr><tr><td>CREATE_TIME_</td><td>TIMESTAMP(6)</td><td>N</td><td>创建时间</td><td></td></tr><tr><td>DUE_DATE_</td><td>TIMESTAMP(6)</td><td>N</td><td>耗时</td><td></td></tr><tr><td>CATEGORY_</td><td>NVARCHAR2(255)</td><td>N</td><td></td><td></td></tr><tr><td>SUSPENSION_STATE_</td><td>INTEGER</td><td>N</td><td>是否挂起</td><td>1 代表激活 2 代表挂起</td></tr><tr><td>TENANT_ID_</td><td>NVARCHAR2(255)</td><td>N</td><td></td><td></td></tr><tr><td>FORM_KEY_</td><td>NVARCHAR2(255)</td><td>N</td><td></td><td></td></tr><tr><td>CLAIM_TIME_</td><td>TIMESTAMP(6)</td><td>N</td><td></td><td></td></tr></tbody></table><p>② 流程参数表，由 Flowable 提供的 <code>ACT_RU_VARIABLE</code> 表实现，如下所示：</p><table><thead><tr><th>字段</th><th>类型</th><th>主键</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>ID_</td><td>NVARCHAR2(64)</td><td>Y</td><td>主键</td><td></td></tr><tr><td>REV_</td><td>INTEGER</td><td>N</td><td>数据版本</td><td></td></tr><tr><td>TYPE_</td><td>NVARCHAR2(255)</td><td>N</td><td>参数类型</td><td>可以是基本的类型，也可以用户自行扩展</td></tr><tr><td>NAME_</td><td>NVARCHAR2(255)</td><td>N</td><td>参数名称</td><td></td></tr><tr><td>EXECUTION_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>参数执行 ID</td><td></td></tr><tr><td>PROC_INST_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>流程实例 ID</td><td></td></tr><tr><td>TASK_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>任务 ID</td><td></td></tr><tr><td>BYTEARRAY_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>资源 ID</td><td></td></tr><tr><td>DOUBLE_</td><td>NUMBER(*,10)</td><td>N</td><td>参数为 double，则保存在该字段中</td><td></td></tr><tr><td>LONG_</td><td>NUMBER(19)</td><td>N</td><td>参数为 long，则保存在该字段中</td><td></td></tr><tr><td>TEXT_</td><td>NVARCHAR2(2000)</td><td>N</td><td>用户保存文本类型的参数值</td><td></td></tr><tr><td>TEXT2_</td><td>NVARCHAR2(2000)</td><td>N</td><td>用户保存文本类型的参数值</td><td></td></tr></tbody></table><p>在 Flowable 中，如果想给 Task 增加拓展字段，无法通过 <code>ACT_RU_TASK</code> 实现，而是通过 <code>ACT_RU_VARIABLE</code> 表实现。</p><p>该表是一种 Key-Value 的形式，可以存储任意类型的数据。例如说，项目中给 Task 增加了一个 <code>TASK_STATUS</code> 字段，表示任务状态，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/任务列表/TASK_STATUS.png" alt="TASK_STATUS" tabindex="0" loading="lazy"><figcaption>TASK_STATUS</figcaption></figure><h3 id="_1-2-任务状态" tabindex="-1"><a class="header-anchor" href="#_1-2-任务状态"><span><a href="#_1-2-%E4%BB%BB%E5%8A%A1%E7%8A%B6%E6%80%81">#</a> 1.2 任务状态</span></a></h3><p>任务状态，由 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-bpm/yudao-module-bpm-api/src/main/java/cn/iocoder/yudao/module/bpm/enums/task/BpmTaskStatusEnum.java" target="_blank" rel="noopener noreferrer">BpmTaskStatusEnum</a> 目前有 8 种，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/任务列表/任务状态.png" alt="任务状态" tabindex="0" loading="lazy"><figcaption>任务状态</figcaption></figure><h3 id="_1-3-审批通过" tabindex="-1"><a class="header-anchor" href="#_1-3-审批通过"><span><a href="#_1-3-%E5%AE%A1%E6%89%B9%E9%80%9A%E8%BF%87">#</a> 1.3 审批通过</span></a></h3><p>审批通过，由 BpmTaskController 的 <code>#approveTask(...)</code> 提供接口，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/任务列表/审批通过.png" alt="审批通过" tabindex="0" loading="lazy"><figcaption>审批通过</figcaption></figure><p>最核心的，就是调用 Flowable 的 <code>TaskService#complete(...)</code> 方法，完成任务。同时因为 Flowable 自身没有任务状态，所以需要我们自己维护任务状态。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/任务列表/更新任务状态.png" alt="更新任务状态" tabindex="0" loading="lazy"><figcaption>更新任务状态</figcaption></figure><h3 id="_1-4-审批不通过" tabindex="-1"><a class="header-anchor" href="#_1-4-审批不通过"><span><a href="#_1-4-%E5%AE%A1%E6%89%B9%E4%B8%8D%E9%80%9A%E8%BF%87">#</a> 1.4 审批不通过</span></a></h3><p>审批不通过，由 BpmTaskController 的 <code>#rejectTask(...)</code> 提供接口，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/任务列表/审批不通过.png" alt="审批不通过" tabindex="0" loading="lazy"><figcaption>审批不通过</figcaption></figure><p>注意，任务只要审批不通过，整个流程都会被中止（审批不通过），即使在或签场景下！</p><h3 id="_1-5-驳回" tabindex="-1"><a class="header-anchor" href="#_1-5-驳回"><span><a href="#_1-5-%E9%A9%B3%E5%9B%9E">#</a> 1.5 驳回</span></a></h3><p>驳回（退回），将审批重置发送给某节点，重新审批。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/任务列表/驳回.png" alt="驳回" tabindex="0" loading="lazy"><figcaption>驳回</figcaption></figure><p>① 获得可驳回的节点，由 BpmTaskController 的 <code>#getTaskListByReturn(...)</code> 提供接口，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/任务列表/获取可驳回的节点.png" alt="获取可驳回的节点" tabindex="0" loading="lazy"><figcaption>获取可驳回的节点</figcaption></figure><p>② 发起驳回，由 BpmTaskController 的 <code>#returnTask(...)</code> 提供接口，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/任务列表/发起驳回.png" alt="发起驳回" tabindex="0" loading="lazy"><figcaption>发起驳回</figcaption></figure><p>核心还是 Flowable 提供的 <code>#moveActivityIdsToSingleActivityId(...)</code> 方法，它是 Activiti 没有内置的方法，所以在 Activiti 实现驳回就略微麻烦一些。</p><h2 id="_2-已办任务" tabindex="-1"><a class="header-anchor" href="#_2-已办任务"><span><a href="#_2-%E5%B7%B2%E5%8A%9E%E4%BB%BB%E5%8A%A1">#</a> 2. 已办任务</span></a></h2><p>已办任务，仅展示我审批过的任务，对应 [审批中心 -&gt; 已办任务] 菜单，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/任务列表/已办任务.png" alt="已办任务" tabindex="0" loading="lazy"><figcaption>已办任务</figcaption></figure><ul><li>后端，对应 BpmTaskController 的 <code>#getTaskDonePage(...)</code> 提供接口</li><li>前端，对应 <code>/views/bpm/task/done/index.vue</code> 实现界面</li></ul><h3 id="_2-1-表结构" tabindex="-1"><a class="header-anchor" href="#_2-1-表结构"><span><a href="#_2-1-%E8%A1%A8%E7%BB%93%E6%9E%84">#</a> 2.1 表结构</span></a></h3><p>① 流程历史任务表，由 Flowable 提供的 <code>ACT_HI_TASKINST</code> 表实现，如下所示：</p><table><thead><tr><th>字段</th><th>类型</th><th>主键</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>字段</td><td>类型</td><td>主键</td><td>说明</td><td>备注</td></tr><tr><td>ID_</td><td>NVARCHAR2(64)</td><td>Y</td><td>主键</td><td></td></tr><tr><td>PROC_DEF_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>流程定义 ID</td><td></td></tr><tr><td>TASK_DEF_KEY_</td><td>NVARCHAR2(255)</td><td>N</td><td>任务定义的 ID 值</td><td></td></tr><tr><td>PROC_INST_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>流程实例 ID</td><td></td></tr><tr><td>EXECUTION_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>执行 ID</td><td></td></tr><tr><td>PARENT_TASK_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>父任务 ID</td><td></td></tr><tr><td>NAME_</td><td>NVARCHAR2(255)</td><td>N</td><td>名称</td><td></td></tr><tr><td>DESCRIPTION_</td><td>NVARCHAR2(2000)</td><td>N</td><td>说明</td><td></td></tr><tr><td>OWNER_</td><td>NVARCHAR2(255)</td><td>N</td><td>实际签收人 任务的拥有者</td><td>签收人（默认为空，只有在委托时才有值）</td></tr><tr><td>ASSIGNEE_</td><td>NVARCHAR2(255)</td><td>N</td><td>被指派执行该任务的人</td><td></td></tr><tr><td>START_TIME_</td><td>TIMESTAMP(6)</td><td>N</td><td>开始时间</td><td></td></tr><tr><td>CLAIM_TIME_</td><td>TIMESTAMP(6)</td><td>N</td><td>提醒时间</td><td></td></tr><tr><td>END_TIME_</td><td>TIMESTAMP(6)</td><td>N</td><td>结束时间</td><td></td></tr><tr><td>DURATION_</td><td>NUMBER(19)</td><td>N</td><td>耗时</td><td></td></tr><tr><td>DELETE_REASON_</td><td>NVARCHAR2(2000)</td><td>N</td><td>删除原因</td><td></td></tr><tr><td>PRIORITY_</td><td>INTEGER</td><td>N</td><td>优先级别</td><td></td></tr><tr><td>DUE_DATE_</td><td>TIMESTAMP(6)</td><td>N</td><td>过期时间</td><td></td></tr><tr><td>FORM_KEY_</td><td>NVARCHAR2(255)</td><td>N</td><td>节点定义的 formkey</td><td></td></tr><tr><td>CATEGORY_</td><td>NVARCHAR2(255)</td><td>N</td><td>类别</td><td></td></tr><tr><td>TENANT_ID_</td><td>NVARCHAR2(255)</td><td>N</td><td></td><td></td></tr></tbody></table><p>在 Flowable 中，如果 Task 被完成（审批通过、不通过、取消等）时候，会从 <code>ACT_RU_TASK</code> 表中删除，只能在 <code>ACT_HI_TASKINST</code> 表查询到。这是一种“冷热分离”的设计思想，因为进行的任务访问比较频繁，数据量越小，性能会越好。</p><p>② 流程历史参数表，由 Flowable 提供的 <code>ACT_HI_VARINST</code> 表实现，如下所示：</p><table><thead><tr><th>字段</th><th>类型</th><th>主键</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>ID_</td><td>NVARCHAR2(64)</td><td>Y</td><td>主键</td><td></td></tr><tr><td>PROC_INST_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>流程实例 ID</td><td></td></tr><tr><td>EXECUTION_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>指定 ID</td><td></td></tr><tr><td>TASK_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>任务 ID</td><td></td></tr><tr><td>NAME_</td><td>NVARCHAR2(255)</td><td>N</td><td>名称</td><td></td></tr><tr><td>VAR_TYPE_</td><td>NVARCHAR2(100)</td><td>N</td><td>参数类型</td><td></td></tr><tr><td>REV_</td><td>INTEGER</td><td>N</td><td>数据版本</td><td></td></tr><tr><td>BYTEARRAY_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>字节表 ID</td><td></td></tr><tr><td>DOUBLE_</td><td>NUMBER(*,10)</td><td>N</td><td>存储 double 类型数据</td><td></td></tr><tr><td>LONG_</td><td>NUMBER(*,10)</td><td>N</td><td>存储 long 类型数据</td><td></td></tr><tr><td>TEXT_</td><td>NVARCHAR2(2000)</td><td>N</td><td></td><td></td></tr><tr><td>TEXT2_</td><td>NVARCHAR2(2000)</td><td>N</td><td></td><td></td></tr><tr><td>CREATE_TIME_</td><td>TIMESTAMP(6)(2000)</td><td>N</td><td></td><td></td></tr><tr><td>LAST_UPDATED_TIME_</td><td>TIMESTAMP(6)(2000)</td><td>N</td><td></td><td></td></tr></tbody></table><p>在 Flowable 中，如果 Task 被完成（审批通过、不通过、取消等）时候，会从 <code>ACT_RU_VARIABLE</code> 表中删除，只能在 <code>ACT_HI_VARINST</code> 表查询到。这当然也是是一种“冷热分离”的设计思想~</p><h2 id="_3-流程任务" tabindex="-1"><a class="header-anchor" href="#_3-流程任务"><span><a href="#_3-%E6%B5%81%E7%A8%8B%E4%BB%BB%E5%8A%A1">#</a> 3. 流程任务</span></a></h2><p>流程任务，展示系统中所有的任务，一般用于管理员查询，对应 [流程管理 -&gt; 流程任务] 菜单，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/任务列表/流程任务.png" alt="流程任务" tabindex="0" loading="lazy"><figcaption>流程任务</figcaption></figure><ul><li>后端，对应 BpmTaskController 的 <code>#getTaskManagerPage(...)</code> 提供接口</li><li>前端，对应 <code>/views/bpm/task/manager/index.vue</code> 实现界面</li></ul><p>由于它查询的是所有任务，所以读取的是 <code>ACT_HI_TASKINST</code> 表，而不是 <code>ACT_RU_TASK</code> 表。</p>',51)]))}const A=d(o,[["render",i],["__file","task-todo-done.html.vue"]]),_=JSON.parse('{"path":"/project/yudao-cloud/bpm/task-todo-done.html","title":"审批通过、不通过、驳回","lang":"en-US","frontmatter":{"title":"审批通过、不通过、驳回","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":74,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 待办任务","slug":"_1-待办任务","link":"#_1-待办任务","children":[{"level":3,"title":"# 1.1 表结构","slug":"_1-1-表结构","link":"#_1-1-表结构","children":[]},{"level":3,"title":"# 1.2 任务状态","slug":"_1-2-任务状态","link":"#_1-2-任务状态","children":[]},{"level":3,"title":"# 1.3 审批通过","slug":"_1-3-审批通过","link":"#_1-3-审批通过","children":[]},{"level":3,"title":"# 1.4 审批不通过","slug":"_1-4-审批不通过","link":"#_1-4-审批不通过","children":[]},{"level":3,"title":"# 1.5 驳回","slug":"_1-5-驳回","link":"#_1-5-驳回","children":[]}]},{"level":2,"title":"# 2. 已办任务","slug":"_2-已办任务","link":"#_2-已办任务","children":[{"level":3,"title":"# 2.1 表结构","slug":"_2-1-表结构","link":"#_2-1-表结构","children":[]}]},{"level":2,"title":"# 3. 流程任务","slug":"_3-流程任务","link":"#_3-流程任务","children":[]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":7.31,"words":2193},"filePathRelative":"project/yudao-cloud/bpm/task-todo-done.md","localizedDate":"July 7, 2024"}');export{A as comp,_ as data};
