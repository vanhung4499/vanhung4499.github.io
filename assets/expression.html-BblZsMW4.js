import{_ as p,g as t,o as l,c as d,a as i,e as a,h as s,f as r,w as o}from"./app-5QVbWi7Z.js";const g={};function c(m,e){const n=t("RouteLink");return l(),d("div",null,[e[12]||(e[12]=i('<h1 id="流程表达式" tabindex="-1"><a class="header-anchor" href="#流程表达式"><span>流程表达式</span></a></h1><h2 id="_1-流程表达式" tabindex="-1"><a class="header-anchor" href="#_1-流程表达式"><span><a href="#_1-%E6%B5%81%E7%A8%8B%E8%A1%A8%E8%BE%BE%E5%BC%8F">#</a> 1. 流程表达式</span></a></h2><p>Flowable 使用 UEL 进行表达式解析。UEL 代表 <a href="https://docs.oracle.com/javaee/6/tutorial/doc/gjddd.html" target="_blank" rel="noopener noreferrer">Unified Expression Language</a>，是 EE6 规范的一部分。例如说：</p>',3)),a("ul",null,[a("li",null,[e[1]||(e[1]=s("在 ")),r(n,{to:"/bpm/multi-instance/"},{default:o(()=>e[0]||(e[0]=[s("《会签、或签、依次审批》")])),_:1}),e[2]||(e[2]=s(" 看到的 ")),e[3]||(e[3]=a("code",null,"${ nrOfCompletedInstances >= nrOfInstances }",-1)),e[4]||(e[4]=s("、")),e[5]||(e[5]=a("code",null,"${ nrOfCompletedInstances == 1 }",-1)),e[6]||(e[6]=s(" 等，就是 UEL 表达式"))]),a("li",null,[e[8]||(e[8]=s("在 ")),r(n,{to:"/bpm/use-business-form/"},{default:o(()=>e[7]||(e[7]=[s("《审批接入（流程表单）》")])),_:1}),e[9]||(e[9]=s(" 看到的流转条件 ")),e[10]||(e[10]=a("code",null,"${day > 3}",-1)),e[11]||(e[11]=s("，也是 UEL 表达式"))])]),e[13]||(e[13]=i('<p>学习文档：</p><ul><li><a href="https://tkjohn.github.io/flowable-userguide/#apiExpressions" target="_blank" rel="noopener noreferrer">《Flowable BPMN 用户手册 (v 6.3.0) —— 表达式》</a><br> 那么，具体怎么定义 UEL 表达式呢？我们逐个来看看。</li></ul><h3 id="_1-1-bpmtaskassignstartuserexpression" tabindex="-1"><a class="header-anchor" href="#_1-1-bpmtaskassignstartuserexpression"><span><a href="#_1-1-bpmtaskassignstartuserexpression">#</a> 1.1 BpmTaskAssignStartUserExpression</span></a></h3><p><a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-bpm/yudao-module-bpm-biz/src/main/java/cn/iocoder/yudao/module/bpm/framework/flowable/core/candidate/expression/BpmTaskAssignStartUserExpression.java" target="_blank" rel="noopener noreferrer">BpmTaskAssignStartUserExpression</a>，分配给发起人审批的 Expression 流程表达式，需要声明成 Spring Bean，代码如下：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/流程表达式/BpmTaskAssignStartUserExpression.png" alt="BpmTaskAssignStartUserExpression" tabindex="0" loading="lazy"><figcaption>BpmTaskAssignStartUserExpression</figcaption></figure><p>使用时，可以在 BPMN 流程图中，配置表达式 <code>${bpmTaskAssignStartUserExpression.calculateUsers(execution)}</code> ，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/流程表达式/BpmTaskAssignStartUserExpressionConfig.png" alt="BpmTaskAssignStartUserExpressionConfig" tabindex="0" loading="lazy"><figcaption>BpmTaskAssignStartUserExpressionConfig</figcaption></figure><p>这样，该任务节点的审批人，就会被分配给发起人。</p><h3 id="_1-2-bpmtaskassignleaderexpression" tabindex="-1"><a class="header-anchor" href="#_1-2-bpmtaskassignleaderexpression"><span><a href="#_1-2-bpmtaskassignleaderexpression">#</a> 1.2 BpmTaskAssignLeaderExpression</span></a></h3><p><a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-bpm/yudao-module-bpm-biz/src/main/java/cn/iocoder/yudao/module/bpm/framework/flowable/core/candidate/expression/BpmTaskAssignLeaderExpression.java" target="_blank" rel="noopener noreferrer">BpmTaskAssignLeaderExpression</a>，分配给发起人的指定 <code>level</code> 级别 Leader 审批的 Expression 流程表达式，需要声明成 Spring Bean，代码如下：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/流程表达式/BpmTaskAssignLeaderExpression.png" alt="BpmTaskAssignLeaderExpression" tabindex="0" loading="lazy"><figcaption>BpmTaskAssignLeaderExpression</figcaption></figure><p>使用时，可以在 BPMN 流程图中，配置表达式 <code>${bpmTaskAssignLeaderExpression.calculateUsers(execution, 1)}</code> 表示一级领导，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/流程表达式/BpmTaskAssignLeaderExpressionConfig.png" alt="BpmTaskAssignLeaderExpressionConfig" tabindex="0" loading="lazy"><figcaption>BpmTaskAssignLeaderExpressionConfig</figcaption></figure><p>这样，该任务节点的审批人，就会被分配给发起人的一级领导。</p><p>如果想要分配给二级领导，可以使用 <code>${bpmTaskAssignLeaderExpression.calculateUsers(execution, 2)}</code>。也就是说，<code>level</code> 参数，表示领导的级别。</p><h2 id="_2-流程表达式的模版" tabindex="-1"><a class="header-anchor" href="#_2-流程表达式的模版"><span><a href="#_2-%E6%B5%81%E7%A8%8B%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%A8%A1%E7%89%88">#</a> 2. 流程表达式的模版</span></a></h2><p>在 [工作流程 -&gt; 流程管理 -&gt; 流程表达式] 菜单，可以配置执行表达式的模版。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/流程表达式/流程表达式.png" alt="流程表达式" tabindex="0" loading="lazy"><figcaption>流程表达式</figcaption></figure><ul><li>前端，对应 <code>views/bpm/processExpression/index.vue</code> 提供界面</li><li>后端，对应 <code>BpmProcessExpressionController</code> 提供接口</li></ul><h3 id="_2-1-使用场景" tabindex="-1"><a class="header-anchor" href="#_2-1-使用场景"><span><a href="#_2-1-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">#</a> 2.1 使用场景</span></a></h3><p>当我们在 BPMN 流程图中，配置表达式时，可以选择模版，而不需要每次都填写表达式信息。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/流程表达式/选择表达式.png" alt="选择表达式" tabindex="0" loading="lazy"><figcaption>选择表达式</figcaption></figure><h3 id="_2-2-表结构" tabindex="-1"><a class="header-anchor" href="#_2-2-表结构"><span><a href="#_2-2-%E8%A1%A8%E7%BB%93%E6%9E%84">#</a> 2.2 表结构</span></a></h3><p>流程表达式表，是我们自己定义的 <code>bpm_process_expression</code> 表，结构如下：</p><blockquote><p>省略 creator/create_time/updater/update_time/deleted/tenant_id 等通用字段</p></blockquote><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE `bpm_process_expression` (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;编号&#39;,</span></span>\n<span class="line"><span>  `name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &#39;&#39; COMMENT &#39;表达式名字&#39;,</span></span>\n<span class="line"><span>  `status` tinyint NOT NULL COMMENT &#39;表达式状态&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `expression` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;表达式&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`) USING BTREE</span></span>\n<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=120 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&#39;BPM 流程表达式表&#39;;</span></span></code></pre></div><p>关键是 <code>expression</code> 字段，表示表达式的内容。</p>',27))])}const E=p(g,[["render",c],["__file","expression.html.vue"]]),f=JSON.parse('{"path":"/project/yudao-cloud/bpm/expression.html","title":"流程表达式","lang":"en-US","frontmatter":{"title":"流程表达式","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":78,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 流程表达式","slug":"_1-流程表达式","link":"#_1-流程表达式","children":[{"level":3,"title":"# 1.1 BpmTaskAssignStartUserExpression","slug":"_1-1-bpmtaskassignstartuserexpression","link":"#_1-1-bpmtaskassignstartuserexpression","children":[]},{"level":3,"title":"# 1.2 BpmTaskAssignLeaderExpression","slug":"_1-2-bpmtaskassignleaderexpression","link":"#_1-2-bpmtaskassignleaderexpression","children":[]}]},{"level":2,"title":"# 2. 流程表达式的模版","slug":"_2-流程表达式的模版","link":"#_2-流程表达式的模版","children":[{"level":3,"title":"# 2.1 使用场景","slug":"_2-1-使用场景","link":"#_2-1-使用场景","children":[]},{"level":3,"title":"# 2.2 表结构","slug":"_2-2-表结构","link":"#_2-2-表结构","children":[]}]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":2.85,"words":856},"filePathRelative":"project/yudao-cloud/bpm/expression.md","localizedDate":"July 7, 2024"}');export{E as comp,f as data};
