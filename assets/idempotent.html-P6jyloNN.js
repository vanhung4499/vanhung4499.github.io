import{_ as o,g as n,o as s,c as r,e as p,h as e,f as i,w as d,a}from"./app-BRTHG7K9.js";const c={},l=a(`<h1 id="幂等性-防重复提交" tabindex="-1"><a class="header-anchor" href="#幂等性-防重复提交"><span>幂等性（防重复提交）</span></a></h1><p><a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-protection/" target="_blank" rel="noopener noreferrer"><code>yudao-spring-boot-starter-protection</code></a> 技术组件，由它的 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-protection/src/main/java/cn/iocoder/yudao/framework/idempotent/" target="_blank" rel="noopener noreferrer"><code>idempotent</code></a> 包，提供声明式的幂等特性，可防止重复请求。例如说，用户快速的双击了某个按钮，前端没有禁用该按钮，导致发送了两次重复的请求。</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>// UserController.java</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Idempotent(timeout = 10, timeUnit = TimeUnit.SECONDS, message = &quot;正在添加用户中，请勿重复提交&quot;)</span></span>
<span class="line"><span>@PostMapping(&quot;/user/create&quot;)</span></span>
<span class="line"><span>public String createUser(User user){</span></span>
<span class="line"><span>    userService.createUser(user);</span></span>
<span class="line"><span>    return &quot;添加成功&quot;;</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>每 10 秒钟，所有用户，只能操作一次</li></ul><p>疑问：如果想按照每个用户，或者每个 IP，限制请求呢？</p><p>可设置该注解的 <code>keyResolver</code> 属性，可选择的有：</p><ul><li>DefaultIdempotentKeyResolver：全局级别</li><li>UserIdempotentKeyResolver：用户级别</li><li>ExpressionIdempotentKeyResolver：自定义级别，通过 <code>keyArg</code> 属性指定 Spring EL 表达式</li></ul><h2 id="_1-实现原理" tabindex="-1"><a class="header-anchor" href="#_1-实现原理"><span><a href="#_1-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">#</a> 1. 实现原理</span></a></h2><p>友情提示：</p>`,9),u=a(`<p>它的实现原理非常简单，针对相同参数的方法，一段时间内，有且仅能执行一次。执行流程如下：</p><p>① 在方法执行前，根据参数对应的 Key 查询是否存在：</p><ul><li>如果<strong>存在</strong>，说明正在执行中，则进行报错。</li><li>如果<strong>不在</strong>，则计算参数对应的 Key，存储到 Redis 中，并设置过期时间，即标记正在执行中。</li></ul><p>默认参数的 Redis Key 的计算规则由 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-protection/src/main/java/cn/iocoder/yudao/framework/idempotent/core/keyresolver/impl/DefaultIdempotentKeyResolver.java" target="_blank" rel="noopener noreferrer">DefaultIdempotentKeyResolver</a> 实现，使用 MD5(方法名 + 方法参数)，避免 Redis Key 过长。</p><p>② 方法执行完成，<strong>不会</strong>主动删除参数对应的 Key。</p><p>如果希望会<strong>主动</strong>删除 Key，可以使用 <a href="/distributed-lock">《开发指南 —— 分布式锁》</a> 提供的 <code>@Lock</code> 来实现幂等性。</p><p>🙂 从本质上来说，<code>idempotent</code> 包提供的幂等特性，本质上也是基于 Redis 实现的分布式锁。</p><p>③ 如果方法执行时间较长，超过 Key 的过期时间，则 Redis 会自动删除对应的 Key。因此，需要大概评估下，避免方法的执行时间超过过期时间。</p><p>④ 如果方法执行发生 Exception 异常时，默认会删除 Key，避免下次请求无法正常执行，此处参考 <a href="https://tech.meituan.com/2016/09/29/distributed-system-mutually-exclusive-idempotence-cerberus-gtis.html" target="_blank" rel="noopener noreferrer">《美团 GTIS》</a> 。</p><h2 id="_2-idempotent-注解" tabindex="-1"><a class="header-anchor" href="#_2-idempotent-注解"><span><a href="#_2-idempotent-%E6%B3%A8%E8%A7%A3">#</a> 2. <code>@Idempotent</code> 注解</span></a></h2><p><a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-protection/src/main/java/cn/iocoder/yudao/framework/idempotent/core/annotation/Idempotent.java" target="_blank" rel="noopener noreferrer"><code>@Idempotent</code></a> 注解，声明在方法上，表示该方法需要开启幂等性。代码如下：</p><figure><img src="https://doc.iocoder.cn/img/后端手册/幂等性/注解.png" alt=" 注解" tabindex="0" loading="lazy"><figcaption> 注解</figcaption></figure><p>① 对应的 AOP 切面是 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-protection/src/main/java/cn/iocoder/yudao/framework/idempotent/core/aop/IdempotentAspect.java" target="_blank" rel="noopener noreferrer">IdempotentAspect</a> 类，核心就 10 行左右的代码，如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/后端手册/幂等性/IdempotentAspect.png" alt="IdempotentAspect 切面" tabindex="0" loading="lazy"><figcaption>IdempotentAspect 切面</figcaption></figure><p>② 对应的 Redis Key 的前缀是 <code>idempotent:%s</code>，可见 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-protection/src/main/java/cn/iocoder/yudao/framework/idempotent/core/redis/IdempotentRedisDAO.java" target="_blank" rel="noopener noreferrer">IdempotentRedisDAO</a> 类，如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/后端手册/幂等性/IdempotentRedisDAO.png" alt="IdempotentRedisDAO 存储" tabindex="0" loading="lazy"><figcaption>IdempotentRedisDAO 存储</figcaption></figure><h2 id="_3-使用示例" tabindex="-1"><a class="header-anchor" href="#_3-使用示例"><span><a href="#_3-%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B">#</a> 3. 使用示例</span></a></h2><p>本小节，我们实现 <code>/admin-api/infra/test-demo/get</code> RESTful API 接口的幂等性。</p><p>① 在 <code>pom.xml</code> 文件中，引入 <code>yudao-spring-boot-starter-protection</code> 依赖。</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;yudao-spring-boot-starter-protection&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div><p>② 在该 API 接口的对应方法上，添加 <code>@Idempotent</code> 注解。代码如下：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>// TestDemoController.java</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@GetMapping(&quot;/get&quot;)</span></span>
<span class="line"><span>@Idempotent(timeout = 10, message = &quot;重复请求，请稍后重试&quot;)</span></span>
<span class="line"><span>public CommonResult&lt;TestDemoRespVO&gt; getTestDemo(@RequestParam(&quot;id&quot;) Long id) {</span></span>
<span class="line"><span>    // ... 省略代码</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>③ 调用该 API 接口，执行成功。</p><figure><img src="https://doc.iocoder.cn/img/后端手册/幂等性/案例.png" alt="调用成功" tabindex="0" loading="lazy"><figcaption>调用成功</figcaption></figure><p>④ 再次调用该 API 接口，被幂等性拦截，执行失败。</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;code&quot;: 900,</span></span>
<span class="line"><span>  &quot;data&quot;: null,</span></span>
<span class="line"><span>  &quot;msg&quot;: &quot;重复请求，请稍后重试&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,26);function m(g,b){const t=n("RouteLink");return s(),r("div",null,[l,p("p",null,[e("它的实现原理，和 "),i(t,{to:"/rate-limiter/"},{default:d(()=>[e("《请求限流（RateLimiter）》")]),_:1}),e(" 比较接近哈。")]),u])}const f=o(c,[["render",m],["__file","idempotent.html.vue"]]),k=JSON.parse('{"path":"/project/rouyi-vue-pro/idempotent.html","title":"幂等性（防重复提交）","lang":"en-US","frontmatter":{"title":"幂等性（防重复提交）","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":45,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 实现原理","slug":"_1-实现原理","link":"#_1-实现原理","children":[]},{"level":2,"title":"# 2. @Idempotent 注解","slug":"_2-idempotent-注解","link":"#_2-idempotent-注解","children":[]},{"level":2,"title":"# 3. 使用示例","slug":"_3-使用示例","link":"#_3-使用示例","children":[]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":3.18,"words":954},"filePathRelative":"project/rouyi-vue-pro/idempotent.md","localizedDate":"July 7, 2024"}');export{f as comp,k as data};
