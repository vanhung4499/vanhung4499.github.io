import{_ as s,o as a,c as n,a as t}from"./app-5QVbWi7Z.js";const e={};function h(l,i){return a(),n("div",null,i[0]||(i[0]=[t(`<h1 id="_0295-find-median-from-data-stream" tabindex="-1"><a class="header-anchor" href="#_0295-find-median-from-data-stream"><span><a href="https://leetcode.com/problems/find-median-from-data-stream/" target="_blank" rel="noopener noreferrer">0295. Find Median from Data Stream</a></span></a></h1><ul><li>Nhãn: Thiết kế, Con trỏ kép, Luồng dữ liệu, Sắp xếp, Hàng đợi ưu tiên (Heap)</li><li>Độ khó: Khó</li></ul><h2 id="tom-tat-đe-bai" tabindex="-1"><a class="header-anchor" href="#tom-tat-đe-bai"><span>Tóm tắt đề bài</span></a></h2><p><strong>Mô tả</strong>: Thiết kế một cấu trúc dữ liệu hỗ trợ hai thao tác sau:</p><ul><li><code>void addNum(int num)</code>: Thêm một số nguyên vào cấu trúc dữ liệu.</li><li><code>double findMedian()</code>: Trả về trung vị của tất cả các số hiện tại.</li></ul><h2 id="y-tuong-giai-quyet" tabindex="-1"><a class="header-anchor" href="#y-tuong-giai-quyet"><span>Ý tưởng giải quyết</span></a></h2><p>Sử dụng một hàng đợi ưu tiên lớn <code>queMax</code> để lưu trữ các số lớn hơn trung vị và một hàng đợi ưu tiên nhỏ <code>queMin</code> để lưu trữ các số nhỏ hơn trung vị. Ở đây <code>queMax</code> sẽ là Min Heap còn <code>queMin</code> sẽ là Max Heap để duy 2 phần tử ở giữa.</p><ul><li>Khi số lượng phần tử là số chẵn: <code>queMin</code> và <code>queMax</code> có cùng số lượng phần tử, trung vị là trung bình cộng của hai phần tử đầu hàng đợi.</li><li>Khi số lượng phần tử là số lẻ: <code>queMin</code> có một phần tử nhiều hơn <code>queMax</code>, trung vị là phần tử đầu hàng đợi <code>queMin</code>.</li></ul><p>Để đáp ứng các yêu cầu trên, khi thực hiện thao tác <code>addNum</code>, chúng ta cần xử lý các trường hợp sau:</p><ul><li><code>num &gt; max{queMin}</code>: Khi đó <code>num</code> lớn hơn trung vị, ta thêm số này vào hàng đợi ưu tiên lớn <code>queMax</code>. Trung vị mới sẽ lớn hơn trung vị cũ, do đó có thể cần di chuyển phần tử nhỏ nhất trong <code>queMax</code> vào <code>queMin</code>.</li><li><code>num ≤ max{queMin}</code>: Khi đó <code>num</code> nhỏ hơn hoặc bằng trung vị, ta thêm số này vào hàng đợi ưu tiên nhỏ <code>queMin</code>. Trung vị mới sẽ nhỏ hơn hoặc bằng trung vị cũ, do đó có thể cần di chuyển phần tử lớn nhất trong <code>queMin</code> vào <code>queMax</code>.</li></ul><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code"><span>Code</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> heapq</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> MedianFinder</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> __init__</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.queMin </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.queMax </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> []s</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> addNum</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">num</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) -&gt; </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">None</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.queMin </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">or</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> num </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.queMin[</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">]:</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">            heapq.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">heappush</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.queMin, </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">num)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> len</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.queMax) </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> len</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.queMin):</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">                heapq.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">heappush</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.queMax, </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">heapq.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">heappop</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.queMin))</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        else</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">            heapq.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">heappush</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.queMax, num)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> len</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.queMax) </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> len</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.queMin):</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">                heapq.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">heappush</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.queMin, </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">heapq.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">heappop</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.queMax))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> findMedian</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) -&gt; </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">float</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> len</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.queMin) </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> len</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.queMax):</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.queMin[</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.queMin[</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.queMax[</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">]) </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="phan-tich-đo-phuc-tap" tabindex="-1"><a class="header-anchor" href="#phan-tich-đo-phuc-tap"><span>Phân tích độ phức tạp</span></a></h2><ul><li><strong>Độ phức tạp thời gian</strong>: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> cho mỗi thao tác <code>addNum</code> và <code>findMedian</code>.</li><li><strong>Độ phức tạp không gian</strong>: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>.</li></ul>`,14)]))}const k=s(e,[["render",h],["__file","LeetCode 0295.html.vue"]]),B=JSON.parse('{"path":"/dsa/leetcode/LeetCode%200295.html","title":"LeetCode 0295","lang":"en-US","frontmatter":{"title":"LeetCode 0295","tags":["dsa","leetcode"],"categories":["dsa","leetcode"],"date created":"2023-09-24T00:00:00.000Z","date modified":"2023-09-29T00:00:00.000Z","description":"0295. Find Median from Data Stream Nhãn: Thiết kế, Con trỏ kép, Luồng dữ liệu, Sắp xếp, Hàng đợi ưu tiên (Heap) Độ khó: Khó Tóm tắt đề bài Mô tả: Thiết kế một cấu trúc dữ liệu h...","head":[["meta",{"property":"og:url","content":"https://vanhung4499.github.io/dsa/leetcode/LeetCode%200295.html"}],["meta",{"property":"og:site_name","content":"VanHung4499"}],["meta",{"property":"og:title","content":"LeetCode 0295"}],["meta",{"property":"og:description","content":"0295. Find Median from Data Stream Nhãn: Thiết kế, Con trỏ kép, Luồng dữ liệu, Sắp xếp, Hàng đợi ưu tiên (Heap) Độ khó: Khó Tóm tắt đề bài Mô tả: Thiết kế một cấu trúc dữ liệu h..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-28T15:54:38.000Z"}],["meta",{"property":"article:author","content":"Hung Nguyen"}],["meta",{"property":"article:tag","content":"dsa"}],["meta",{"property":"article:tag","content":"leetcode"}],["meta",{"property":"article:modified_time","content":"2024-06-28T15:54:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LeetCode 0295\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-28T15:54:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hung Nguyen\\",\\"url\\":\\"https://vanhung4499.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Tóm tắt đề bài","slug":"tom-tat-đe-bai","link":"#tom-tat-đe-bai","children":[]},{"level":2,"title":"Ý tưởng giải quyết","slug":"y-tuong-giai-quyet","link":"#y-tuong-giai-quyet","children":[]},{"level":2,"title":"Code","slug":"code","link":"#code","children":[]},{"level":2,"title":"Phân tích độ phức tạp","slug":"phan-tich-đo-phuc-tap","link":"#phan-tich-đo-phuc-tap","children":[]}],"git":{"createdTime":1719590078000,"updatedTime":1719590078000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":1.7,"words":510},"filePathRelative":"dsa/leetcode/LeetCode 0295.md","localizedDate":"June 28, 2024","excerpt":"\\n<ul>\\n<li>Nhãn: Thiết kế, Con trỏ kép, Luồng dữ liệu, Sắp xếp, Hàng đợi ưu tiên (Heap)</li>\\n<li>Độ khó: Khó</li>\\n</ul>\\n<h2>Tóm tắt đề bài</h2>\\n<p><strong>Mô tả</strong>: Thiết kế một cấu trúc dữ liệu hỗ trợ hai thao tác sau:</p>\\n<ul>\\n<li><code>void addNum(int num)</code>: Thêm một số nguyên vào cấu trúc dữ liệu.</li>\\n<li><code>double findMedian()</code>: Trả về trung vị của tất cả các số hiện tại.</li>\\n</ul>","autoDesc":true}');export{k as comp,B as data};
