import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as i,e as n,a as s,b as a}from"./app-C-_dXKvP.js";const e={},c=n('<h2 id="_1-gioi-thieu-thuat-toan-rabin-karp" tabindex="-1"><a class="header-anchor" href="#_1-gioi-thieu-thuat-toan-rabin-karp"><span>1. Giới thiệu thuật toán Rabin Karp</span></a></h2><blockquote><p><strong>Thuật toán Rabin Karp</strong>: Thường được gọi là thuật toán RK. Được đặt theo tên hai nhà phát minh của nó là Michael Oser Rabin và Richard Manning Karp. Thuật toán RK là một thuật toán tìm kiếm chuỗi trong chuỗi được đề xuất bởi họ vào năm 1987, sử dụng hàm băm để tìm kiếm chuỗi mẫu trong văn bản.</p></blockquote><h2 id="_2-cac-buoc-cua-thuat-toan-rabin-karp" tabindex="-1"><a class="header-anchor" href="#_2-cac-buoc-cua-thuat-toan-rabin-karp"><span>2. Các bước của thuật toán Rabin Karp</span></a></h2><h3 id="_2-1-cac-buoc-chung-cua-thuat-toan-rabin-karp" tabindex="-1"><a class="header-anchor" href="#_2-1-cac-buoc-chung-cua-thuat-toan-rabin-karp"><span>2.1 Các bước chung của thuật toán Rabin Karp</span></a></h3><ol><li>Cho văn bản <code>T</code> và chuỗi mẫu <code>p</code>, tính độ dài của văn bản <code>T</code> là <code>n</code> và độ dài của chuỗi mẫu <code>p</code> là <code>m</code>.</li><li>Sử dụng thuật toán băm để tính giá trị băm của chuỗi mẫu <code>p</code>.</li><li>Sử dụng thuật toán băm cuộn để tính giá trị băm của <code>n - m + 1</code> chuỗi con trong văn bản <code>T</code>.</li><li>So sánh giá trị băm của từng chuỗi con với giá trị băm của chuỗi mẫu. <ol><li>Nếu giá trị băm của chuỗi con hiện tại không khớp với giá trị băm của chuỗi mẫu, tiếp tục tìm kiếm.</li><li>Nếu giá trị băm của chuỗi con hiện tại khớp với giá trị băm của chuỗi mẫu, kiểm tra từng ký tự của chuỗi con và chuỗi mẫu để xác nhận sự khớp (tránh xung đột băm). <ol><li>Nếu từng ký tự của chuỗi con và chuỗi mẫu khớp, cho biết chuỗi con hiện tại và chuỗi mẫu khớp.</li><li>Nếu từng ký tự của chuỗi con và chuỗi mẫu không khớp, tiếp tục tìm kiếm.</li></ol></li></ol></li><li>Nếu không tìm thấy khớp, trả về giá trị <code>-1</code>.</li></ol><h3 id="_2-2-thuat-toan-bam-cuon" tabindex="-1"><a class="header-anchor" href="#_2-2-thuat-toan-bam-cuon"><span>2.2 Thuật toán băm cuộn</span></a></h3>',6),r=s("p",null,[a("Một bước quan trọng trong việc thực hiện thuật toán RK là "),s("strong",null,'"Thuật toán băm cuộn"'),a(", thông qua thuật toán băm cuộn, thời gian tính toán giá trị băm của chuỗi con được giảm từ "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"m"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(m)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mclose"},")")])])]),a(" xuống còn "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])]),a(", từ đó cải thiện hiệu suất của toàn bộ thuật toán.")],-1),m=s("p",null,[a("Thuật toán băm cuộn trong thuật toán RK chủ yếu sử dụng ý tưởng "),s("strong",null,'"Rabin fingerprint"'),a(". Ý tưởng này sử dụng giá trị băm của từng ký tự trong chuỗi con và cũng có thể tính toán nhanh giá trị băm của chuỗi con kế tiếp dựa trên giá trị băm của chuỗi con trước đó, từ đó giúp tính toán giá trị băm của chuỗi con chỉ với độ phức tạp "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])]),a(".")],-1),p=n("<p>Dưới đây là một ví dụ để giải thích ý tưởng này.</p><p>Giả sử chuỗi chỉ chứa <code>d</code> ký tự và chúng ta có thể sử dụng hệ số <code>d</code> để biểu diễn giá trị băm của chuỗi con.</p><p>Ví dụ, nếu chuỗi chỉ chứa <code>26</code> chữ cái viết thường từ <code>a</code> đến <code>z</code>, chúng ta có thể sử dụng hệ <code>26</code> để biểu diễn chuỗi, trong đó <code>a</code> được biểu diễn bằng <code>0</code>, <code>b</code> được biểu diễn bằng <code>1</code>, và tiếp tục như vậy, <code>z</code> được biểu diễn bằng <code>25</code>.</p><p>Ví dụ, giá trị băm của chuỗi <code>cat</code> có thể được biểu diễn như sau:</p>",4),o=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mtable",{rowspacing:"0.25em",columnalign:"right left",columnspacing:"0em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mi",null,"H"),s("mi",null,"a"),s("mi",null,"s"),s("mi",null,"h"),s("mo",{stretchy:"false"},"("),s("mi",null,"c"),s("mi",null,"a"),s("mi",null,"t"),s("mo",{stretchy:"false"},")")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"="),s("mi",null,"c"),s("mo",null,"×"),s("mn",null,"26"),s("mo",null,"×"),s("mn",null,"26"),s("mo",null,"+"),s("mi",null,"a"),s("mo",null,"×"),s("mn",null,"26"),s("mo",null,"+"),s("mi",null,"t"),s("mo",null,"×"),s("mn",null,"1")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"="),s("mn",null,"2"),s("mo",null,"×"),s("mn",null,"26"),s("mo",null,"×"),s("mn",null,"26"),s("mo",null,"+"),s("mn",null,"0"),s("mo",null,"×"),s("mn",null,"26"),s("mo",null,"+"),s("mn",null,"19"),s("mo",null,"×"),s("mn",null,"1")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"="),s("mn",null,"1371")])])])])]),s("annotation",{encoding:"application/x-tex"},"\\begin{aligned} Hash(cat) &= c \\times 26 \\times 26 + a \\times 26 + t \\times 1 \\cr &= 2 \\times 26 \\times 26 + 0 \\times 26 + 19 \\times 1 \\cr &= 1371 \\end{aligned}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"4.5em","vertical-align":"-2em"}}),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-r"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.5em"}},[s("span",{style:{top:"-4.66em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"h"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"c"),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mclose"},")")])]),s("span",{style:{top:"-3.16em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-1.66em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"})])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2em"}},[s("span")])])])]),s("span",{class:"col-align-l"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.5em"}},[s("span",{style:{top:"-4.66em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord mathnormal"},"c"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"26"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"26"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"26"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"1")])]),s("span",{style:{top:"-3.16em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"26"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"26"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"0"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"26"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"19"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"1")])]),s("span",{style:{top:"-1.66em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"1371")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2em"}},[s("span")])])])])])])])])])],-1),h=s("p",null,"Phương pháp tính giá trị băm này có một đặc điểm: khi tính toán giá trị băm của chuỗi con kế tiếp, chúng ta có thể sử dụng giá trị băm của chuỗi con trước đó.",-1),d=s("p",null,[a("Ví dụ, nếu chuỗi con kế tiếp của "),s("code",null,"cat"),a(" là "),s("code",null,"ate"),a(". Theo cách tính giá trị băm trên, giá trị băm của "),s("code",null,"ate"),a(" là:")],-1),u=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mtable",{rowspacing:"0.25em",columnalign:"right left",columnspacing:"0em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mi",null,"H"),s("mi",null,"a"),s("mi",null,"s"),s("mi",null,"h"),s("mo",{stretchy:"false"},"("),s("mi",null,"a"),s("mi",null,"t"),s("mi",null,"e"),s("mo",{stretchy:"false"},")")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"="),s("mi",null,"a"),s("mo",null,"×"),s("mn",null,"26"),s("mo",null,"×"),s("mn",null,"26"),s("mo",null,"+"),s("mi",null,"t"),s("mo",null,"×"),s("mn",null,"26"),s("mo",null,"+"),s("mi",null,"e"),s("mo",null,"×"),s("mn",null,"1")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"="),s("mn",null,"0"),s("mo",null,"×"),s("mn",null,"26"),s("mo",null,"×"),s("mn",null,"26"),s("mo",null,"+"),s("mn",null,"19"),s("mo",null,"×"),s("mn",null,"26"),s("mo",null,"+"),s("mn",null,"4"),s("mo",null,"×"),s("mn",null,"1")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"="),s("mn",null,"498")])])])])]),s("annotation",{encoding:"application/x-tex"},"\\begin{aligned} Hash(ate) &= a \\times 26 \\times 26 + t \\times 26 + e \\times 1 \\cr &= 0 \\times 26 \\times 26 + 19 \\times 26 + 4 \\times 1 \\cr &= 498 \\end{aligned}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"4.5em","vertical-align":"-2em"}}),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-r"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.5em"}},[s("span",{style:{top:"-4.66em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"h"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mclose"},")")])]),s("span",{style:{top:"-3.16em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-1.66em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"})])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2em"}},[s("span")])])])]),s("span",{class:"col-align-l"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.5em"}},[s("span",{style:{top:"-4.66em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"26"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"26"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"26"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"1")])]),s("span",{style:{top:"-3.16em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"0"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"26"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"26"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"19"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"26"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"4"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"1")])]),s("span",{style:{top:"-1.66em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"498")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2em"}},[s("span")])])])])])])])])])],-1),g=s("p",null,[a("Nếu tính giá trị băm của "),s("code",null,"ate"),a(" bằng cách sử dụng giá trị băm của chuỗi con trước đó "),s("code",null,"cat"),a(", giá trị băm của "),s("code",null,"ate"),a(" sẽ là:")],-1),k=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mtable",{rowspacing:"0.25em",columnalign:"right left",columnspacing:"0em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mi",null,"H"),s("mi",null,"a"),s("mi",null,"s"),s("mi",null,"h"),s("mo",{stretchy:"false"},"("),s("mi",null,"a"),s("mi",null,"t"),s("mi",null,"e"),s("mo",{stretchy:"false"},")")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"="),s("mo",{stretchy:"false"},"("),s("mi",null,"H"),s("mi",null,"a"),s("mi",null,"s"),s("mi",null,"h"),s("mo",{stretchy:"false"},"("),s("mi",null,"c"),s("mi",null,"a"),s("mi",null,"t"),s("mo",{stretchy:"false"},")"),s("mo",null,"−"),s("mi",null,"c"),s("mo",null,"×"),s("mn",null,"26"),s("mo",null,"×"),s("mn",null,"26"),s("mo",{stretchy:"false"},")"),s("mo",null,"×"),s("mn",null,"26"),s("mo",null,"+"),s("mi",null,"e"),s("mo",null,"×"),s("mn",null,"26")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"="),s("mo",{stretchy:"false"},"("),s("mn",null,"1371"),s("mo",null,"−"),s("mn",null,"2"),s("mo",null,"×"),s("mn",null,"26"),s("mo",null,"×"),s("mn",null,"26"),s("mo",{stretchy:"false"},")"),s("mo",null,"×"),s("mn",null,"26"),s("mo",null,"+"),s("mn",null,"4"),s("mo",null,"×"),s("mn",null,"1")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"="),s("mn",null,"498")])])])])]),s("annotation",{encoding:"application/x-tex"},"\\begin{aligned} Hash(ate) &= (Hash(cat) - c \\times 26 \\times 26) \\times 26 + e \\times 26 \\cr &= (1371 - 2 \\times 26 \\times 26) \\times 26 + 4 \\times 1 \\cr &= 498 \\end{aligned}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"4.5em","vertical-align":"-2em"}}),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-r"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.5em"}},[s("span",{style:{top:"-4.66em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"h"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mclose"},")")])]),s("span",{style:{top:"-3.16em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-1.66em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"})])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2em"}},[s("span")])])])]),s("span",{class:"col-align-l"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.5em"}},[s("span",{style:{top:"-4.66em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"h"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"c"),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal"},"c"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"26"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"26"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"26"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"26")])]),s("span",{style:{top:"-3.16em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1371"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"26"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"26"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"26"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"4"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"1")])]),s("span",{style:{top:"-1.66em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"498")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2em"}},[s("span")])])])])])])])])])],-1),y=s("p",null,[a("Có thể thấy, hai cách tính giá trị băm này cho kết quả giống nhau. Nhưng cách tính thứ hai không cần duyệt qua chuỗi con, chỉ cần tính toán từng ký tự để có được giá trị băm của toàn bộ chuỗi con. Điều này giúp giảm độ phức tạp tính toán giá trị băm của chuỗi con xuống còn "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])]),a(". Sau đó, chúng ta có thể sử dụng thuật toán băm cuộn để nhanh chóng tính toán giá trị băm của chuỗi con.")],-1),B=n(`<h2 id="_3-cai-đat-thuat-toan-rabin-karp" tabindex="-1"><a class="header-anchor" href="#_3-cai-đat-thuat-toan-rabin-karp"><span>3. Cài đặt thuật toán Rabin Karp</span></a></h2><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"># T là chuỗi văn bản, p là chuỗi mẫu, d là số lượng ký tự trong bộ ký tự, q là số nguyên tố</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">def</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> rabinKarp</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#D19A66;font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="color:#005CC5;--shiki-dark:#56B6C2;">str</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#D19A66;font-style:inherit;--shiki-dark-font-style:italic;">p</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="color:#005CC5;--shiki-dark:#56B6C2;">str</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#D19A66;font-style:inherit;--shiki-dark-font-style:italic;">d</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#D19A66;font-style:inherit;--shiki-dark-font-style:italic;">q</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) -&gt; </span><span style="color:#005CC5;--shiki-dark:#56B6C2;">int</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    n, m </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#005CC5;--shiki-dark:#56B6C2;"> len</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(T), </span><span style="color:#005CC5;--shiki-dark:#56B6C2;">len</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(p)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> n </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> m:</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    hash_p, hash_t </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">0</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    for</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> i </span><span style="color:#D73A49;--shiki-dark:#C678DD;">in</span><span style="color:#005CC5;--shiki-dark:#56B6C2;"> range</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(m):</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">        hash_p </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (hash_p </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> d </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="color:#005CC5;--shiki-dark:#56B6C2;"> ord</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(p[i])) </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">%</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> q           </span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"># Tính giá trị băm của chuỗi mẫu p</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">        hash_t </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (hash_t </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> d </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="color:#005CC5;--shiki-dark:#56B6C2;"> ord</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(T[i])) </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">%</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> q           </span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"># Tính giá trị băm của chuỗi con đầu tiên trong văn bản T</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    power </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#005CC5;--shiki-dark:#56B6C2;"> pow</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(d, m </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">%</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> q                           </span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"># power được sử dụng để loại bỏ ký tự khi cuộn</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    for</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> i </span><span style="color:#D73A49;--shiki-dark:#C678DD;">in</span><span style="color:#005CC5;--shiki-dark:#56B6C2;"> range</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(n </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> m </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> hash_p </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">==</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> hash_t:                            </span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"># Kiểm tra giá trị băm của chuỗi mẫu p và chuỗi con</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">            match </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> True</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">                                # Nếu giá trị băm bằng nhau, kiểm tra từng ký tự của chuỗi mẫu và chuỗi con để xác nhận khớp (tránh xung đột băm)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">            for</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> j </span><span style="color:#D73A49;--shiki-dark:#C678DD;">in</span><span style="color:#005CC5;--shiki-dark:#56B6C2;"> range</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(m):</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">                if</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> T[i </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> j] </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">!=</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> p[j]:</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">                    match </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> False</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">                       # Nếu có ký tự không khớp giữa chuỗi mẫu và chuỗi con, kiểm tra không thành công, thoát khỏi vòng lặp</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">                    break</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">            if</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> match:                                   </span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"># Nếu từng ký tự của chuỗi mẫu và chuỗi con khớp, trả về vị trí bắt đầu khớp</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">                return</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> i</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> i </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> n </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> m:                                   </span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"># Tính giá trị băm của chuỗi con kế tiếp</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">            hash_t </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (hash_t </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> power </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="color:#005CC5;--shiki-dark:#56B6C2;"> ord</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(T[i])) </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">%</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> q   </span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"># Loại bỏ ký tự T[i]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">            hash_t </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (hash_t </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> d </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="color:#005CC5;--shiki-dark:#56B6C2;"> ord</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(T[i </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> m])) </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">%</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> q   </span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"># Thêm ký tự T[i + m]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">            hash_t </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (hash_t </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> q) </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">%</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> q                   </span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"># Đảm bảo hash_t &gt;= 0</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-phan-tich-thuat-toan-rk" tabindex="-1"><a class="header-anchor" href="#_4-phan-tich-thuat-toan-rk"><span>4. Phân tích thuật toán RK</span></a></h2>`,3),b=s("p",null,[a("Thuật toán RK có thể coi là một cải tiến của thuật toán BF. Trong thuật toán BF, mỗi ký tự đều cần được so sánh. Trong thuật toán RK, việc kiểm tra xem giá trị băm của chuỗi mẫu có bằng giá trị băm của mỗi chuỗi con được thực hiện trong thời gian "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])]),a(". Tổng cộng cần so sánh "),s("code",null,"n - m + 1"),a(" chuỗi con, do đó thời gian chạy của thuật toán RK là "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),a(". So với thuật toán BF, hiệu suất của thuật toán RK được cải thiện đáng kể.")],-1),v=s("p",null,[a("Tuy nhiên, nếu có xung đột xảy ra, hiệu suất của thuật toán sẽ giảm. Trường hợp xấu nhất là mỗi lần so sánh giá trị băm của chuỗi mẫu và chuỗi con đều bằng nhau, nhưng mỗi lần đều xảy ra xung đột, điều này đòi hỏi kiểm tra từng ký tự của chuỗi mẫu và chuỗi con để xác nhận khớp, tổng số lần so sánh sẽ là "),s("code",null,"m * (n - m + 1)"),a(", thời gian chạy sẽ trở thành "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"m"),s("mo",null,"∗"),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(m * n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),a(".")],-1),A=[c,r,m,p,o,h,d,u,g,k,y,B,b,v];function C(D,f){return i(),t("div",null,A)}const E=l(e,[["render",C],["__file","Rabin Karp.html.vue"]]),_=JSON.parse('{"path":"/dsa/algo/string/spm/Rabin%20Karp.html","title":"Rabin Karp","lang":"en-US","frontmatter":{"title":"Rabin Karp","tags":["dsa","algorithm"],"categories":["dsa","algorithm"],"date created":"2023-09-29T00:00:00.000Z","date modified":"2023-09-30T00:00:00.000Z","description":"1. Giới thiệu thuật toán Rabin Karp Thuật toán Rabin Karp: Thường được gọi là thuật toán RK. Được đặt theo tên hai nhà phát minh của nó là Michael Oser Rabin và Richard Manning ...","head":[["meta",{"property":"og:url","content":"https://vanhung4499.github.io/dsa/algo/string/spm/Rabin%20Karp.html"}],["meta",{"property":"og:site_name","content":"vanhung4499"}],["meta",{"property":"og:title","content":"Rabin Karp"}],["meta",{"property":"og:description","content":"1. Giới thiệu thuật toán Rabin Karp Thuật toán Rabin Karp: Thường được gọi là thuật toán RK. Được đặt theo tên hai nhà phát minh của nó là Michael Oser Rabin và Richard Manning ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-20T12:02:51.000Z"}],["meta",{"property":"article:author","content":"Hung Nguyen"}],["meta",{"property":"article:tag","content":"dsa"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:modified_time","content":"2024-06-20T12:02:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rabin Karp\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-20T12:02:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hung Nguyen\\",\\"url\\":\\"https://vanhung4499.github.io\\",\\"email\\":\\"vanhung4499@gmail.com\\"}]}"]]},"headers":[{"level":2,"title":"1. Giới thiệu thuật toán Rabin Karp","slug":"_1-gioi-thieu-thuat-toan-rabin-karp","link":"#_1-gioi-thieu-thuat-toan-rabin-karp","children":[]},{"level":2,"title":"2. Các bước của thuật toán Rabin Karp","slug":"_2-cac-buoc-cua-thuat-toan-rabin-karp","link":"#_2-cac-buoc-cua-thuat-toan-rabin-karp","children":[{"level":3,"title":"2.1 Các bước chung của thuật toán Rabin Karp","slug":"_2-1-cac-buoc-chung-cua-thuat-toan-rabin-karp","link":"#_2-1-cac-buoc-chung-cua-thuat-toan-rabin-karp","children":[]},{"level":3,"title":"2.2 Thuật toán băm cuộn","slug":"_2-2-thuat-toan-bam-cuon","link":"#_2-2-thuat-toan-bam-cuon","children":[]}]},{"level":2,"title":"3. Cài đặt thuật toán Rabin Karp","slug":"_3-cai-đat-thuat-toan-rabin-karp","link":"#_3-cai-đat-thuat-toan-rabin-karp","children":[]},{"level":2,"title":"4. Phân tích thuật toán RK","slug":"_4-phan-tich-thuat-toan-rk","link":"#_4-phan-tich-thuat-toan-rk","children":[]}],"git":{"createdTime":1718884971000,"updatedTime":1718884971000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":5.53,"words":1659},"filePathRelative":"dsa/algo/string/spm/Rabin Karp.md","localizedDate":"June 20, 2024","excerpt":"<h2>1. Giới thiệu thuật toán Rabin Karp</h2>\\n<blockquote>\\n<p><strong>Thuật toán Rabin Karp</strong>: Thường được gọi là thuật toán RK. Được đặt theo tên hai nhà phát minh của nó là Michael Oser Rabin và Richard Manning Karp. Thuật toán RK là một thuật toán tìm kiếm chuỗi trong chuỗi được đề xuất bởi họ vào năm 1987, sử dụng hàm băm để tìm kiếm chuỗi mẫu trong văn bản.</p>\\n</blockquote>","autoDesc":true}');export{E as comp,_ as data};
