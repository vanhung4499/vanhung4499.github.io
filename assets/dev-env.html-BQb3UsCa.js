import{_ as e,o as a,c as t,a as n}from"./app-BRTHG7K9.js";const i={},o=n('<h1 id="开发环境" tabindex="-1"><a class="header-anchor" href="#开发环境"><span>开发环境</span></a></h1><p>在系统开发的经典模型，一般会分成 2 类 5 种环境：</p><ul><li>【线下】本地环境(local)、开发环境(dev)、测试环境(test)</li><li>【线上】预发布环境(stage)、生产环境(prod)</li></ul><figure><img src="https://doc.iocoder.cn/img/开发环境/01.png" alt="环境示例" tabindex="0" loading="lazy"><figcaption>环境示例</figcaption></figure><ul><li>每个环境、每个项目使用独立的二级域名</li><li>线下、线上各一套 MySQL 数据库，多个环境共享使用</li><li>每个环境对应一个配置文件，后端使用 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-server/src/main/resources/application-dev.yaml" target="_blank" rel="noopener noreferrer"><code>application-{env}.yaml</code></a> 文件，前端使用 <a href="https://github.com/yudaocode/yudao-ui-admin-vue2/blob/master/.env.dev" target="_blank" rel="noopener noreferrer"><code>.env.{env}</code></a> 文件</li></ul><p>友情提示：项目中暂时没有 test、stage、production 等环境的配置，需要自己创建。</p><p>另外，本文的 MySQL 数据库是基础设施的“泛指”，包括 Redis 缓存、MQ 消息队列，都需要线上线下独立。</p><h2 id="_1-本地环境" tabindex="-1"><a class="header-anchor" href="#_1-本地环境"><span><a href="#_1-%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83">#</a> 1. 本地环境</span></a></h2><p>后端工程师使用 <code>application-local.yaml</code> 配置文件，在本地电脑启动后端服务，连接线下 MySQL 数据库。考虑到不影响 dev、test 环境，会配置禁用定时任务、MQ 集群消费的执行。</p><p>前端工程师也会在本地电脑启动前端服务，一般不使用 <code>.env.local</code> 配置文件，而是使用 <code>.env.dev</code> 配置文件，访问 dev 环境的后端服务。如果需要和后端进行本地联调，可以使用 <code>.env.local</code> 配置文件。</p><h2 id="_2-开发环境" tabindex="-1"><a class="header-anchor" href="#_2-开发环境"><span><a href="#_2-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83">#</a> 2. 开发环境</span></a></h2><p>dev 环境的用户是前端工程师、后端工程师，主要用于前后端的联调、又或者功能开发完后的自测。</p><p>一些公司可能不提供 dev 环境，直接使用 test 环境，适合团队规模较小的团队，可以降低服务器的成本。</p><p>不过，测试工程师可能比较反感 dev 和 test 环境不隔离，因为他们是按照测试用例，一轮一轮的进行验收。这个时候，如果前端或者后端工程师部署了 test 环境，“破坏”了他当前轮次的验收。</p><p>疑问：开发环境可以使用独立的 MySQL 数据库吗？</p><p>当然是可以的，提供更好的环境隔离性，避免开发阶段产生过多的脏数据，影响 test 环境的验收。</p><p>不过呢，这也带来额外的成本，部署程序到 test 环境时，需要做一次数据库的同步。</p><h2 id="_3-测试环境" tabindex="-1"><a class="header-anchor" href="#_3-测试环境"><span><a href="#_3-%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83">#</a> 3. 测试环境</span></a></h2><p>test 环境的用户是产品经理、测试工程师，主要用于他们的功能验收。</p><p>考虑到 test 环境的稳定性，一般建议由测试工程师使用 Jenkins 等工具，完成该环境的部署。具体的原因，上面 dev 环境已经解释了。</p><p>疑问：如果需要并行验收多个功能，怎么办？</p><p>并行验收多个功能时候，对应不同的 Git 分支，需要搭建多套测试环境。</p><h2 id="_4-预发布环境" tabindex="-1"><a class="header-anchor" href="#_4-预发布环境"><span><a href="#_4-%E9%A2%84%E5%8F%91%E5%B8%83%E7%8E%AF%E5%A2%83">#</a> 4. 预发布环境</span></a></h2><p>stage 环境的用户是产品经理、测试工程师，连接线上 MySQL 数据库，基于真实的数据，进行功能的全回归测试。</p><p>因为数据更加真实，且更具多样性，所以往往也会测试出较多的 Bug。比较好的解决方案，是将线上数据库定期脱敏，导入线下数据库。</p><p>考虑到 stage 环境的安全性，一般由技术经理、运维工程师进行部署。</p><p>一些公司可能不提供 stage 环境，直接上线到 production 环境，风险非常高，容易产生较多报错。</p><h2 id="_5-生产环境" tabindex="-1"><a class="header-anchor" href="#_5-生产环境"><span><a href="#_5-%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83">#</a> 5. 生产环境</span></a></h2><p>production 环境的用户是真实用户，即线上环境。一般发布上线时，会进行核心功能的快速测试，避免主流程存在问题。</p><p>考虑到 production 环境的问题排查效率，会给技术核心开放 MySQL 数据库的读权限。</p>',30),r=[o];function l(p,s){return a(),t("div",null,r)}const c=e(i,[["render",l],["__file","dev-env.html.vue"]]),h=JSON.parse('{"path":"/project/rouyi-vue-pro/dev-env.html","title":"开发环境","lang":"en-US","frontmatter":{"title":"开发环境","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":162,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 本地环境","slug":"_1-本地环境","link":"#_1-本地环境","children":[]},{"level":2,"title":"# 2. 开发环境","slug":"_2-开发环境","link":"#_2-开发环境","children":[]},{"level":2,"title":"# 3. 测试环境","slug":"_3-测试环境","link":"#_3-测试环境","children":[]},{"level":2,"title":"# 4. 预发布环境","slug":"_4-预发布环境","link":"#_4-预发布环境","children":[]},{"level":2,"title":"# 5. 生产环境","slug":"_5-生产环境","link":"#_5-生产环境","children":[]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":3.31,"words":994},"filePathRelative":"project/rouyi-vue-pro/dev-env.md","localizedDate":"July 7, 2024"}');export{c as comp,h as data};
