import{_ as e,o as a,c as n,a as i}from"./app-5QVbWi7Z.js";const t={};function p(l,s){return a(),n("div",null,s[0]||(s[0]=[i(`<h1 id="数据脱敏" tabindex="-1"><a class="header-anchor" href="#数据脱敏"><span>数据脱敏</span></a></h1><p>接口在返回一些<strong>敏感</strong>或<strong>隐私</strong>数据时，是需要进行脱敏处理，通常的手段是使用 <code>*</code> 隐藏一部分数据。例如说：</p><table><thead><tr><th>类型</th><th>原始数据</th><th>脱敏数据</th></tr></thead><tbody><tr><td>手机</td><td>13248765917</td><td>132****5917</td></tr><tr><td>身份证</td><td>530321199204074611</td><td>530321**********11</td></tr><tr><td>银行卡</td><td>9988002866797031</td><td>998800********31</td></tr></tbody></table><h2 id="_1-脱敏组件" tabindex="-1"><a class="header-anchor" href="#_1-脱敏组件"><span><a href="#_1-%E8%84%B1%E6%95%8F%E7%BB%84%E4%BB%B6">#</a> 1. 脱敏组件</span></a></h2><p>脱敏组件，由 <code>yudao-spring-boot-starter-web</code> 的 <a href="https://github.com/YunaiV/yudao-cloud/tree/master/yudao-framework/yudao-spring-boot-starter-web/src/main/java/cn/iocoder/yudao/framework/desensitize" target="_blank" rel="noopener noreferrer"><code>desensitize</code></a> 包实现，基于 Jackson 拓展，只需要在字段上添加脱敏注解，即可实现对该字段进行脱敏。</p><p>使用步骤如下：</p><p>在字段上添加脱敏注解。如下所示：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>@Data</span></span>
<span class="line"><span>public static class DesensitizeDemo {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @MobileDesensitize // 手机号的脱敏注解</span></span>
<span class="line"><span>    private String phoneNumber;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="_2-内置脱敏注解" tabindex="-1"><a class="header-anchor" href="#_2-内置脱敏注解"><span><a href="#_2-%E5%86%85%E7%BD%AE%E8%84%B1%E6%95%8F%E6%B3%A8%E8%A7%A3">#</a> 2. 内置脱敏注解</span></a></h2><p>根据不同的脱敏处理方式，项目内置了两类脱敏注解：正则脱敏、滑块脱敏。</p><h3 id="_2-1-regex-正则脱敏" tabindex="-1"><a class="header-anchor" href="#_2-1-regex-正则脱敏"><span><a href="#_2-1-regex-%E6%AD%A3%E5%88%99%E8%84%B1%E6%95%8F">#</a> 2.1 regex 正则脱敏</span></a></h3><h4 id="_2-1-1-regexdesensitize-注解" tabindex="-1"><a class="header-anchor" href="#_2-1-1-regexdesensitize-注解"><span><a href="#_2-1-1-regexdesensitize-%E6%B3%A8%E8%A7%A3">#</a> 2.1.1 @RegexDesensitize 注解</span></a></h4><p>正则脱敏注解 <code>@RegexDesensitize</code>：根据<strong>正则表达式</strong>，将原始数据进行<strong>替换</strong>处理。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>public @interface RegexDesensitize {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 匹配的正则表达式（默认匹配所有）</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    String regex() default &quot;^[\\\\s\\\\S]*$&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 替换规则，会将匹配到的字符串全部替换成 replacer</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    String replacer() default &quot;******&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><p>例如说：<code>regex=123; replacer=******</code> 表示将 <code>123</code> 替换为 <code>******</code></p><ul><li>原始字符串 123456789</li><li>脱敏后字符串 ******456789</li></ul><h4 id="_2-1-2-其它正则脱敏注解" tabindex="-1"><a class="header-anchor" href="#_2-1-2-其它正则脱敏注解"><span><a href="#_2-1-2-%E5%85%B6%E5%AE%83%E6%AD%A3%E5%88%99%E8%84%B1%E6%95%8F%E6%B3%A8%E8%A7%A3">#</a> 2.1.2 其它正则脱敏注解</span></a></h4><p>项目内置了其它基于正则脱敏的常用注解，无需手动填写 <code>regex</code>、<code>replacer</code> 属性，更加方便。例如说：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>@Data</span></span>
<span class="line"><span>public static class DesensitizeDemo {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @EmailDesensitize</span></span>
<span class="line"><span>    private String email;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><p>所有注解如下：</p><table><thead><tr><th>注解</th><th>原始数据</th><th>脱敏数据</th></tr></thead><tbody><tr><td><code>@EmailDesensitize</code></td><td><a href="mailto:example@gmail.com" target="_blank" rel="noopener noreferrer">example@gmail.com</a></td><td>e****@gmail.com</td></tr></tbody></table><h3 id="_2-2-slider-滑块脱敏" tabindex="-1"><a class="header-anchor" href="#_2-2-slider-滑块脱敏"><span><a href="#_2-2-slider-%E6%BB%91%E5%9D%97%E8%84%B1%E6%95%8F">#</a> 2.2 slider 滑块脱敏</span></a></h3><h4 id="_2-2-1-sliderdesensitize-注解" tabindex="-1"><a class="header-anchor" href="#_2-2-1-sliderdesensitize-注解"><span><a href="#_2-2-1-sliderdesensitize-%E6%B3%A8%E8%A7%A3">#</a> 2.2.1 @SliderDesensitize 注解</span></a></h4><p>滑块脱敏注解 <code>@SliderDesensitize</code>：根据设置的左右明文字符长度，中间部分全部替换为 <code>*</code>。</p><p>例如说：<code>prefixKeep=3; suffixKeep=4; replacer=*</code> 表示前 3 后 4 保持明文，中间都替换成 <code>*</code></p><ul><li>原始字符串 13248765917</li><li>脱敏后字符串 132****5917</li></ul><h4 id="_2-2-2-其它滑块脱敏注解" tabindex="-1"><a class="header-anchor" href="#_2-2-2-其它滑块脱敏注解"><span><a href="#_2-2-2-%E5%85%B6%E5%AE%83%E6%BB%91%E5%9D%97%E8%84%B1%E6%95%8F%E6%B3%A8%E8%A7%A3">#</a> 2.2.2 其它滑块脱敏注解</span></a></h4><p>项目内置了其它基于滑块脱敏的常用注解，无需手动填写 <code>prefixKeep</code>、<code>suffixKeep</code>、<code>replacer</code> 属性，更加方便。例如说：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>@Data</span></span>
<span class="line"><span>public static class DesensitizeDemo {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @MobileDesensitize</span></span>
<span class="line"><span>    private String mobile;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><p>所有注解如下：</p><table><thead><tr><th>注解</th><th>原始数据</th><th>脱敏数据</th></tr></thead><tbody><tr><td><code>@MobileDesensitize</code></td><td>13248765917</td><td>132****5917</td></tr><tr><td><code>@FixedPhoneDesensitize</code></td><td>01086551122</td><td>0108*****22</td></tr><tr><td><code>@BankCardDesensitize</code></td><td>9988002866797031</td><td>998800********31</td></tr><tr><td><code>@PasswordDesensitize</code></td><td>123456</td><td>******</td></tr><tr><td><code>@CarLicenseDesensitize</code></td><td>粤A66666</td><td>粤A6***6</td></tr><tr><td><code>@ChineseNameDesensitize</code></td><td>刘子豪</td><td>刘**</td></tr><tr><td><code>@IdCardDesensitize</code></td><td>530321199204074611</td><td>530321**********11</td></tr></tbody></table><h2 id="_3-自定义脱敏注解" tabindex="-1"><a class="header-anchor" href="#_3-自定义脱敏注解"><span><a href="#_3-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%84%B1%E6%95%8F%E6%B3%A8%E8%A7%A3">#</a> 3. 自定义脱敏注解</span></a></h2><p>如果内置的注解无法满足你的需求，只需要自定义一个脱敏注解，并实现它的脱敏处理器即可。</p><p>例如说，我们要实现一个新的脱敏处理方法，将编号使用 MD5 或 SHA256 计算后返回。步骤如下：</p><p>① 创建 <code>@DigestDesensitize</code> 注解，使用 <code>@DesensitizeBy</code> 标记它使用的处理器。代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>import cn.iocoder.yudao.framework.desensitize.core.base.annotation.DesensitizeBy;</span></span>
<span class="line"><span>import cn.iocoder.yudao.framework.desensitize.core.handler.DigestHandler;</span></span>
<span class="line"><span>import com.fasterxml.jackson.annotation.JacksonAnnotationsInside;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import java.lang.annotation.*;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Documented</span></span>
<span class="line"><span>@Target({ElementType.FIELD})</span></span>
<span class="line"><span>@Retention(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span>@JacksonAnnotationsInside</span></span>
<span class="line"><span>@DesensitizeBy(handler = DigestHandler.class) // 使用 @DesensitizeBy 设置它的处理器</span></span>
<span class="line"><span>public @interface DigestDesensitize {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 摘要算法，例如说：MD5、SHA256</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    String algorithm() default &quot;md5&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 创建 DigestHandler 类，实现 DesensitizationHandler 接口，将编号使用 MD5 或 SHA256 处理。代码如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>import cn.hutool.crypto.digest.DigestUtil;</span></span>
<span class="line"><span>import cn.iocoder.yudao.framework.desensitize.core.annotation.DigestDesensitize;</span></span>
<span class="line"><span>import cn.iocoder.yudao.framework.desensitize.core.base.handler.DesensitizationHandler;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class DigestHandler implements DesensitizationHandler&lt;DigestDesensitize&gt; {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public String desensitize(String origin, DigestDesensitize annotation) {</span></span>
<span class="line"><span>        String algorithm = annotation.algorithm();</span></span>
<span class="line"><span>        return DigestUtil.digester(algorithm).digestHex(origin);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><p>友情提示：</p><p>① 如果自定义的是基于正则脱敏的注解，可选择继承 AbstractRegexDesensitizationHandler 处理器。</p><p>① 如果自定义的是基于滑块脱敏的注解，可选择继承 AbstractSliderDesensitizationHandler 处理器。</p><p>③ 在需要使用的字段上，添加 <code>@DigestDesensitize</code> 注解。示例代码如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>@Data</span></span>
<span class="line"><span>public static class DesensitizeDemo {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @DigestDesensitize</span></span>
<span class="line"><span>    private String email;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><p>完事~</p><h2 id="_4-脱敏工具类" tabindex="-1"><a class="header-anchor" href="#_4-脱敏工具类"><span><a href="#_4-%E8%84%B1%E6%95%8F%E5%B7%A5%E5%85%B7%E7%B1%BB">#</a> 4. 脱敏工具类</span></a></h2><p>Hutool 提供了 <a href="https://apidoc.gitee.com/dromara/hutool/cn/hutool/core/util/DesensitizedUtil.html" target="_blank" rel="noopener noreferrer">DesensitizedUtil</a> 脱敏工具类，支持用户 ID、 中文名、身份证、座机号、手机号、 地址、电子邮件、 密码、车牌、银行卡号的脱敏处理。</p><p>使用方式，代码如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>DesensitizedUtil.desensitized(&quot;100&quot;, DesensitizedUtils.DesensitizedType.USER_ID)) =  &quot;0&quot;</span></span>
<span class="line"><span>DesensitizedUtil.desensitized(&quot;段正淳&quot;, DesensitizedUtils.DesensitizedType.CHINESE_NAME)) = &quot;段**&quot;</span></span>
<span class="line"><span>DesensitizedUtil.desensitized(&quot;51343620000320711X&quot;, DesensitizedUtils.DesensitizedType.ID_CARD)) = &quot;5***************1X&quot;</span></span>
<span class="line"><span>DesensitizedUtil.desensitized(&quot;09157518479&quot;, DesensitizedUtils.DesensitizedType.FIXED_PHONE)) = &quot;0915*****79&quot;</span></span>
<span class="line"><span>DesensitizedUtil.desensitized(&quot;18049531999&quot;, DesensitizedUtils.DesensitizedType.MOBILE_PHONE)) = &quot;180****1999&quot;</span></span>
<span class="line"><span>DesensitizedUtil.desensitized(&quot;北京市海淀区马连洼街道289号&quot;, DesensitizedUtils.DesensitizedType.ADDRESS)) = &quot;北京市海淀区马********&quot;</span></span>
<span class="line"><span>DesensitizedUtil.desensitized(&quot;duandazhi-jack@gmail.com.cn&quot;, DesensitizedUtils.DesensitizedType.EMAIL)) = &quot;d*************@gmail.com.cn&quot;</span></span>
<span class="line"><span>DesensitizedUtil.desensitized(&quot;1234567890&quot;, DesensitizedUtils.DesensitizedType.PASSWORD)) = &quot;**********&quot;</span></span>
<span class="line"><span>DesensitizedUtil.desensitized(&quot;苏D40000&quot;, DesensitizedUtils.DesensitizedType.CAR_LICENSE)) = &quot;苏D4***0&quot;</span></span>
<span class="line"><span>DesensitizedUtil.desensitized(&quot;11011111222233333256&quot;, DesensitizedUtils.DesensitizedType.BANK_CARD)) = &quot;1101 **** **** **** 3256&quot;</span></span></code></pre></div><p>适合场景，逻辑里需要直接对某个变量进行脱敏处理，然后打印 logger 日志，或者存储到数据库中。</p>`,49)]))}const r=e(t,[["render",p],["__file","desensitize.html.vue"]]),o=JSON.parse('{"path":"/project/yudao-cloud/desensitize.html","title":"数据脱敏","lang":"en-US","frontmatter":{"title":"数据脱敏","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":145,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 脱敏组件","slug":"_1-脱敏组件","link":"#_1-脱敏组件","children":[]},{"level":2,"title":"# 2. 内置脱敏注解","slug":"_2-内置脱敏注解","link":"#_2-内置脱敏注解","children":[{"level":3,"title":"# 2.1 regex 正则脱敏","slug":"_2-1-regex-正则脱敏","link":"#_2-1-regex-正则脱敏","children":[]},{"level":3,"title":"# 2.2 slider 滑块脱敏","slug":"_2-2-slider-滑块脱敏","link":"#_2-2-slider-滑块脱敏","children":[]}]},{"level":2,"title":"# 3. 自定义脱敏注解","slug":"_3-自定义脱敏注解","link":"#_3-自定义脱敏注解","children":[]},{"level":2,"title":"# 4. 脱敏工具类","slug":"_4-脱敏工具类","link":"#_4-脱敏工具类","children":[]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":3.69,"words":1107},"filePathRelative":"project/yudao-cloud/desensitize.md","localizedDate":"July 7, 2024"}');export{r as comp,o as data};
