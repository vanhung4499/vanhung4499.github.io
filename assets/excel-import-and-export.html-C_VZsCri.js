import{_ as t,o as a,c as n,a as o}from"./app-5QVbWi7Z.js";const d={};function r(s,e){return a(),n("div",null,e[0]||(e[0]=[o(`<h1 id="excel-导入导出" tabindex="-1"><a class="header-anchor" href="#excel-导入导出"><span>Excel 导入导出</span></a></h1><p>项目的 <a href="https://github.com/YunaiV/ruoyi-vue-pro/tree/master/yudao-framework/yudao-spring-boot-starter-excel" target="_blank" rel="noopener noreferrer"><code>yudao-spring-boot-starter-excel</code></a> 技术组件，基于 EasyExcel 实现 Excel 的读写操作，可用于实现最常见的 Excel 导入导出等功能。</p><p>EasyExcel 的介绍？</p><p>EasyExcel 是阿里开源的 Excel 工具库，具有简单易用、低内存、高性能的特点。</p><p>在尽可用节约内存的情况下，支持百万行的 Excel 读写操作。例如说，仅使用 64M 内存，20 秒完成 75M（46 万行 25 列）Excel 的读取。并且，还有极速模式能更快，但是内存占用会在100M 多一点。</p><figure><img src="https://doc.iocoder.cn/img/Excel导入导出/01.png" alt="EasyExcel" tabindex="0" loading="lazy"><figcaption>EasyExcel</figcaption></figure><h2 id="_1-excel-导出" tabindex="-1"><a class="header-anchor" href="#_1-excel-导出"><span><a href="#_1-excel-%E5%AF%BC%E5%87%BA">#</a> 1. Excel 导出</span></a></h2><p>以 [系统管理 -&gt; 岗位管理] 菜单为例子，讲解它 Excel 导出的实现。</p><figure><img src="https://doc.iocoder.cn/img/Excel导入导出/02.png" alt="系统管理 -&gt; 岗位管理" tabindex="0" loading="lazy"><figcaption>系统管理 -&gt; 岗位管理</figcaption></figure><h3 id="_1-1-后端导入实现" tabindex="-1"><a class="header-anchor" href="#_1-1-后端导入实现"><span><a href="#_1-1-%E5%90%8E%E7%AB%AF%E5%AF%BC%E5%85%A5%E5%AE%9E%E7%8E%B0">#</a> 1.1 后端导入实现</span></a></h3><p>在 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/dept/PostController.java#L88-L97" target="_blank" rel="noopener noreferrer">PostController</a> 类中，定义 <code>/admin-api/system/post/export</code> 导出接口。代码如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>    @GetMapping(&quot;/export&quot;)</span></span>
<span class="line"><span>    @Operation(summary = &quot;岗位管理&quot;)</span></span>
<span class="line"><span>    @PreAuthorize(&quot;@ss.hasPermission(&#39;system:post:export&#39;)&quot;)</span></span>
<span class="line"><span>    @ApiAccessLog(operateType = EXPORT)</span></span>
<span class="line"><span>    public void export(HttpServletResponse response, @Validated PostPageReqVO reqVO) throws IOException {</span></span>
<span class="line"><span>         // ① 查询数据</span></span>
<span class="line"><span>        reqVO.setPageSize(PageParam.PAGE_SIZE_NONE);</span></span>
<span class="line"><span>        List&lt;PostDO&gt; list = postService.getPostPage(reqVO).getList();</span></span>
<span class="line"><span>        // ② 导出 Excel</span></span>
<span class="line"><span>        ExcelUtils.write(response, &quot;岗位数据.xls&quot;, &quot;岗位列表&quot;, PostRespVO.class,</span></span>
<span class="line"><span>                BeanUtils.toBean(list, PostRespVO.class));</span></span>
<span class="line"><span>    }</span></span></code></pre></div><ul><li>① 将从数据库中查询出来的列表，一般可以复用分页接口，需要设置 <code>.setPageSize(PageParam.PAGE_SIZE_NONE)</code> 不过滤分页。</li><li>② 将 PostDO 列表，转换成 PostRespVO 列表，之后通过 ExcelUtils 转换成 Excel 文件，返回给前端。</li></ul><h4 id="_1-1-1-postexcelvo-类" tabindex="-1"><a class="header-anchor" href="#_1-1-1-postexcelvo-类"><span><a href="#_1-1-1-postexcelvo-%E7%B1%BB">#</a> 1.1.1 PostExcelVO 类</span></a></h4><p>复用 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/dept/vo/post/PostRespVO.java" target="_blank" rel="noopener noreferrer">PostRespVO</a> 类，实现 岗位 Excel 导出的 VO 类。代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>@Schema(description = &quot;管理后台 - 岗位信息 Response VO&quot;)</span></span>
<span class="line"><span>@Data</span></span>
<span class="line"><span>@ExcelIgnoreUnannotated // ③</span></span>
<span class="line"><span>public class PostRespVO {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Schema(description = &quot;岗位序号&quot;, requiredMode = Schema.RequiredMode.REQUIRED, example = &quot;1024&quot;)</span></span>
<span class="line"><span>    @ExcelProperty(&quot;岗位序号&quot;) // ①</span></span>
<span class="line"><span>    private Long id;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Schema(description = &quot;岗位名称&quot;, requiredMode = Schema.RequiredMode.REQUIRED, example = &quot;小土豆&quot;)</span></span>
<span class="line"><span>    @ExcelProperty(&quot;岗位名称&quot;)</span></span>
<span class="line"><span>    private String name;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Schema(description = &quot;岗位编码&quot;, requiredMode = Schema.RequiredMode.REQUIRED, example = &quot;yudao&quot;)</span></span>
<span class="line"><span>    @ExcelProperty(&quot;岗位编码&quot;)</span></span>
<span class="line"><span>    private String code;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Schema(description = &quot;显示顺序不能为空&quot;, requiredMode = Schema.RequiredMode.REQUIRED, example = &quot;1024&quot;)</span></span>
<span class="line"><span>    @ExcelProperty(&quot;岗位排序&quot;)</span></span>
<span class="line"><span>    private Integer sort;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Schema(description = &quot;状态，参见 CommonStatusEnum 枚举类&quot;, requiredMode = Schema.RequiredMode.REQUIRED, example = &quot;1&quot;)</span></span>
<span class="line"><span>    // ②</span></span>
<span class="line"><span>    @ExcelProperty(value = &quot;状态&quot;, converter = DictConvert.class)</span></span>
<span class="line"><span>    @DictFormat(DictTypeConstants.COMMON_STATUS)</span></span>
<span class="line"><span>    private Integer status;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Schema(description = &quot;备注&quot;, example = &quot;快乐的备注&quot;)</span></span>
<span class="line"><span>    private String remark;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Schema(description = &quot;创建时间&quot;, requiredMode = Schema.RequiredMode.REQUIRED)</span></span>
<span class="line"><span>    private LocalDateTime createTime;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>① 每个字段上，添加 <a href="https://github.com/alibaba/easyexcel/blob/master/easyexcel-core/src/main/java/com/alibaba/excel/annotation/ExcelProperty.java" target="_blank" rel="noopener noreferrer"><code>@ExcelProperty</code></a> 注解，声明 Excel Head 头部的名字。每个字段的<strong>值</strong>，就是它对应的 Excel Row 行的数据值。</li><li>② 如果字段的的注解 <code>converter</code> 属性是 DictConvert 转换器，用于字典的转换。例如说，通过 <code>status</code> 字段，将 <code>status = 1</code> 转换成“开启”列，<code>status = 0</code> 转换成”禁用”列。稍后，我们会在 <a href="#_3-%E5%AD%97%E6%AE%B5%E8%BD%AC%E6%8D%A2%E5%99%A8">「3. 字段转换器」</a> 小节来详细讲讲。</li><li>③ 在类上，添加 <a href="https://github.com/alibaba/easyexcel/blob/master/src/main/java/com/alibaba/excel/annotation/ExcelIgnoreUnannotated.java" target="_blank" rel="noopener noreferrer"><code>@ExcelIgnoreUnannotated</code></a> 注解，表示未添加 <code>@ExcelProperty</code> 的字段，不进行导出。</li></ul><p>因此，最终 Excel 导出的效果如下：</p><figure><img src="https://doc.iocoder.cn/img/Excel导入导出/05.png" alt="PostExcelVO 效果" tabindex="0" loading="lazy"><figcaption>PostExcelVO 效果</figcaption></figure><h4 id="_1-1-2-excelutils-写入" tabindex="-1"><a class="header-anchor" href="#_1-1-2-excelutils-写入"><span><a href="#_1-1-2-excelutils-%E5%86%99%E5%85%A5">#</a> 1.1.2 ExcelUtils 写入</span></a></h4><p>ExcelUtils 的 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-excel/src/main/java/cn/iocoder/yudao/framework/excel/core/util/ExcelUtils.java#L19-L40" target="_blank" rel="noopener noreferrer"><code>#write(...)</code></a> 方法，将列表以 Excel 响应给前端。代码如下图：</p><figure><img src="https://doc.iocoder.cn/img/Excel导入导出/06.png" alt="write 方法" tabindex="0" loading="lazy"><figcaption>write 方法</figcaption></figure><h3 id="_1-2-前端导入实现" tabindex="-1"><a class="header-anchor" href="#_1-2-前端导入实现"><span><a href="#_1-2-%E5%89%8D%E7%AB%AF%E5%AF%BC%E5%85%A5%E5%AE%9E%E7%8E%B0">#</a> 1.2 前端导入实现</span></a></h3><p>在 <a href="https://github.com/yudaocode/yudao-ui-admin-vue2/blob/master/src/views/system/post/index.vue#L232-L243" target="_blank" rel="noopener noreferrer"><code>post/index.vue</code></a> 界面，定义 <code>#handleExport()</code> 操作，代码如下图：</p><figure><img src="https://doc.iocoder.cn/img/Excel导入导出/07.png" alt="handleExport 方法" tabindex="0" loading="lazy"><figcaption>handleExport 方法</figcaption></figure><h2 id="_2-excel-导入" tabindex="-1"><a class="header-anchor" href="#_2-excel-导入"><span><a href="#_2-excel-%E5%AF%BC%E5%85%A5">#</a> 2. Excel 导入</span></a></h2><p>以 [系统管理 -&gt; 用户管理] 菜单为例子，讲解它 Excel 导出的实现。</p><figure><img src="https://doc.iocoder.cn/img/Excel导入导出/11.png" alt="系统管理 -&gt; 用户管理" tabindex="0" loading="lazy"><figcaption>系统管理 -&gt; 用户管理</figcaption></figure><h3 id="_2-1-后端导入实现" tabindex="-1"><a class="header-anchor" href="#_2-1-后端导入实现"><span><a href="#_2-1-%E5%90%8E%E7%AB%AF%E5%AF%BC%E5%85%A5%E5%AE%9E%E7%8E%B0">#</a> 2.1 后端导入实现</span></a></h3><p>在 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/user/UserController.java#L176-L187" target="_blank" rel="noopener noreferrer">UserController</a> 类中，定义 <code>/admin-api/system/user/import</code> 导入接口。代码如下：</p><figure><img src="https://doc.iocoder.cn/img/Excel导入导出/12.png" alt="导入 Excel 接口" tabindex="0" loading="lazy"><figcaption>导入 Excel 接口</figcaption></figure><p>将前端上传的 Excel 文件，读取成 UserImportExcelVO 列表。</p><h4 id="_2-1-1-userimportexcelvo-类" tabindex="-1"><a class="header-anchor" href="#_2-1-1-userimportexcelvo-类"><span><a href="#_2-1-1-userimportexcelvo-%E7%B1%BB">#</a> 2.1.1 UserImportExcelVO 类</span></a></h4><p>创建 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/dept/vo/post/PostExcelVO.java" target="_blank" rel="noopener noreferrer">UserImportExcelVO</a> 类，用户 Excel 导入的 VO 类。它的作用和 Excel 导入是一样的，代码如下：</p><figure><img src="https://doc.iocoder.cn/img/Excel导入导出/13.png" alt="UserImportExcelVO 代码" tabindex="0" loading="lazy"><figcaption>UserImportExcelVO 代码</figcaption></figure><p>对应使用的 Excel 导入文件如下：</p><figure><img src="https://doc.iocoder.cn/img/Excel导入导出/14.png" alt="UserImportExcelVO 文件" tabindex="0" loading="lazy"><figcaption>UserImportExcelVO 文件</figcaption></figure><h4 id="_2-1-2-excelutils-读取" tabindex="-1"><a class="header-anchor" href="#_2-1-2-excelutils-读取"><span><a href="#_2-1-2-excelutils-%E8%AF%BB%E5%8F%96">#</a> 2.1.2 ExcelUtils 读取</span></a></h4><p>ExcelUtils 的 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-excel/src/main/java/cn/iocoder/yudao/framework/excel/core/util/ExcelUtils.java#L42-L46" target="_blank" rel="noopener noreferrer"><code>#read(...)</code></a> 方法，读取 Excel 文件成列表。代码如下图：</p><figure><img src="https://doc.iocoder.cn/img/Excel导入导出/16.png" alt="read 方法" tabindex="0" loading="lazy"><figcaption>read 方法</figcaption></figure><h3 id="_2-2-前端导入实现" tabindex="-1"><a class="header-anchor" href="#_2-2-前端导入实现"><span><a href="#_2-2-%E5%89%8D%E7%AB%AF%E5%AF%BC%E5%85%A5%E5%AE%9E%E7%8E%B0">#</a> 2.2 前端导入实现</span></a></h3><p>在 <a href="https://github.com/yudaocode/yudao-ui-admin-vue2/blob/master/src/views/system/user/index.vue#L174-L193" target="_blank" rel="noopener noreferrer"><code>user/index.vue</code></a> 界面，定义 Excel 导入的功能，代码如下图：</p><figure><img src="https://doc.iocoder.cn/img/Excel导入导出/15.png" alt="Excel 导入的功能" tabindex="0" loading="lazy"><figcaption>Excel 导入的功能</figcaption></figure><h2 id="_3-字段转换器" tabindex="-1"><a class="header-anchor" href="#_3-字段转换器"><span><a href="#_3-%E5%AD%97%E6%AE%B5%E8%BD%AC%E6%8D%A2%E5%99%A8">#</a> 3. 字段转换器</span></a></h2><p>EasyExcel 定义了 <a href="https://github.com/alibaba/easyexcel/blob/master/src/main/java/com/alibaba/excel/converters/Converter.java" target="_blank" rel="noopener noreferrer">Converter</a> 接口，用于实现字段的转换。它有两个核心方法：</p><p>① <code>#convertToJavaData(...)</code> 方法：将 Excel Row 对应表格的值，转换成 Java 内存中的值。例如说，Excel 的“状态”列，将“状态”列转换成 <code>status = 1</code>，”禁用”列转换成 <code>status = 0</code>。</p><p>② <code>#convertToExcelData(...)</code> 方法：恰好相反，将 Java 内存中的值，转换成 Excel Row 对应表格的值。例如说，Excel 的“状态”列，将 <code>status = 1</code> 转换成“开启”列，<code>status = 0</code> 转换成”禁用”列。</p><h3 id="_3-1-dictconvert-实现" tabindex="-1"><a class="header-anchor" href="#_3-1-dictconvert-实现"><span><a href="#_3-1-dictconvert-%E5%AE%9E%E7%8E%B0">#</a> 3.1 DictConvert 实现</span></a></h3><p>以项目中提供的 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-excel/src/main/java/cn/iocoder/yudao/framework/excel/core/convert/DictConvert.java" target="_blank" rel="noopener noreferrer">DictConvert</a> 举例子，它实现 Converter 接口，提供字典数据的转换。代码如下：</p><figure><img src="https://doc.iocoder.cn/img/Excel导入导出/21.png" alt="DictConvert 实现" tabindex="0" loading="lazy"><figcaption>DictConvert 实现</figcaption></figure><p>实现的代码比较简单，自己看看就可以明白。</p><h3 id="_3-1-dictconvert-使用示例" tabindex="-1"><a class="header-anchor" href="#_3-1-dictconvert-使用示例"><span><a href="#_3-1-dictconvert-%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B">#</a> 3.1 DictConvert 使用示例</span></a></h3><p>在需要转换的字段上，声明注解 <code>@ExcelProperty</code> 的 <code>converter</code> 属性是 DictConvert 转换器，注解 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-excel/src/main/java/cn/iocoder/yudao/framework/excel/core/annotations/DictFormat.java" target="_blank" rel="noopener noreferrer"><code>@DictFormat</code></a> 为对应的字典数据的类型。示例如下：</p><figure><img src="https://doc.iocoder.cn/img/Excel导入导出/22.png" alt="DictConvert 使用示例" tabindex="0" loading="lazy"><figcaption>DictConvert 使用示例</figcaption></figure><h2 id="_4-更多-easyexcel-注解" tabindex="-1"><a class="header-anchor" href="#_4-更多-easyexcel-注解"><span><a href="#_4-%E6%9B%B4%E5%A4%9A-easyexcel-%E6%B3%A8%E8%A7%A3">#</a> 4. 更多 EasyExcel 注解</span></a></h2><p>基于 <a href="https://juejin.cn/post/6844904177974542343" target="_blank" rel="noopener noreferrer">《EasyExcel 中的注解 》</a> 文章，整理相关注解。</p><h3 id="_4-1-excelproperty" tabindex="-1"><a class="header-anchor" href="#_4-1-excelproperty"><span><a href="#_4-1-excelproperty">#</a> 4.1 <code>@ExcelProperty</code></span></a></h3><p>这是最常用的一个注解，注解中有三个参数 <code>value</code>、<code>index</code>、<code>converter</code> 分别代表列明、列序号、数据转换方式。<code>value</code> 和 <code>index</code> 只能二选一，通常不用设置 <code>converter</code>。</p><p><strong>最佳实践</strong></p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>public class ImeiEncrypt {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @ExcelProperty(value = &quot;imei&quot;)</span></span>
<span class="line"><span>    private String imei;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="_4-2-columnwith" tabindex="-1"><a class="header-anchor" href="#_4-2-columnwith"><span><a href="#_4-2-columnwith">#</a> 4.2 <code>@ColumnWith</code></span></a></h3><p>用于设置列宽度的注解，注解中只有一个参数 <code>value</code>。<code>value</code> 的单位是字符长度，最大可以设置 255 个字符，因为一个 Excel 单元格最大可以写入的字符个数，就是 255 个字符。</p><p><strong>最佳实践</strong></p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>public class ImeiEncrypt {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @ColumnWidth(value = 18)</span></span>
<span class="line"><span>    private String imei;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="_4-3-contentfontstyle" tabindex="-1"><a class="header-anchor" href="#_4-3-contentfontstyle"><span><a href="#_4-3-contentfontstyle">#</a> 4.3 <code>@ContentFontStyle</code></span></a></h3><p>用于设置单元格内容字体格式的注解。参数如下：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>fontName</code></td><td>字体名称</td></tr><tr><td><code>fontHeightInPoints</code></td><td>字体高度</td></tr><tr><td><code>italic</code></td><td>是否斜体</td></tr><tr><td><code>strikeout</code></td><td>是否设置删除水平线</td></tr><tr><td><code>color</code></td><td>字体颜色</td></tr><tr><td><code>typeOffset</code></td><td>偏移量</td></tr><tr><td><code>underline</code></td><td>下划线</td></tr><tr><td><code>bold</code></td><td>是否加粗</td></tr><tr><td><code>charset</code></td><td>编码格式</td></tr></tbody></table><h3 id="_4-4-contentloopmerge" tabindex="-1"><a class="header-anchor" href="#_4-4-contentloopmerge"><span><a href="#_4-4-contentloopmerge">#</a> 4.4 <code>@ContentLoopMerge</code></span></a></h3><p>用于设置合并单元格的注解。参数如下：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>eachRow</code></td><td></td></tr><tr><td><code>columnExtend</code></td><td></td></tr></tbody></table><h3 id="_4-5-contentrowheight" tabindex="-1"><a class="header-anchor" href="#_4-5-contentrowheight"><span><a href="#_4-5-contentrowheight">#</a> 4.5 <code>@ContentRowHeight</code></span></a></h3><p>用于设置行高。参数如下：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>value</td><td>行高，<code>-1</code>代表自动行高</td></tr></tbody></table><h3 id="_4-6-contentstyle" tabindex="-1"><a class="header-anchor" href="#_4-6-contentstyle"><span><a href="#_4-6-contentstyle">#</a> 4.6 <code>@ContentStyle</code></span></a></h3><p>设置内容格式注解。参数如下：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>dataFormat</code></td><td>日期格式</td></tr><tr><td><code>hidden</code></td><td>设置单元格使用此样式隐藏</td></tr><tr><td><code>locked</code></td><td>设置单元格使用此样式锁定</td></tr><tr><td><code>quotePrefix</code></td><td>在单元格前面增加\`符号，数字或公式将以字符串形式展示</td></tr><tr><td><code>horizontalAlignment</code></td><td>设置是否水平居中</td></tr><tr><td><code>wrapped</code></td><td>设置文本是否应换行。将此标志设置为<code>true</code>通过在多行上显示使单元格中的所有内容可见</td></tr><tr><td><code>verticalAlignment</code></td><td>设置是否垂直居中</td></tr><tr><td><code>rotation</code></td><td>设置单元格中文本旋转角度。03版本的Excel旋转角度区间为-90°<sub>90°，07版本的Excel旋转角度区间为0°</sub>180°</td></tr><tr><td><code>indent</code></td><td>设置单元格中缩进文本的空格数</td></tr><tr><td><code>borderLeft</code></td><td>设置左边框的样式</td></tr><tr><td><code>borderRight</code></td><td>设置右边框样式</td></tr><tr><td><code>borderTop</code></td><td>设置上边框样式</td></tr><tr><td><code>borderBottom</code></td><td>设置下边框样式</td></tr><tr><td><code>leftBorderColor</code></td><td>设置左边框颜色</td></tr><tr><td><code>rightBorderColor</code></td><td>设置右边框颜色</td></tr><tr><td><code>topBorderColor</code></td><td>设置上边框颜色</td></tr><tr><td><code>bottomBorderColor</code></td><td>设置下边框颜色</td></tr><tr><td><code>fillPatternType</code></td><td>设置填充类型</td></tr><tr><td><code>fillBackgroundColor</code></td><td>设置背景色</td></tr><tr><td><code>fillForegroundColor</code></td><td>设置前景色</td></tr><tr><td><code>shrinkToFit</code></td><td>设置自动单元格自动大小</td></tr></tbody></table><h3 id="_4-7-headfontstyle" tabindex="-1"><a class="header-anchor" href="#_4-7-headfontstyle"><span><a href="#_4-7-headfontstyle">#</a> 4.7 <code>@HeadFontStyle</code></span></a></h3><p>用于定制标题字体格式。参数如下：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>fontName</code></td><td>设置字体名称</td></tr><tr><td><code>fontHeightInPoints</code></td><td>设置字体高度</td></tr><tr><td><code>italic</code></td><td>设置字体是否斜体</td></tr><tr><td><code>strikeout</code></td><td>是否设置删除线</td></tr><tr><td><code>color</code></td><td>设置字体颜色</td></tr><tr><td><code>typeOffset</code></td><td>设置偏移量</td></tr><tr><td><code>underline</code></td><td>设置下划线</td></tr><tr><td><code>charset</code></td><td>设置字体编码</td></tr><tr><td><code>bold</code></td><td>设置字体是否家畜</td></tr></tbody></table><h3 id="_4-8-headrowheight" tabindex="-1"><a class="header-anchor" href="#_4-8-headrowheight"><span><a href="#_4-8-headrowheight">#</a> 4.8 <code>@HeadRowHeight</code></span></a></h3><p>设置标题行行高。参数如下：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>value</code></td><td>设置行高，-1代表自动行高</td></tr></tbody></table><h3 id="_4-9-headstyle" tabindex="-1"><a class="header-anchor" href="#_4-9-headstyle"><span><a href="#_4-9-headstyle">#</a> 4.9 <code>@HeadStyle</code></span></a></h3><p>设置标题样式。参数如下：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>dataFormat</code></td><td>日期格式</td></tr><tr><td><code>hidden</code></td><td>设置单元格使用此样式隐藏</td></tr><tr><td><code>locked</code></td><td>设置单元格使用此样式锁定</td></tr><tr><td><code>quotePrefix</code></td><td>在单元格前面增加\`符号，数字或公式将以字符串形式展示</td></tr><tr><td><code>horizontalAlignment</code></td><td>设置是否水平居中</td></tr><tr><td><code>wrapped</code></td><td>设置文本是否应换行。将此标志设置为<code>true</code>通过在多行上显示使单元格中的所有内容可见</td></tr><tr><td><code>verticalAlignment</code></td><td>设置是否垂直居中</td></tr><tr><td><code>rotation</code></td><td>设置单元格中文本旋转角度。03版本的Excel旋转角度区间为-90°<sub>90°，07版本的Excel旋转角度区间为0°</sub>180°</td></tr><tr><td><code>indent</code></td><td>设置单元格中缩进文本的空格数</td></tr><tr><td><code>borderLeft</code></td><td>设置左边框的样式</td></tr><tr><td><code>borderRight</code></td><td>设置右边框样式</td></tr><tr><td><code>borderTop</code></td><td>设置上边框样式</td></tr><tr><td><code>borderBottom</code></td><td>设置下边框样式</td></tr><tr><td><code>leftBorderColor</code></td><td>设置左边框颜色</td></tr><tr><td><code>rightBorderColor</code></td><td>设置右边框颜色</td></tr><tr><td><code>topBorderColor</code></td><td>设置上边框颜色</td></tr><tr><td><code>bottomBorderColor</code></td><td>设置下边框颜色</td></tr><tr><td><code>fillPatternType</code></td><td>设置填充类型</td></tr><tr><td><code>fillBackgroundColor</code></td><td>设置背景色</td></tr><tr><td><code>fillForegroundColor</code></td><td>设置前景色</td></tr><tr><td><code>shrinkToFit</code></td><td>设置自动单元格自动大小</td></tr></tbody></table><h4 id="_4-10-excelignore" tabindex="-1"><a class="header-anchor" href="#_4-10-excelignore"><span><a href="#_4-10-excelignore">#</a> 4.10 <code>@ExcelIgnore</code></span></a></h4><p>不将该字段转换成 Excel。</p><h3 id="_4-11-excelignoreunannotated" tabindex="-1"><a class="header-anchor" href="#_4-11-excelignoreunannotated"><span><a href="#_4-11-excelignoreunannotated">#</a> 4.11 <code>@ExcelIgnoreUnannotated</code></span></a></h3><p>没有注解的字段都不转换</p>`,89)]))}const i=t(d,[["render",r],["__file","excel-import-and-export.html.vue"]]),l=JSON.parse('{"path":"/project/rouyi-vue-pro/excel-import-and-export.html","title":"Excel 导入导出","lang":"en-US","frontmatter":{"title":"Excel 导入导出","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":36,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. Excel 导出","slug":"_1-excel-导出","link":"#_1-excel-导出","children":[{"level":3,"title":"# 1.1 后端导入实现","slug":"_1-1-后端导入实现","link":"#_1-1-后端导入实现","children":[]},{"level":3,"title":"# 1.2 前端导入实现","slug":"_1-2-前端导入实现","link":"#_1-2-前端导入实现","children":[]}]},{"level":2,"title":"# 2. Excel 导入","slug":"_2-excel-导入","link":"#_2-excel-导入","children":[{"level":3,"title":"# 2.1 后端导入实现","slug":"_2-1-后端导入实现","link":"#_2-1-后端导入实现","children":[]},{"level":3,"title":"# 2.2 前端导入实现","slug":"_2-2-前端导入实现","link":"#_2-2-前端导入实现","children":[]}]},{"level":2,"title":"# 3. 字段转换器","slug":"_3-字段转换器","link":"#_3-字段转换器","children":[{"level":3,"title":"# 3.1 DictConvert 实现","slug":"_3-1-dictconvert-实现","link":"#_3-1-dictconvert-实现","children":[]},{"level":3,"title":"# 3.1 DictConvert 使用示例","slug":"_3-1-dictconvert-使用示例","link":"#_3-1-dictconvert-使用示例","children":[]}]},{"level":2,"title":"# 4. 更多 EasyExcel 注解","slug":"_4-更多-easyexcel-注解","link":"#_4-更多-easyexcel-注解","children":[{"level":3,"title":"# 4.1 @ExcelProperty","slug":"_4-1-excelproperty","link":"#_4-1-excelproperty","children":[]},{"level":3,"title":"# 4.2 @ColumnWith","slug":"_4-2-columnwith","link":"#_4-2-columnwith","children":[]},{"level":3,"title":"# 4.3 @ContentFontStyle","slug":"_4-3-contentfontstyle","link":"#_4-3-contentfontstyle","children":[]},{"level":3,"title":"# 4.4 @ContentLoopMerge","slug":"_4-4-contentloopmerge","link":"#_4-4-contentloopmerge","children":[]},{"level":3,"title":"# 4.5 @ContentRowHeight","slug":"_4-5-contentrowheight","link":"#_4-5-contentrowheight","children":[]},{"level":3,"title":"# 4.6 @ContentStyle","slug":"_4-6-contentstyle","link":"#_4-6-contentstyle","children":[]},{"level":3,"title":"# 4.7 @HeadFontStyle","slug":"_4-7-headfontstyle","link":"#_4-7-headfontstyle","children":[]},{"level":3,"title":"# 4.8 @HeadRowHeight","slug":"_4-8-headrowheight","link":"#_4-8-headrowheight","children":[]},{"level":3,"title":"# 4.9 @HeadStyle","slug":"_4-9-headstyle","link":"#_4-9-headstyle","children":[]},{"level":3,"title":"# 4.11 @ExcelIgnoreUnannotated","slug":"_4-11-excelignoreunannotated","link":"#_4-11-excelignoreunannotated","children":[]}]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":8.46,"words":2538},"filePathRelative":"project/rouyi-vue-pro/excel-import-and-export.md","localizedDate":"July 7, 2024"}');export{i as comp,l as data};
