import{_ as o,g as n,o as r,c as p,e as t,h as e,f as c,w as d,a}from"./app-BRTHG7K9.js";const g={},s=a('<h1 id="接口文档" tabindex="-1"><a class="header-anchor" href="#接口文档"><span>接口文档</span></a></h1><p>项目使用 Swagger 实现 RESTful API 的接口文档，提供两种解决方案：</p><p>*【推荐】 <a href="http://mtw.so/62me9n" target="_blank" rel="noopener noreferrer">Apifox</a>：强大的 API 工具，支持 API 文档、API 调试、API Mock、API 自动化测试</p><ul><li>Knife4j：简易的 API 工具，仅支持 API 文档、API 调试</li></ul><p>为什么选择 Swagger 呢？</p><p>Swagger 通过 Java 注解实现 API 接口文档的编写。相比使用 Java 注释的方式，注解提供更加规范的接口定义方式，开发体验更好。</p><p>如果你没有学习 Swagger，可以阅读 <a href="https://www.iocoder.cn/Spring-Boot/Swagger/?yudao" target="_blank" rel="noopener noreferrer">《芋道 Spring Boot API 接口文档 Swagger 入门 》</a> 文章。</p><p>每个服务都会启动 Swagger 的接口文档，方便开发者进行 API 调试。下述的内容，使用 <code>system-server</code> 系统服务举例子，它的端口是 48081。</p><p>注意！注意！注意！文章部分图中，看到的是 48080 端口，实际你都填写 48081。</p><h2 id="_1-apifox-使用" tabindex="-1"><a class="header-anchor" href="#_1-apifox-使用"><span><a href="#_1-apifox-%E4%BD%BF%E7%94%A8">#</a> 1. Apifox 使用</span></a></h2><p>本小节，我们来将项目中的 API 接口，一键导入到 Apifox 中，并使用它发起一次 API 的调用。</p><h3 id="_1-1-下载工具" tabindex="-1"><a class="header-anchor" href="#_1-1-下载工具"><span><a href="#_1-1-%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7">#</a> 1.1 下载工具</span></a></h3><p>点击 <a href="http://mtw.so/62me9n" target="_blank" rel="noopener noreferrer">Apifox</a> 首页，下载对应的 Apifox 桌面版。如下图所示：</p><p>为什么要下载 Apifox 桌面版？</p><p>艿艿已经卸载 Postman，使用 Apifox 进行替代。国产软件，yyds 永远滴神！</p><p>国内很多互联网公司，包括百度、阿里、腾讯、字节跳动等等在内，都在使用 Apifox 作为 API 工具。</p><figure><img src="https://cloud.iocoder.cn/img/接口文档/01.png" alt="Apifox 下载" tabindex="0" loading="lazy"><figcaption>Apifox 下载</figcaption></figure><p>解压后，双击进行安装即可。黑色界面，非常酷炫。</p><figure><img src="https://cloud.iocoder.cn/img/接口文档/02.png" alt="Apifox 界面" tabindex="0" loading="lazy"><figcaption>Apifox 界面</figcaption></figure><h3 id="_1-2-api-导入" tabindex="-1"><a class="header-anchor" href="#_1-2-api-导入"><span><a href="#_1-2-api-%E5%AF%BC%E5%85%A5">#</a> 1.2 API 导入</span></a></h3><p>① 先点击「示例项目」，再点击「+」按钮，选择「导入」选项。</p><figure><img src="https://cloud.iocoder.cn/img/接口文档/03.png" alt="Apifox 界面 —— 导入" tabindex="0" loading="lazy"><figcaption>Apifox 界面 —— 导入</figcaption></figure><p>② 先选择「URL 导入」按钮，填写 Swagger 数据 URL 为 <code>http://127.0.0.1:48081/v3/api-docs</code> 。如果失败，则可以尝试 <code>http://127.0.0.1:48080/v3/api-docs/all</code> 解决。</p><figure><img src="https://cloud.iocoder.cn/img/接口文档/04.png" alt="Apifox 界面 —— Swagger" tabindex="0" loading="lazy"><figcaption>Apifox 界面 —— Swagger</figcaption></figure><p>③ 先点击「提交」按钮，再点击「确认导入」按钮，完成 API 接口的导入。</p><figure><img src="https://cloud.iocoder.cn/img/接口文档/05.png" alt="Apifox 界面 —— Swagger" tabindex="0" loading="lazy"><figcaption>Apifox 界面 —— Swagger</figcaption></figure><p>④ 导入完成后，点击「接口管理」按钮，可以查看到 API 列表。</p><figure><img src="https://cloud.iocoder.cn/img/接口文档/06.png" alt="Apifox 界面 —— 接口管理" tabindex="0" loading="lazy"><figcaption>Apifox 界面 —— 接口管理</figcaption></figure><h3 id="_1-3-api-调试" tabindex="-1"><a class="header-anchor" href="#_1-3-api-调试"><span><a href="#_1-3-api-%E8%B0%83%E8%AF%95">#</a> 1.3 API 调试</span></a></h3><p>① 先点击右上角「请选择环境」，再点击「管理环境」选项，填写测试环境的地址为 <code>http://127.0.0.1:48081</code>，并进行保存。</p><figure><img src="https://cloud.iocoder.cn/img/接口文档/07.png" alt="Apifox 界面 —— 管理环境" tabindex="0" loading="lazy"><figcaption>Apifox 界面 —— 管理环境</figcaption></figure><p>② 点击「管理后台 —— 认证」的「使用账号密码登录」接口，查看该 API 接口的定义。</p><figure><img src="https://cloud.iocoder.cn/img/接口文档/08.png" alt="Apifox 界面 —— 认证" tabindex="0" loading="lazy"><figcaption>Apifox 界面 —— 认证</figcaption></figure><p>③ 点击「运行」按钮，填写 Headers 的 <code>tenant-id</code> 为 1，再点击 Body 的「自动生成」按钮，最后点击「发送」按钮。</p><figure><img src="https://cloud.iocoder.cn/img/接口文档/09.png" alt="Apifox 界面 —— 认证" tabindex="0" loading="lazy"><figcaption>Apifox 界面 —— 认证</figcaption></figure><h3 id="_1-4-常见问题" tabindex="-1"><a class="header-anchor" href="#_1-4-常见问题"><span><a href="#_1-4-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">#</a> 1.4 常见问题</span></a></h3><p>问题 ①：分页 GET 请求时，如果有 <code>createTime</code> 这种时间类型的数组参数，会报错。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/接口文档/Apifox常见问题1.png" alt="Apifox 常见问题 1" tabindex="0" loading="lazy"><figcaption>Apifox 常见问题 1</figcaption></figure><p>答：把 <code>createTime</code> 左右两边的 <code>[]</code> 去掉，即可解决。</p><h2 id="_2-knife4j-使用" tabindex="-1"><a class="header-anchor" href="#_2-knife4j-使用"><span><a href="#_2-knife4j-%E4%BD%BF%E7%94%A8">#</a> 2. Knife4j 使用</span></a></h2><h3 id="_2-1-如何使用" tabindex="-1"><a class="header-anchor" href="#_2-1-如何使用"><span><a href="#_2-1-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8">#</a> 2.1 如何使用？</span></a></h3><p>浏览器访问 <a href="http://127.0.0.1:48081/doc.html" target="_blank" rel="noopener noreferrer">http://127.0.0.1:48081/doc.html</a> 地址，使用 Knife4j 查看 API 接口文档。</p><figure><img src="https://cloud.iocoder.cn/img/接口文档/21.png" alt="Knife4j 界面" tabindex="0" loading="lazy"><figcaption>Knife4j 界面</figcaption></figure><p>① 点击任意一个接口，进行接口的调用测试。这里，使用「管理后台 - 用户个中心」的“获得登录用户信息”举例子。</p><p>② 点击左侧「调试」按钮，并将请求头部的 <code>header-id</code> 和 <code>Authorization</code> 勾选上。</p><p>其中，<code>header-id</code> 为租户编号，<code>Authorization</code> 的 <code>&quot;Bearer test&quot;</code> 后面为用户编号（模拟哪个用户操作）。</p><p>③ 点击「发送」按钮，即可发起一次 API 的调用。</p><figure><img src="https://cloud.iocoder.cn/img/接口文档/Knife4j调用.png" alt="Knife4j 调试" tabindex="0" loading="lazy"><figcaption>Knife4j 调试</figcaption></figure><p>如何使用 Gateway 网关，聚合各个服务的接口文档？</p>',49),l=a(`<h3 id="_2-2-如何开启登录" tabindex="-1"><a class="header-anchor" href="#_2-2-如何开启登录"><span><a href="#_2-2-%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E7%99%BB%E5%BD%95">#</a> 2.2 如何开启登录？</span></a></h3><p>生产环境下，建议 Knife4j 接口界面开启“安全认证”的功能，避免出现安全事故。</p><p>只需要在 <code>knife4j.basic</code> 配置项中，额外添加 Basic Auth 认证即可，如下所示：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>knife4j:</span></span>
<span class="line"><span>  basic:</span></span>
<span class="line"><span>    enable: true</span></span>
<span class="line"><span>    username: admin # Basic 认证用户名</span></span>
<span class="line"><span>    password: admin # Basic 认证密码</span></span></code></pre></div><h2 id="_3-swagger-技术组件" tabindex="-1"><a class="header-anchor" href="#_3-swagger-技术组件"><span><a href="#_3-swagger-%E6%8A%80%E6%9C%AF%E7%BB%84%E4%BB%B6">#</a> 3. Swagger 技术组件</span></a></h2><p>① 在 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-spring-boot-starter-web/pom.xml" target="_blank" rel="noopener noreferrer"><code>yudao-spring-boot-starter-web</code></a> 技术组件的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-spring-boot-starter-web/src/main/java/cn/iocoder/yudao/framework/swagger/package-info.java" target="_blank" rel="noopener noreferrer"><code>swagger</code></a> 包，实现了对 Swagger 的封装。</p><p>② 如果想要禁用 Swagger 功能，可通过 <code>springdoc.api-docs.enable</code> 配置项为 <code>false</code>。一般情况下，建议 prod 生产环境进行禁用，避免发生安全问题。</p><figure><img src="https://cloud.iocoder.cn/img/接口文档/Swagger关闭.png" alt="Swagger 关闭" tabindex="0" loading="lazy"><figcaption>Swagger 关闭</figcaption></figure>`,8);function f(h,u){const i=n("RouteLink");return r(),p("div",null,[s,t("p",null,[e("参见 "),c(i,{to:"/gateway/"},{default:d(()=>[e("《微服务手册 —— 服务网关》")]),_:1}),e(" 文档")]),l])}const A=o(g,[["render",f],["__file","api-doc.html.vue"]]),_=JSON.parse('{"path":"/project/yudao-cloud/api-doc.html","title":"接口文档","lang":"en-US","frontmatter":{"title":"接口文档","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":8,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. Apifox 使用","slug":"_1-apifox-使用","link":"#_1-apifox-使用","children":[{"level":3,"title":"# 1.1 下载工具","slug":"_1-1-下载工具","link":"#_1-1-下载工具","children":[]},{"level":3,"title":"# 1.2 API 导入","slug":"_1-2-api-导入","link":"#_1-2-api-导入","children":[]},{"level":3,"title":"# 1.3 API 调试","slug":"_1-3-api-调试","link":"#_1-3-api-调试","children":[]},{"level":3,"title":"# 1.4 常见问题","slug":"_1-4-常见问题","link":"#_1-4-常见问题","children":[]}]},{"level":2,"title":"# 2. Knife4j 使用","slug":"_2-knife4j-使用","link":"#_2-knife4j-使用","children":[{"level":3,"title":"# 2.1 如何使用？","slug":"_2-1-如何使用","link":"#_2-1-如何使用","children":[]},{"level":3,"title":"# 2.2 如何开启登录？","slug":"_2-2-如何开启登录","link":"#_2-2-如何开启登录","children":[]}]},{"level":2,"title":"# 3. Swagger 技术组件","slug":"_3-swagger-技术组件","link":"#_3-swagger-技术组件","children":[]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":4.32,"words":1296},"filePathRelative":"project/yudao-cloud/api-doc.md","localizedDate":"July 7, 2024"}');export{A as comp,_ as data};
