import{_ as a,o as e,c as n,a as s}from"./app-BRTHG7K9.js";const i={},l=s('<h1 id="【交易】购物车" tabindex="-1"><a class="header-anchor" href="#【交易】购物车"><span>【交易】购物车</span></a></h1><h2 id="_1-表结构" tabindex="-1"><a class="header-anchor" href="#_1-表结构"><span><a href="#_1-%E8%A1%A8%E7%BB%93%E6%9E%84">#</a> 1. 表结构</span></a></h2><p>购物车表，由 <code>yudao-module-trade-biz</code> 后端模块的 <code>cart</code> 包实现。表结构如下：</p><blockquote><p>省略 creator/create_time/updater/update_time/deleted/tenant_id 等通用字段</p></blockquote><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>CREATE TABLE `trade_cart`  (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;编号，唯一自增。&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `user_id` bigint NOT NULL COMMENT &#39;用户编号&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `spu_id` bigint NOT NULL COMMENT &#39;商品 SPU 编号&#39;,</span></span>\n<span class="line"><span>  `sku_id` bigint NOT NULL COMMENT &#39;商品 SKU 编号&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `count` int NOT NULL COMMENT &#39;商品购买数量&#39;,</span></span>\n<span class="line"><span>  `selected` bit(1) NOT NULL DEFAULT b&#39;1&#39; COMMENT &#39;是否选中&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`) USING BTREE</span></span>\n<span class="line"><span>) ENGINE = InnoDB AUTO_INCREMENT = 70 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = &#39;购物车的商品信息&#39;;</span></span></code></pre></div><p>注意，它存储的是购物项，用户添加了多个商品 SKU 则会有多条记录。字段可以分成三类：</p><ul><li>① <code>user_id</code> 字段：对应的用户编号。</li><li>② <code>spu_id</code>、<code>sku_id</code> 字段：商品 SPU、SKU 相关信息。</li><li>③ <code>count</code>、<code>selected</code> 字段：购买数量和选中状态。相同商品 SKU 被多次添加到购物车时，只会记录一条，<code>count</code> 数量进行累加，直到被下单。</li></ul><p>疑问：为什么不使用 Redis 存储购物车？</p><p>MySQL 实现简单易懂，性能足够满足绝大多数公司。目前，市面上主流的电商开源项目都使用 MySQL 存储购物车信息。它有如下三点好处：</p><ul><li>数据分析。例如，哪些商品被添加到购物车很多，但是很少被下单，实现转换率漏斗</li><li>业务拓展。例如，卖家基于买家购物车的商品信息，进行回访，促发购买</li><li>用户体验。缓存总会过期，可能买家目前仅仅是添加到购物车，N 天后会进行购买</li></ul><p>当然，如果你真的希望使用 Redis 实现购物车，推荐阅读 <a href="http://skrshop.tech/#/src/shopping/cart?id=%e8%b4%ad%e7%89%a9%e8%bd%a6%e6%9c%8d%e5%8a%a1" target="_blank" rel="noopener noreferrer">《购物车服务》</a> 文档。</p><h2 id="_2-管理后台" tabindex="-1"><a class="header-anchor" href="#_2-管理后台"><span><a href="#_2-%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0">#</a> 2. 管理后台</span></a></h2><p>暂时没有对应菜单，可以查询 <code>trade_cart</code> 表实现。</p><p>因为它采用 MySQL 实现存储，所以实现还是比较简单的。如果是 Redis 的话，可能条件 + 分页查询就比较复杂了。</p><h2 id="_3-移动端" tabindex="-1"><a class="header-anchor" href="#_3-移动端"><span><a href="#_3-%E7%A7%BB%E5%8A%A8%E7%AB%AF">#</a> 3. 移动端</span></a></h2><h3 id="_3-1-添加购物车" tabindex="-1"><a class="header-anchor" href="#_3-1-添加购物车"><span><a href="#_3-1-%E6%B7%BB%E5%8A%A0%E8%B4%AD%E7%89%A9%E8%BD%A6">#</a> 3.1 添加购物车</span></a></h3><p>在商品详情页，选择完商品 SKU 后，可点击「加入购物车」按钮，实现添加购物车功能。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/购物车/移动端-添加购物车.png" alt="添加购物车" tabindex="0" loading="lazy"><figcaption>添加购物车</figcaption></figure><h3 id="_3-2-购物车列表" tabindex="-1"><a class="header-anchor" href="#_3-2-购物车列表"><span><a href="#_3-2-%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%88%97%E8%A1%A8">#</a> 3.2 购物车列表</span></a></h3><p>对应 uni-app 底部的 [购物车] 导航，对应 <code>yudao-mall-uniapp</code> 项目的 <code>pages/index/cart.vue</code> 页面。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/购物车/移动端-购物车列表.png" alt="购物车列表" tabindex="0" loading="lazy"><figcaption>购物车列表</figcaption></figure><p>后续，点击「去结算」按钮，即可进入下单流程。</p>',22),t=[l];function c(p,d){return e(),n("div",null,t)}const o=a(i,[["render",c],["__file","trade-cart.html.vue"]]),h=JSON.parse('{"path":"/project/yudao-cloud/mall/trade-cart.html","title":"【交易】购物车","lang":"en-US","frontmatter":{"title":"【交易】购物车","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":99,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 表结构","slug":"_1-表结构","link":"#_1-表结构","children":[]},{"level":2,"title":"# 2. 管理后台","slug":"_2-管理后台","link":"#_2-管理后台","children":[]},{"level":2,"title":"# 3. 移动端","slug":"_3-移动端","link":"#_3-移动端","children":[{"level":3,"title":"# 3.1 添加购物车","slug":"_3-1-添加购物车","link":"#_3-1-添加购物车","children":[]},{"level":3,"title":"# 3.2 购物车列表","slug":"_3-2-购物车列表","link":"#_3-2-购物车列表","children":[]}]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":2.51,"words":752},"filePathRelative":"project/yudao-cloud/mall/trade-cart.md","localizedDate":"July 7, 2024"}');export{o as comp,h as data};
