import{_ as e,o as n,c as i,a as s}from"./app-5QVbWi7Z.js";const r={};function l(c,a){return n(),i("div",null,a[0]||(a[0]=[s('<h1 id="配置管理" tabindex="-1"><a class="header-anchor" href="#配置管理"><span>配置管理</span></a></h1><p>在 [基础设施 -&gt; 配置管理] 菜单，可以查看和管理配置，适合业务上需要动态的管理某个配置。</p><p>例如说：创建用户时，需要配置用户的默认密码，这个密码是不会变的，但是有时候需要修改这个默认密码，这个时候就可以通过配置管理来修改。</p><figure><img src="https://doc.iocoder.cn/img/配置中心/01.png" alt="配置中心" tabindex="0" loading="lazy"><figcaption>配置中心</figcaption></figure><p>对应的后端代码是 <code>yudao-module-infra</code> 的 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-infra/yudao-module-infra-biz/src/main/java/cn/iocoder/yudao/module/infra/service/config/" target="_blank" rel="noopener noreferrer"><code>config</code></a> 业务模块。</p><h2 id="_1-配置的表结构" tabindex="-1"><a class="header-anchor" href="#_1-配置的表结构"><span><a href="#_1-%E9%85%8D%E7%BD%AE%E7%9A%84%E8%A1%A8%E7%BB%93%E6%9E%84">#</a> 1. 配置的表结构</span></a></h2><p><code>infra_config</code> 的表结构如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE `infra_config` (</span></span>\n<span class="line"><span>  `id` int NOT NULL AUTO_INCREMENT COMMENT &#39;参数主键&#39;,</span></span>\n<span class="line"><span>  `group` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;参数分组&#39;,</span></span>\n<span class="line"><span>  `type` tinyint NOT NULL COMMENT &#39;参数类型&#39;,</span></span>\n<span class="line"><span>  `name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &#39;&#39; COMMENT &#39;参数名称&#39;,</span></span>\n<span class="line"><span>  `key` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &#39;&#39; COMMENT &#39;参数键名&#39;,</span></span>\n<span class="line"><span>  `value` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &#39;&#39; COMMENT &#39;参数键值&#39;,</span></span>\n<span class="line"><span>  `sensitive` bit(1) NOT NULL COMMENT &#39;是否敏感&#39;,</span></span>\n<span class="line"><span>  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &#39;备注&#39;,</span></span>\n<span class="line"><span>  `creator` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT &#39;&#39; COMMENT &#39;创建者&#39;,</span></span>\n<span class="line"><span>  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,</span></span>\n<span class="line"><span>  `updater` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT &#39;&#39; COMMENT &#39;更新者&#39;,</span></span>\n<span class="line"><span>  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;更新时间&#39;,</span></span>\n<span class="line"><span>  `deleted` bit(1) NOT NULL DEFAULT b&#39;0&#39; COMMENT &#39;是否删除&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`) USING BTREE</span></span>\n<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&#39;参数配置表&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>key</code> 字段，对应到 Spring Boot 配置文件的配置项，例如说 <code>yudao.captcha.enable</code>、<code>sys.user.init-password</code> 等等。</li></ul><h2 id="_3-后端案例" tabindex="-1"><a class="header-anchor" href="#_3-后端案例"><span><a href="#_3-%E5%90%8E%E7%AB%AF%E6%A1%88%E4%BE%8B">#</a> 3. 后端案例</span></a></h2><p>TODO 芋艿：待补充</p><h2 id="_4-前端案例" tabindex="-1"><a class="header-anchor" href="#_4-前端案例"><span><a href="#_4-%E5%89%8D%E7%AB%AF%E6%A1%88%E4%BE%8B">#</a> 4. 前端案例</span></a></h2><p>后端提供了 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-infra/yudao-module-infra-biz/src/main/java/cn/iocoder/yudao/module/infra/controller/admin/config/ConfigController.java#L70-L82" target="_blank" rel="noopener noreferrer"><code>/admin-api/infra/config/get-value-by-key</code></a> RESTful API 接口，返回指定配置项的值。前端的使用示例如下图：</p><figure><img src="https://doc.iocoder.cn/img/配置中心/07-vue2.png" alt="前端案例" tabindex="0" loading="lazy"><figcaption>前端案例</figcaption></figure>',14)]))}const t=e(r,[["render",l],["__file","config-center.html.vue"]]),o=JSON.parse('{"path":"/project/rouyi-vue-pro/config-center.html","title":"配置管理","lang":"en-US","frontmatter":{"title":"配置管理","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":51,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 配置的表结构","slug":"_1-配置的表结构","link":"#_1-配置的表结构","children":[]},{"level":2,"title":"# 3. 后端案例","slug":"_3-后端案例","link":"#_3-后端案例","children":[]},{"level":2,"title":"# 4. 前端案例","slug":"_4-前端案例","link":"#_4-前端案例","children":[]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":1.62,"words":485},"filePathRelative":"project/rouyi-vue-pro/config-center.md","localizedDate":"July 7, 2024"}');export{t as comp,o as data};
