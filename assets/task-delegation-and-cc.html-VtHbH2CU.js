import{_ as e,o as n,c as i,a as s}from"./app-5QVbWi7Z.js";const c={};function l(t,a){return n(),i("div",null,a[0]||(a[0]=[s('<h1 id="审批转办、委派、抄送" tabindex="-1"><a class="header-anchor" href="#审批转办、委派、抄送"><span>审批转办、委派、抄送</span></a></h1><h2 id="_1-转办、委派" tabindex="-1"><a class="header-anchor" href="#_1-转办、委派"><span><a href="#_1-%E8%BD%AC%E5%8A%9E%E3%80%81%E5%A7%94%E6%B4%BE">#</a> 1. 转办、委派</span></a></h2><p>转办和委托，两者的区别在于是不是真的转给对方，对比如下：</p><ul><li>转办：A 转给其 B 审批，B 审批后，进入下一节点</li><li>委派：A 转给其 B 审批，B 审批后，转给 A，A 继续审批后进入下一节点</li></ul><h3 id="_1-1-转办" tabindex="-1"><a class="header-anchor" href="#_1-1-转办"><span><a href="#_1-1-%E8%BD%AC%E5%8A%9E">#</a> 1.1 转办</span></a></h3><p>转办，简单来说，就是 <strong>真的</strong> 换一个 <code>assignee</code> 审批人，对应界面如下：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/转办委托抄送/转办.png" alt="转办" tabindex="0" loading="lazy"><figcaption>转办</figcaption></figure><p>对应后端的 BpmTaskController 提供的 <code>#transferTask(...)</code> 接口。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/转办委托抄送/转办的实现.png" alt="转办的实现" tabindex="0" loading="lazy"><figcaption>转办的实现</figcaption></figure><ul><li>关键是红圈的 <code>3.2</code> 部分：通过调用 <code>TaskService#setAssignee(...)</code> 方法，修改审批人</li><li>至于 <code>3.1</code> 部分：将原审批人设置为 <code>owner</code>，这其实是可选的</li></ul><h3 id="_1-2-委派" tabindex="-1"><a class="header-anchor" href="#_1-2-委派"><span><a href="#_1-2-%E5%A7%94%E6%B4%BE">#</a> 1.2 委派</span></a></h3><p>委派，简单来说，只是 <strong>临时</strong> 换一个 <code>assignee</code> 审批人，干完活还要交回来，对应界面如下：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/转办委托抄送/委派.png" alt="委派" tabindex="0" loading="lazy"><figcaption>委派</figcaption></figure><p>它对应两个流程：</p><ul><li>A 转给其 B 审批</li><li>B 审批后，转给 A</li></ul><p>① A 转给其 B 审批，对应后端的 BpmTaskController 提供的 <code>#delegateTask(...)</code> 接口。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/转办委托抄送/委派的实现.png" alt="委派的实现" tabindex="0" loading="lazy"><figcaption>委派的实现</figcaption></figure><ul><li>红圈的 <code>3.1</code> 部分：将原审批人设置为 <code>owner</code>，这个是必须的，因为委派是临时的，干完活还要交回来</li><li>红圈的 <code>3.2</code> 部分：通过调用 <code>TaskService#delegateTask(...)</code> 方法，委派给新审批人</li></ul><p>② B 审批后，转给 A，对应后端的 BpmTaskController 提供的 <code>#approveTask(...)</code> 接口。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/转办委托抄送/审批委派的实现.png" alt="审批委派的实现" tabindex="0" loading="lazy"><figcaption>审批委派的实现</figcaption></figure><ul><li>红圈的 <code>2.1</code> 部分：通过调用 <code>TaskService#resolveTask(...)</code> 方法，将委派的任务交回给原审批人，表示任务已审批（已完成）。这样，后续原审批人就可以继续审批了</li></ul><h2 id="_2-抄送" tabindex="-1"><a class="header-anchor" href="#_2-抄送"><span><a href="#_2-%E6%8A%84%E9%80%81">#</a> 2. 抄送</span></a></h2><p>抄送，将审批结果，通知给抄送列表对应的人。</p><h3 id="_2-1-表结构" tabindex="-1"><a class="header-anchor" href="#_2-1-表结构"><span><a href="#_2-1-%E8%A1%A8%E7%BB%93%E6%9E%84">#</a> 2.1 表结构</span></a></h3><p>抄送表，是我们自己定义的 <code>bpm_process_instance_copy</code> 表，结构如下：</p><blockquote><p>省略 creator/create_time/updater/update_time/deleted/tenant_id 等通用字段</p></blockquote><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE `bpm_process_instance_copy` (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;编号&#39;,</span></span>\n<span class="line"><span>  `user_id` bigint NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;用户编号，被抄送人&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `start_user_id` bigint NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;发起流程的用户编号&#39;,</span></span>\n<span class="line"><span>  `process_instance_id` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &#39;&#39; COMMENT &#39;流程实例的id&#39;,</span></span>\n<span class="line"><span>  `process_instance_name` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &#39;&#39; COMMENT &#39;流程实例的名字&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `category` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;流程定义的分类&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `task_id` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &#39;&#39; COMMENT &#39;发起抄送的任务编号&#39;,</span></span>\n<span class="line"><span>  `task_name` varchar(64) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &#39;任务的名字&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`) USING BTREE</span></span>\n<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&#39;BPM 流程实例抄送表&#39;;</span></span></code></pre></div><p>比较简单，就是存储下关联的 <code>user_id</code>、<code>process_instance_id</code>、<code>task_id</code> 等信息。</p><h3 id="_2-2-发起抄送" tabindex="-1"><a class="header-anchor" href="#_2-2-发起抄送"><span><a href="#_2-2-%E5%8F%91%E8%B5%B7%E6%8A%84%E9%80%81">#</a> 2.2 发起抄送</span></a></h3><p>审批通过、不通过时，可以选择抄送的人，对应界面如下：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/转办委托抄送/发起抄送.png" alt="发起抄送" tabindex="0" loading="lazy"><figcaption>发起抄送</figcaption></figure><p>对应的后端代码，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/转办委托抄送/发起抄送的实现.png" alt="发起抄送的实现" tabindex="0" loading="lazy"><figcaption>发起抄送的实现</figcaption></figure><h3 id="_2-3-查看抄送" tabindex="-1"><a class="header-anchor" href="#_2-3-查看抄送"><span><a href="#_2-3-%E6%9F%A5%E7%9C%8B%E6%8A%84%E9%80%81">#</a> 2.3 查看抄送</span></a></h3><p>被抄送人，可以在 [工作流程 -&gt; 审批中心 -&gt; 抄送我的] 菜单，查看到抄送列表，对应界面如下：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/转办委托抄送/抄送我的.png" alt="抄送我的" tabindex="0" loading="lazy"><figcaption>抄送我的</figcaption></figure>',36)]))}const p=e(c,[["render",l],["__file","task-delegation-and-cc.html.vue"]]),d=JSON.parse('{"path":"/project/yudao-cloud/bpm/task-delegation-and-cc.html","title":"审批转办、委派、抄送","lang":"en-US","frontmatter":{"title":"审批转办、委派、抄送","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":76,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 转办、委派","slug":"_1-转办、委派","link":"#_1-转办、委派","children":[{"level":3,"title":"# 1.1 转办","slug":"_1-1-转办","link":"#_1-1-转办","children":[]},{"level":3,"title":"# 1.2 委派","slug":"_1-2-委派","link":"#_1-2-委派","children":[]}]},{"level":2,"title":"# 2. 抄送","slug":"_2-抄送","link":"#_2-抄送","children":[{"level":3,"title":"# 2.1 表结构","slug":"_2-1-表结构","link":"#_2-1-表结构","children":[]},{"level":3,"title":"# 2.2 发起抄送","slug":"_2-2-发起抄送","link":"#_2-2-发起抄送","children":[]},{"level":3,"title":"# 2.3 查看抄送","slug":"_2-3-查看抄送","link":"#_2-3-查看抄送","children":[]}]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":3.87,"words":1162},"filePathRelative":"project/yudao-cloud/bpm/task-delegation-and-cc.md","localizedDate":"July 7, 2024"}');export{p as comp,d as data};
