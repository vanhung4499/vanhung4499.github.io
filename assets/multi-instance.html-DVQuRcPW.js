import{_ as e,o as a,c as i,a as l}from"./app-BRTHG7K9.js";const n={},t=l('<h1 id="会签、或签、依次审批" tabindex="-1"><a class="header-anchor" href="#会签、或签、依次审批"><span>会签、或签、依次审批</span></a></h1><p>相关视频：</p><ul><li><p><a href="https://t.zsxq.com/04yFUVZvF" target="_blank" rel="noopener noreferrer">15、如何实现会签、或签任务？</a><br> 支持多人审批，包括：</p></li><li><p>会签（并行会签）：同一个审批节点设置多个人（如 A、B、C 三人，三人会同时收到待办任务），需全部同意之后，审批才可到下一审批节点</p></li><li><p>或签（并行或签）：同一个审批节点设置多个人，任意一个人处理后，就能进入下一个节点</p></li><li><p>依次审批（顺序会签）：同一个审批节点设置多个人（如 A、B、C 三人），三人按顺序依次收到待办，即 A 先审批，A 提交后 B 才能审批，需全部同意之后，审批才可到下一审批节点</p></li></ul><h2 id="_1-多人审批" tabindex="-1"><a class="header-anchor" href="#_1-多人审批"><span><a href="#_1-%E5%A4%9A%E4%BA%BA%E5%AE%A1%E6%89%B9">#</a> 1. 多人审批</span></a></h2><h2 id="_1-会签-并行会签" tabindex="-1"><a class="header-anchor" href="#_1-会签-并行会签"><span><a href="#_1-%E4%BC%9A%E7%AD%BE-%E5%B9%B6%E8%A1%8C%E4%BC%9A%E7%AD%BE">#</a> 1. 会签（并行会签）</span></a></h2><figure><img src="https://cloud.iocoder.cn/img/工作流手册/多人审批/会签配置.png" alt="会签配置" tabindex="0" loading="lazy"><figcaption>会签配置</figcaption></figure><ul><li>会签配置：并行多重事件，实现多个人同时审批</li><li>完成条件：<code>${ nrOfCompletedInstances &gt;= nrOfInstances }</code>，表示所有人都审批通过，才能进入下一个节点</li></ul><p>疑问：<code>nrOfCompletedInstances</code>、<code>nrOfInstances</code> 表示什么意思？</p><ul><li><code>nrOfCompletedInstances</code>：当前节点已完成的任务数量</li><li><code>nrOfInstances</code>：当前节点总的任务数量</li></ul><p>因此，<code>${ nrOfCompletedInstances &gt;= nrOfInstances }</code> 就是，“已完成”大于“总的”数量，即所有人都审批通过。</p><h2 id="_2-或签-并行或签" tabindex="-1"><a class="header-anchor" href="#_2-或签-并行或签"><span><a href="#_2-%E6%88%96%E7%AD%BE-%E5%B9%B6%E8%A1%8C%E6%88%96%E7%AD%BE">#</a> 2. 或签（并行或签）</span></a></h2><figure><img src="https://cloud.iocoder.cn/img/工作流手册/多人审批/或签配置.png" alt="或签配置" tabindex="0" loading="lazy"><figcaption>或签配置</figcaption></figure><ul><li>会签配置：并行多重事件，实现多个人同时审批</li><li>完成条件：<code>${ nrOfCompletedInstances == 1 }</code>，表示只要有一个人审批通过，就能进入下一个节点</li></ul><p>因此，会签和或签的差异，就在于完成条件的不同。</p><h2 id="_3-依次审批" tabindex="-1"><a class="header-anchor" href="#_3-依次审批"><span><a href="#_3-%E4%BE%9D%E6%AC%A1%E5%AE%A1%E6%89%B9">#</a> 3. 依次审批</span></a></h2><figure><img src="https://cloud.iocoder.cn/img/工作流手册/多人审批/依次审批配置.png" alt="依次审批配置" tabindex="0" loading="lazy"><figcaption>依次审批配置</figcaption></figure><ul><li>依次审批配置：顺序多重事件，实现多个人按顺序审批</li><li>循环数量：1，表示每次（“循环”）只有一个人审批</li><li>完成条件：<code>${ nrOfCompletedInstances &gt;= nrOfInstances }</code>，表示只要有一个人审批通过，就能进入下一个节点</li></ul><p>因此，依次审批和会签的差异，就在于是否并行审批。</p><hr><p>按照这个思路，实现“票签”，是不是很简单？！</p><p>友情提示：什么是“票签”？</p><p>指同一个审批节点设置多个人，如 A、B、C 三人，当通过比例大于 50% 就能进入下一个节点。</p><h2 id="_2-实现原理" tabindex="-1"><a class="header-anchor" href="#_2-实现原理"><span><a href="#_2-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">#</a> 2. 实现原理</span></a></h2><p>在 <a href="/bpm/assignee">《选择审批人、发起人自选》</a> 小节中，我们看到使用 BpmUserTaskActivityBehavior 实现了审批任务的审批人分配。实际上，还有两个 Behavior 类，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/多人审批/Behavior.png" alt="Behavior 类图" tabindex="0" loading="lazy"><figcaption>Behavior 类图</figcaption></figure><ul><li><a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-bpm/yudao-module-bpm-biz/src/main/java/cn/iocoder/yudao/module/bpm/framework/flowable/core/behavior/BpmParallelMultiInstanceBehavior.java" target="_blank" rel="noopener noreferrer">BpmParallelMultiInstanceBehavior</a>：并行 + 多实例（单节点多任务）的 Behavior 类</li><li><a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-bpm/yudao-module-bpm-biz/src/main/java/cn/iocoder/yudao/module/bpm/framework/flowable/core/behavior/BpmSequentialMultiInstanceBehavior.java" target="_blank" rel="noopener noreferrer">BpmSequentialMultiInstanceBehavior</a>：顺序 + 多实例（单节点多任务）的 Behavior 类</li></ul><h3 id="_2-1-并行-bpmparallelmultiinstancebehavior" tabindex="-1"><a class="header-anchor" href="#_2-1-并行-bpmparallelmultiinstancebehavior"><span><a href="#_2-1-%E5%B9%B6%E8%A1%8C-bpmparallelmultiinstancebehavior">#</a> 2.1 并行 BpmParallelMultiInstanceBehavior</span></a></h3><p>① BpmParallelMultiInstanceBehavior 实现 Flowable ParallelMultiInstanceBehavior 类，实现单节点多任务的审批人 <strong>“计算”</strong>。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/多人审批/BpmParallelMultiInstanceBehavior.png" alt="BpmParallelMultiInstanceBehavior" tabindex="0" loading="lazy"><figcaption>BpmParallelMultiInstanceBehavior</figcaption></figure><p>② BpmUserTaskActivityBehavior，判断是多实例的情况，则复用 BpmParallelMultiInstanceBehavior “计算”结果，直接设置审批人。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/多人审批/BpmUserTaskActivityBehavior.png" alt="BpmUserTaskActivityBehavior" tabindex="0" loading="lazy"><figcaption>BpmUserTaskActivityBehavior</figcaption></figure><p>所以，先是 BpmParallelMultiInstanceBehavior 计算审批任务数量 + 审批人列表，然后 BpmUserTaskActivityBehavior 直接设置审批人。</p><h3 id="_2-2-顺序-bpmsequentialmultiinstancebehavior" tabindex="-1"><a class="header-anchor" href="#_2-2-顺序-bpmsequentialmultiinstancebehavior"><span><a href="#_2-2-%E9%A1%BA%E5%BA%8F-bpmsequentialmultiinstancebehavior">#</a> 2.2 顺序 BpmSequentialMultiInstanceBehavior</span></a></h3><p>① BpmSequentialMultiInstanceBehavior 实现 Flowable SequentialMultiInstanceBehavior 类，实现单节点多任务的审批人 <strong>“计算”</strong>。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/工作流手册/多人审批/BpmSequentialMultiInstanceBehavior.png" alt="BpmSequentialMultiInstanceBehavior" tabindex="0" loading="lazy"><figcaption>BpmSequentialMultiInstanceBehavior</figcaption></figure><p>② 还是使用 BpmUserTaskActivityBehavior，逻辑是一模一样的。</p><p>所以，BpmSequentialMultiInstanceBehavior 和 BpmParallelMultiInstanceBehavior 基本是一致的，差异只是前者返回的是 LinkedHashSet 有序集合。最终，还是交给 Flowable 到底是一次性创建多个审批任务，还是按照顺序创建多个审批任务。</p>',37),r=[t];function o(c,s){return a(),i("div",null,r)}const h=e(n,[["render",o],["__file","multi-instance.html.vue"]]),u=JSON.parse('{"path":"/project/yudao-cloud/bpm/multi-instance.html","title":"会签、或签、依次审批","lang":"en-US","frontmatter":{"title":"会签、或签、依次审批","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":72,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 多人审批","slug":"_1-多人审批","link":"#_1-多人审批","children":[]},{"level":2,"title":"# 1. 会签（并行会签）","slug":"_1-会签-并行会签","link":"#_1-会签-并行会签","children":[]},{"level":2,"title":"# 2. 或签（并行或签）","slug":"_2-或签-并行或签","link":"#_2-或签-并行或签","children":[]},{"level":2,"title":"# 3. 依次审批","slug":"_3-依次审批","link":"#_3-依次审批","children":[]},{"level":2,"title":"# 2. 实现原理","slug":"_2-实现原理","link":"#_2-实现原理","children":[{"level":3,"title":"# 2.1 并行 BpmParallelMultiInstanceBehavior","slug":"_2-1-并行-bpmparallelmultiinstancebehavior","link":"#_2-1-并行-bpmparallelmultiinstancebehavior","children":[]},{"level":3,"title":"# 2.2 顺序 BpmSequentialMultiInstanceBehavior","slug":"_2-2-顺序-bpmsequentialmultiinstancebehavior","link":"#_2-2-顺序-bpmsequentialmultiinstancebehavior","children":[]}]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":3.82,"words":1145},"filePathRelative":"project/yudao-cloud/bpm/multi-instance.md","localizedDate":"July 7, 2024"}');export{h as comp,u as data};
