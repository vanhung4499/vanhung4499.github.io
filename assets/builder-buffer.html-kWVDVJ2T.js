import{_ as s,o as a,c as n,d as i}from"./app-BeMIqZkJ.js";const l={},r=i(`<h1 id="stringbuilder-va-stringbuffer" tabindex="-1"><a class="header-anchor" href="#stringbuilder-va-stringbuffer"><span>StringBuilder và StringBuffer</span></a></h1><h3 id="su-khac-biet-giua-stringbuffer-va-stringbuilder" tabindex="-1"><a class="header-anchor" href="#su-khac-biet-giua-stringbuffer-va-stringbuilder"><span>Sự khác biệt giữa StringBuffer và StringBuilder</span></a></h3><p>Bởi vì chuỗi là không thay đổi, vì vậy khi làm việc với ghép chuỗi (đặc biệt là sử dụng toán tử <code>+</code>), bạn cần phải xem xét vấn đề về hiệu suất, bạn không thể sản xuất quá nhiều đối tượng String mà không cần thiết gây áp lực lên bộ nhớ quý giá.</p><p>Do đó, Java đã thiết kế lớp StringBuffer đặc biệt để giải quyết vấn đề này.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> final</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> StringBuffer</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> extends</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> AbstractStringBuilder</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> implements</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Serializable</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> CharSequence</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> StringBuffer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        super</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">16</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> synchronized</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> StringBuffer</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> append</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;"> str</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        super</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">append</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(str);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> synchronized</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> String</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> toString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(value, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, count);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // Các phương thức khác</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tuy nhiên, vì các phương thức của StringBuffer đã được đồng bộ hóa bằng từ khóa <code>synchronized</code>, chủ yếu là để giải quyết vấn đề an toàn đa luồng, nên nếu không phải là môi trường đa luồng, hiệu suất thực thi sẽ thấp hơn vì đã có sự khóa không cần thiết.</p><p>Do đó, Java đã sinh ra &quot;em trai&quot; cho StringBuffer, gọi là StringBuilder, và nói rằng, &quot;Con trai, đừng lo về an toàn đa luồng nữa, chỉ sử dụng trong môi trường đơn luồng thôi, điều này sẽ tăng hiệu suất rất nhiều. Nếu muốn chỉnh sửa chuỗi trong môi trường đa luồng, sau này có thể sử dụng <code>ThreadLocal</code> để tránh xung đột đa luồng.&quot;</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> final</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> StringBuilder</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> extends</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> AbstractStringBuilder</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    implements</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> java.io.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Serializable</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> CharSequence</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> StringBuilder</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> append</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;"> str</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        super</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">append</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(str);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> String</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> toString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">        // Tạo một bản sao, không chia sẻ mảng</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(value, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, count);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ngoài tên lớp khác nhau, các phương thức của StringBuilder không có từ khóa synchronized và gần như giống hệt với StringBuffer.</p><p>Trong thực tế, sử dụng StringBuilder thường xuyên hơn rất nhiều so với StringBuffer, thậm chí có thể nói rằng StringBuilder hoàn toàn thay thế StringBuffer.</p><h3 id="su-dung-stringbuilder" tabindex="-1"><a class="header-anchor" href="#su-dung-stringbuilder"><span>Sử dụng StringBuilder</span></a></h3><p>Trước đó chúng ta đã từng nói đến rằng, Java là một ngôn ngữ lập trình thông dịch, vì vậy khi trình biên dịch gặp phép toán <code>+</code>, nó sẽ biên dịch dòng mã <code>new String(&quot;one&quot;) + new String(&quot;two&quot;)</code> thành đoạn mã sau:</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> StringBuilder</span><span style="color:#E06C75;--shiki-dark:#E06C75;">()</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">append</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;one&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">append</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;two&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">toString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span></code></pre></div><p>Quá trình này là một quá trình mà chúng ta không nhìn thấy, nhưng đây chính là sự &quot;thông minh&quot; của Java, nó có thể tối ưu hóa rất nhiều trong quá trình biên dịch, từ đó cả tăng tốc độ phát triển ứng dụng (vì dấu <code>+</code> viết dễ hơn nhiều so với việc tạo đối tượng StringBuilder), và không ảnh hưởng đến hiệu suất thực thi của JVM.</p><p>Tất nhiên, nếu chúng ta sử dụng <code>javap</code> để phân tích ngược bytecode của <code>new String(&quot;one&quot;) + new String(&quot;two&quot;)</code>, chúng ta cũng có thể nhìn thấy sự xuất hiện của StringBuilder.</p><blockquote><p>javap và bytecode sẽ được giải thích chi tiết khi chúng ta nói đến JVM, hãy click vào link để tìm hiểu thêm.</p></blockquote><div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>0: new           #2                  // class java/lang/StringBuilder</span></span>
<span class="line"><span>3: dup</span></span>
<span class="line"><span>4: invokespecial #3                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span>7: new           #4                  // class java/lang/String</span></span>
<span class="line"><span>10: dup</span></span>
<span class="line"><span>11: ldc           #5                  // String one</span></span>
<span class="line"><span>13: invokespecial #6                  // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span>
<span class="line"><span>16: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span>
<span class="line"><span>19: new           #4                  // class java/lang/String</span></span>
<span class="line"><span>22: dup</span></span>
<span class="line"><span>23: ldc           #8                  // String two</span></span>
<span class="line"><span>25: invokespecial #6                  // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span>
<span class="line"><span>28: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span>
<span class="line"><span>31: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span>
<span class="line"><span>34: areturn</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Có thể thấy rằng trình biên dịch Java đã chuyển đổi phép nối chuỗi (<code>+</code>) thành các cuộc gọi phương thức append của đối tượng StringBuilder, và sau đó gọi phương thức toString của StringBuilder để trả về chuỗi đã được nối.</p><h3 id="trien-khai-noi-bo-cua-stringbuilder" tabindex="-1"><a class="header-anchor" href="#trien-khai-noi-bo-cua-stringbuilder"><span>Triển khai nội bộ của StringBuilder</span></a></h3><p>Hãy xem xét phương thức toString của StringBuilder:</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> String</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> toString</span><span style="color:#E06C75;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> String</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> count)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre></div><p>Trong đó, value là một mảng kiểu char:</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"> * The value is used for character storage.</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">char</span><span style="color:#E06C75;--shiki-dark:#E06C75;">[] value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><p>Khi đối tượng StringBuilder được tạo, một không gian bộ nhớ được cấp phát cho value với dung lượng ban đầu là 16 ký tự.</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"> * Constructs a string builder with no characters in it and an</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"> * initial capacity of 16 characters.</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> StringBuilder</span><span style="color:#E06C75;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    super</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">16</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre></div><p>Khi nối chuỗi, độ dài của mảng value sẽ tăng dần. Do đó, trong triển khai của đối tượng StringBuilder, độ dài của mảng value có thể được mở rộng động, tương tự như ArrayList.</p><p>Tiếp tục với phương thức toString của StringBuilder:</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> String</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> toString</span><span style="color:#E06C75;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> String</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> count)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre></div><p>value dùng để lưu trữ chuỗi ký tự trong đối tượng StringBuilder. Biến count là một biến kiểu int, biểu thị độ dài của chuỗi ký tự. Phương thức toString() sẽ gọi <code>new String(value, 0, count)</code> để tạo một đối tượng chuỗi mới từ count ký tự đầu tiên trong mảng value, và trả về chuỗi đó.</p><p>Tiếp tục với phương thức append:</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> StringBuilder</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> append</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> str) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    super</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">append</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(str);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre></div><p>Thực tế, phương thức <code>append(String str)</code> đã được gọi trong lớp AbstractStringBuilder. Trong AbstractStringBuilder, phương thức <code>append(String str)</code> kiểm tra xem số ký tự hiện tại trong chuỗi có đủ không. Nếu không đủ, nó sẽ mở rộng bộ nhớ và nối chuỗi đã cho vào cuối chuỗi hiện tại.</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> AbstractStringBuilder</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> append</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> str) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (str </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> appendNull</span><span style="color:#E06C75;--shiki-dark:#E06C75;">()</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> len </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> str</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">length</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    ensureCapacityInternal</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(count </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> len)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    str</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getChars</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, len, value, count);</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    count </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> len</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre></div><p>Phương thức <code>append(String str)</code> nối chuỗi đã cho vào chuỗi hiện tại. Nếu chuỗi đã cho là null, nó sẽ nối chuỗi &quot;null&quot;; ngược lại, nó sẽ kiểm tra độ dài của chuỗi đã cho và sau đó dựa vào số lượng ký tự hiện tại trong chuỗi và độ dài của chuỗi đã cho để quyết định xem có cần mở rộng bộ nhớ hay không.</p><p>Nếu cần mở rộng bộ nhớ, phương thức sẽ gọi phương thức <code>ensureCapacityInternal(int minimumCapacity)</code>. Sau khi mở rộng, nó sẽ sao chép các ký tự của chuỗi đã cho vào cuối chuỗi.</p><p>Hãy xem phương thức ensureCapacityInternal:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">private</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> ensureCapacityInternal</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> minimumCapacity) {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // Nếu không đủ, mở rộng bộ nhớ</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (minimumCapacity </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">length</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &gt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        expandCapacity</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(minimumCapacity)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> expandCapacity</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> minimumCapacity) {</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // Chiến lược mở rộng: Mới = Cũ * 2 + 2</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> newCapacity </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">length</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> *</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 2</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // Nếu mới &lt; minimumCapacity, mới = minimumCapacity</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (newCapacity </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> minimumCapacity </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        newCapacity </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> minimumCapacity</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // Nếu mới &lt; 0, mới = Integer.MAX_VALUE</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (newCapacity </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#E06C75;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (minimumCapacity </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#E06C75;--shiki-dark:#E06C75;">) </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// overflow</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            throw</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> OutOfMemoryError</span><span style="color:#E06C75;--shiki-dark:#E06C75;">()</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        newCapacity </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">MAX_VALUE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // Mở rộng bộ nhớ của chuỗi đến kích thước mới</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    value </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Arrays</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">copyOf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(value, newCapacity);</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Phương thức <code>ensureCapacityInternal(int minimumCapacity)</code> đảm bảo rằng dung lượng của chuỗi hiện tại ít nhất là minimumCapacity. Nếu dung lượng hiện tại nhỏ hơn minimumCapacity, nó sẽ cấp phát một mảng nội bộ mới cho chuỗi. Cách tính dung lượng mới như sau:</p><ul><li>Nếu minimumCapacity lớn hơn dung lượng hiện tại, dung lượng mới là gấp đôi dung lượng cũ cộng thêm 2. Lý do thêm 2 là với các chuỗi rất nhỏ (ví dụ như chuỗi rỗng hoặc chỉ có một ký tự), việc chỉ nhân đôi có thể không đủ để chứa nhiều ký tự hơn. 2 đảm bảo rằng ngay cả với dung lượng ban đầu rất nhỏ, việc mở rộng cũng sẽ cho phép thêm ít nhất một vài ký tự mà không cần phải mở rộng thêm lần nữa ngay lập tức.</li><li>Nếu minimumCapacity nhỏ hơn hoặc bằng dung lượng hiện tại, không cần phải mở rộng, chỉ cần trả về đối tượng hiện tại.</li></ul><p>Trước khi mở rộng, phương thức <code>ensureCapacityInternal(int minimumCapacity)</code> sẽ kiểm tra xem dung lượng hiện tại của chuỗi có đủ không. Nếu không đủ, nó sẽ gọi phương thức <code>expandCapacity(int minimumCapacity)</code> để mở rộng. Phương thức <code>expandCapacity(int minimumCapacity)</code> trước tiên tính toán dung lượng mới, sau đó sử dụng phương thức <code>Arrays.copyOf(char[] original, int newLength)</code> để mở rộng mảng ký tự ban đầu lên dung lượng mới.</p><h3 id="phuong-thuc-reverse-cua-stringbuilder" tabindex="-1"><a class="header-anchor" href="#phuong-thuc-reverse-cua-stringbuilder"><span>Phương thức reverse của StringBuilder</span></a></h3><p>StringBuilder còn cung cấp một phương thức <code>reverse</code> để đảo ngược các ký tự trong chuỗi hiện tại.</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> StringBuilder</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> reverse</span><span style="color:#E06C75;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    super</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">reverse</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre></div><p>Phương thức này gọi đến phương thức <code>reverse()</code> của lớp cha AbstractStringBuilder. Dưới đây là phiên bản đã loại bỏ các mã không quan trọng của phương thức này:</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> AbstractStringBuilder</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> reverse</span><span style="color:#E06C75;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> n </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> count </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"> // Chỉ số của ký tự cuối cùng trong chuỗi</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // Duyệt qua nửa đầu của chuỗi</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    for</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> j </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (n</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#E06C75;--shiki-dark:#E06C75;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;&gt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> j </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> j</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">--</span><span style="color:#E06C75;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> k </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> n </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> j</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"> // Tính chỉ số đối xứng với j</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        char</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> cj </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> value[j]</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"> // Lấy ký tự tại vị trí j</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        char</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> ck </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> value[k]</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"> // Lấy ký tự tại vị trí đối xứng k</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        value[j] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> ck</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"> // Hoán đổi ký tự</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        value[k] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> cj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"> // Hoán đổi ký tự</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"> // Trả về đối tượng StringBuilder sau khi đảo ngược</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre></div><ol><li><strong>Khởi tạo</strong>: <code>n</code> là chỉ số của ký tự cuối cùng trong chuỗi.</li><li><strong>Đảo ngược chuỗi</strong>: <ul><li>Phương thức sử dụng một vòng lặp <code>for</code> để duyệt qua nửa đầu và nửa cuối của chuỗi. Đây là một cách rất hiệu quả vì nó tiết kiệm một nửa thời gian so với việc duyệt từ đầu đến cuối chuỗi. <code>(n-1) &gt;&gt; 1</code> là cách viết bằng phép toán bit của <code>(n-1) / 2</code>, tức là chỉ số của ký tự cuối cùng trong nửa đầu của chuỗi.</li><li>Trong mỗi lần lặp, tính toán chỉ số đối xứng với chỉ số hiện tại <code>j</code>, và hoán đổi các ký tự tại hai vị trí này.</li></ul></li></ol><p>Bài toán số 7 trên LeetCode, &quot;<a href="https://leetcode.com/problems/reverse-integer/" target="_blank" rel="noopener noreferrer">007. Integer Reverse</a>&quot;, yêu cầu chúng ta đảo ngược một số nguyên. Thực tế, chúng ta có thể sử dụng phương thức <code>reverse</code> của StringBuilder để giải quyết bài toán này.</p>`,47),e=[r];function t(p,o){return a(),n("div",null,e)}const k=s(l,[["render",t],["__file","builder-buffer.html.vue"]]),d=JSON.parse('{"path":"/programming/java/string/builder-buffer.html","title":"StringBuiler and StringBuffer","lang":"en-US","frontmatter":{"title":"StringBuiler and StringBuffer","tags":["java"],"categories":["java"],"order":4,"description":"StringBuilder và StringBuffer Sự khác biệt giữa StringBuffer và StringBuilder Bởi vì chuỗi là không thay đổi, vì vậy khi làm việc với ghép chuỗi (đặc biệt là sử dụng toán tử +),...","head":[["meta",{"property":"og:url","content":"https://vanhung4499.github.io/programming/java/string/builder-buffer.html"}],["meta",{"property":"og:site_name","content":"VanHung4499"}],["meta",{"property":"og:title","content":"StringBuiler and StringBuffer"}],["meta",{"property":"og:description","content":"StringBuilder và StringBuffer Sự khác biệt giữa StringBuffer và StringBuilder Bởi vì chuỗi là không thay đổi, vì vậy khi làm việc với ghép chuỗi (đặc biệt là sử dụng toán tử +),..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-07-03T07:17:01.000Z"}],["meta",{"property":"article:author","content":"Hung Nguyen"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:modified_time","content":"2024-07-03T07:17:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"StringBuiler and StringBuffer\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-03T07:17:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hung Nguyen\\",\\"url\\":\\"https://vanhung4499.github.io\\"}]}"]]},"headers":[{"level":3,"title":"Sự khác biệt giữa StringBuffer và StringBuilder","slug":"su-khac-biet-giua-stringbuffer-va-stringbuilder","link":"#su-khac-biet-giua-stringbuffer-va-stringbuilder","children":[]},{"level":3,"title":"Sử dụng StringBuilder","slug":"su-dung-stringbuilder","link":"#su-dung-stringbuilder","children":[]},{"level":3,"title":"Triển khai nội bộ của StringBuilder","slug":"trien-khai-noi-bo-cua-stringbuilder","link":"#trien-khai-noi-bo-cua-stringbuilder","children":[]},{"level":3,"title":"Phương thức reverse của StringBuilder","slug":"phuong-thuc-reverse-cua-stringbuilder","link":"#phuong-thuc-reverse-cua-stringbuilder","children":[]}],"git":{"createdTime":1719590078000,"updatedTime":1719991021000,"contributors":[{"name":"Hung Nguyen","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":7.3,"words":2190},"filePathRelative":"programming/java/string/builder-buffer.md","localizedDate":"June 28, 2024","excerpt":"\\n<h3>Sự khác biệt giữa StringBuffer và StringBuilder</h3>\\n<p>Bởi vì chuỗi là không thay đổi, vì vậy khi làm việc với ghép chuỗi (đặc biệt là sử dụng toán tử <code>+</code>), bạn cần phải xem xét vấn đề về hiệu suất, bạn không thể sản xuất quá nhiều đối tượng String mà không cần thiết gây áp lực lên bộ nhớ quý giá.</p>","autoDesc":true}');export{k as comp,d as data};
