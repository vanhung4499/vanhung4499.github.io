import{_ as n,o as e,c as s,a as i}from"./app-5QVbWi7Z.js";const o={};function l(c,a){return e(),s("div",null,a[0]||(a[0]=[i(`<h1 id="配置中心-nacos" tabindex="-1"><a class="header-anchor" href="#配置中心-nacos"><span>配置中心 Nacos</span></a></h1><h2 id="_1-配置中心-nacos" tabindex="-1"><a class="header-anchor" href="#_1-配置中心-nacos"><span><a href="#_1-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-nacos">#</a> 1. 配置中心 Nacos</span></a></h2><p>项目使用 Nacos 作为配置中心，实现配置的动态管理。</p><h3 id="_1-1-搭建-nacos-server" tabindex="-1"><a class="header-anchor" href="#_1-1-搭建-nacos-server"><span><a href="#_1-1-%E6%90%AD%E5%BB%BA-nacos-server">#</a> 1.1 搭建 Nacos Server</span></a></h3><p>① 参考<a href="https://www.iocoder.cn/Nacos/install/?qun" target="_blank" rel="noopener noreferrer">《芋道 Nacos 极简入门》</a>文章的「2. 单机部署（最简模式）」或「3. 单机部署（基于 MySQL 数据库）」小节。</p><p>② 点击 Nacos 控制台的 [命名空间] 菜单，创建一个 ID 和名字都为 <code>dev</code> 的命名空间，稍后会使用到。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/注册中心/命名空间.png" alt="命名空间" tabindex="0" loading="lazy"><figcaption>命名空间</figcaption></figure><h3 id="_1-2-项目接入-nacos" tabindex="-1"><a class="header-anchor" href="#_1-2-项目接入-nacos"><span><a href="#_1-2-%E9%A1%B9%E7%9B%AE%E6%8E%A5%E5%85%A5-nacos">#</a> 1.2 项目接入 Nacos</span></a></h3><p>友情提示：以 yudao-module-system 服务为例子。</p><h4 id="_1-2-1-引入依赖" tabindex="-1"><a class="header-anchor" href="#_1-2-1-引入依赖"><span><a href="#_1-2-1-%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96">#</a> 1.2.1 引入依赖</span></a></h4><p>在 <code>yudao-module-system-biz</code> 模块的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/pom.xml" target="_blank" rel="noopener noreferrer"><code>pom.xml</code></a> 中，引入 Nacos 对应的依赖。如下所示：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>&lt;!-- Spring Cloud 基础 --&gt;</span></span>
<span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;spring-cloud-starter-bootstrap&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;!-- Config 配置中心相关 --&gt;</span></span>
<span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div><h4 id="_1-2-2-添加配置" tabindex="-1"><a class="header-anchor" href="#_1-2-2-添加配置"><span><a href="#_1-2-2-%E6%B7%BB%E5%8A%A0%E9%85%8D%E7%BD%AE">#</a> 1.2.2 添加配置</span></a></h4><p>在 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/resources/bootstrap-local.yaml#L12-L23" target="_blank" rel="noopener noreferrer"><code>bootstrap-local.yaml</code></a> 中，添加 <code>nacos.config</code> 配置。如下所示：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>--- #################### 配置中心相关配置 ####################</span></span>
<span class="line"><span></span></span>
<span class="line"><span>spring:</span></span>
<span class="line"><span>  cloud:</span></span>
<span class="line"><span>    nacos:</span></span>
<span class="line"><span>      # Nacos Config 配置项，对应 NacosConfigProperties 配置属性类</span></span>
<span class="line"><span>      config:</span></span>
<span class="line"><span>        server-addr: 127.0.0.1:8848 # Nacos 服务器地址</span></span>
<span class="line"><span>        namespace: dev # 命名空间。这里使用 dev 开发环境</span></span>
<span class="line"><span>        group: DEFAULT_GROUP # 使用的 Nacos 配置分组，默认为 DEFAULT_GROUP</span></span>
<span class="line"><span>        name: # 使用的 Nacos 配置集的 dataId，默认为 spring.application.name</span></span>
<span class="line"><span>        file-extension: yaml # 使用的 Nacos 配置集的 dataId 的文件拓展名，同时也是 Nacos 配置集的配置格式，默认为 properties</span></span></code></pre></div><ul><li><code>spring.cloud.nacos.config.namespace</code> 配置项：设置为 <code>dev</code>，就是刚创建的命名空间</li></ul><h4 id="_1-2-3-配置管理" tabindex="-1"><a class="header-anchor" href="#_1-2-3-配置管理"><span><a href="#_1-2-3-%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86">#</a> 1.2.3 配置管理</span></a></h4><p>① 参考<a href="https://www.iocoder.cn/Spring-Cloud-Alibaba/Nacos-Config/?qun" target="_blank" rel="noopener noreferrer">《芋道 Spring Cloud Alibaba 配置中心 Nacos 入门 》</a>文档，学习 Nacos 配置中心的使用。</p><p>② 按照需要，将不同环境存在差异的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/resources/application-local.yaml" target="_blank" rel="noopener noreferrer"><code>application-local.yaml</code></a> 和 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/resources/application-dev.yaml" target="_blank" rel="noopener noreferrer"><code>application-dev.yaml</code></a> 中的配置，迁移到 Nacos 配置中心。</p><p><em>一般情况下，不建议将 <code>application.yaml</code> 中的配置，迁移到 Nacos 配置中心。因为 <code>application.yaml</code> 中的配置，是通用的配置，无需动态管理。</em></p><p>疑问：为什么项目中的 <code>application-{env}.yaml</code> 中的配置，没有放到 Nacos 配置中心中？</p><p>主要考虑大家 <a href="/quick-start">《快速启动》</a> 可以更简单。</p><p>实际项目中，是建议放到 Nacos 配置中心，进行配置的动态管理的。</p><p>操作过程中，可能会碰到的问题：</p><ul><li><a href="https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0" target="_blank" rel="noopener noreferrer">IdTypeEnvironmentPostProcessor 与 Nacos 配置中心加载顺序问题</a></li></ul><h2 id="_2-配置管理" tabindex="-1"><a class="header-anchor" href="#_2-配置管理"><span><a href="#_2-%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86">#</a> 2. 配置管理</span></a></h2><p>友情提示：该功能是从 Boot 项目延用到 Cloud 项目，一般情况下不会使用到，使用 Nacos 管理配置即可。</p><p>在 [基础设施 -&gt; 配置管理] 菜单，可以查看和管理配置，适合业务上需要动态的管理某个配置。</p><p>例如说：创建用户时，需要配置用户的默认密码，这个密码是不会变的，但是有时候需要修改这个默认密码，这个时候就可以通过配置管理来修改。</p><figure><img src="https://cloud.iocoder.cn/img/配置中心/01.png" alt="配置中心" tabindex="0" loading="lazy"><figcaption>配置中心</figcaption></figure><p>对应的后端代码是 <code>yudao-module-infra</code> 的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-infra/yudao-module-infra-biz/src/main/java/cn/iocoder/yudao/module/infra/service/config/" target="_blank" rel="noopener noreferrer"><code>config</code></a> 业务模块。</p><h3 id="_2-1-配置的表结构" tabindex="-1"><a class="header-anchor" href="#_2-1-配置的表结构"><span><a href="#_2-1-%E9%85%8D%E7%BD%AE%E7%9A%84%E8%A1%A8%E7%BB%93%E6%9E%84">#</a> 2.1 配置的表结构</span></a></h3><p><code>infra_config</code> 的表结构如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE \`infra_config\` (</span></span>
<span class="line"><span>    \`id\` int NOT NULL AUTO_INCREMENT COMMENT &#39;参数主键&#39;,</span></span>
<span class="line"><span>    \`group\` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;参数分组&#39;,</span></span>
<span class="line"><span>    \`type\` tinyint NOT NULL COMMENT &#39;参数类型&#39;,</span></span>
<span class="line"><span>    \`name\` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &#39;&#39; COMMENT &#39;参数名称&#39;,</span></span>
<span class="line"><span>    \`key\` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &#39;&#39; COMMENT &#39;参数键名&#39;,</span></span>
<span class="line"><span>    \`value\` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &#39;&#39; COMMENT &#39;参数键值&#39;,</span></span>
<span class="line"><span>    \`sensitive\` bit(1) NOT NULL COMMENT &#39;是否敏感&#39;,</span></span>
<span class="line"><span>    \`remark\` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &#39;备注&#39;,</span></span>
<span class="line"><span>    \`creator\` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT &#39;&#39; COMMENT &#39;创建者&#39;,</span></span>
<span class="line"><span>    \`create_time\` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,</span></span>
<span class="line"><span>    \`updater\` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT &#39;&#39; COMMENT &#39;更新者&#39;,</span></span>
<span class="line"><span>    \`update_time\` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;更新时间&#39;,</span></span>
<span class="line"><span>    \`deleted\` bit(1) NOT NULL DEFAULT b&#39;0&#39; COMMENT &#39;是否删除&#39;,</span></span>
<span class="line"><span>    PRIMARY KEY (\`id\`) USING BTREE</span></span>
<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&#39;参数配置表&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>key</code> 字段，对应到 Spring Boot 配置文件的配置项，例如说 <code>yudao.captcha.enable</code>、<code>sys.user.init-password</code> 等等。</li></ul><h3 id="_2-2-后端案例" tabindex="-1"><a class="header-anchor" href="#_2-2-后端案例"><span><a href="#_2-2-%E5%90%8E%E7%AB%AF%E6%A1%88%E4%BE%8B">#</a> 2.2 后端案例</span></a></h3><p>TODO 芋艿：待补充</p><h3 id="_2-3-前端案例" tabindex="-1"><a class="header-anchor" href="#_2-3-前端案例"><span><a href="#_2-3-%E5%89%8D%E7%AB%AF%E6%A1%88%E4%BE%8B">#</a> 2.3 前端案例</span></a></h3><p>后端提供了 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-infra/yudao-module-infra-biz/src/main/java/cn/iocoder/yudao/module/infra/controller/admin/config/ConfigController.java#L70-L82" target="_blank" rel="noopener noreferrer"><code>/admin-api/infra/config/get-value-by-key</code></a> RESTful API 接口，返回指定配置项的值。前端的使用示例如下图：</p><figure><img src="https://cloud.iocoder.cn/img/配置中心/07-vue3.png" alt="前端案例" tabindex="0" loading="lazy"><figcaption>前端案例</figcaption></figure>`,40)]))}const p=n(o,[["render",l],["__file","config-center.html.vue"]]),d=JSON.parse('{"path":"/project/yudao-cloud/config-center.html","title":"配置中心 Nacos","lang":"en-US","frontmatter":{"title":"配置中心 Nacos","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":52,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 配置中心 Nacos","slug":"_1-配置中心-nacos","link":"#_1-配置中心-nacos","children":[{"level":3,"title":"# 1.1 搭建 Nacos Server","slug":"_1-1-搭建-nacos-server","link":"#_1-1-搭建-nacos-server","children":[]},{"level":3,"title":"# 1.2 项目接入 Nacos","slug":"_1-2-项目接入-nacos","link":"#_1-2-项目接入-nacos","children":[]}]},{"level":2,"title":"# 2. 配置管理","slug":"_2-配置管理","link":"#_2-配置管理","children":[{"level":3,"title":"# 2.1 配置的表结构","slug":"_2-1-配置的表结构","link":"#_2-1-配置的表结构","children":[]},{"level":3,"title":"# 2.2 后端案例","slug":"_2-2-后端案例","link":"#_2-2-后端案例","children":[]},{"level":3,"title":"# 2.3 前端案例","slug":"_2-3-前端案例","link":"#_2-3-前端案例","children":[]}]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":3.96,"words":1187},"filePathRelative":"project/yudao-cloud/config-center.md","localizedDate":"July 7, 2024"}');export{p as comp,d as data};
