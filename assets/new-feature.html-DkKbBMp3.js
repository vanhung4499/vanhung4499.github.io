import{_ as a,o as i,c as n,a as o}from"./app-5QVbWi7Z.js";const t={};function r(c,e){return i(),n("div",null,e[0]||(e[0]=[o('<h1 id="代码生成【单表】-新增功能" tabindex="-1"><a class="header-anchor" href="#代码生成【单表】-新增功能"><span>代码生成【单表】（新增功能）</span></a></h1><p>大部分项目里，其实有很多代码是重复的，几乎每个模块都有 CRUD 增删改查的功能，而这些功能的实现代码往往是大同小异的。如果这些功能都要自己去手写，非常无聊枯燥，浪费时间且效率很低，还可能会写错。</p><p>所以这种重复性的代码，项目提供了 <a href="https://github.com/YunaiV/ruoyi-vue-pro/tree/master/yudao-module-infra/yudao-module-infra-biz/src/main/java/cn/iocoder/yudao/module/infra/service/codegen" target="_blank" rel="noopener noreferrer">codegen</a> 代码生成器，只需要在数据库中设计好表结构，就可以一键生成前后端代码 + 单元测试 + Swagger 接口文档 + Validator 参数校验。</p><p>针对不同的业务场景，项目提供了三种模式：单表、树表、主子表。</p><p>本文，我们将演示“单表”的使用，基于代码生成器，在 <code>yudao-module-system</code> 模块中，开发一个【<strong>用户组</strong>】的功能。</p><h2 id="👍-相关视频教程" tabindex="-1"><a class="header-anchor" href="#👍-相关视频教程"><span><a href="#%F0%9F%91%8D-%E7%9B%B8%E5%85%B3%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B">#</a> 👍 相关视频教程</span></a></h2><ul><li><a href="https://t.zsxq.com/07Jm2vrzJ" target="_blank" rel="noopener noreferrer">从零开始 05：如何 5 分钟，开发一个新功能？</a></li></ul><h2 id="_1-数据库表结构设计" tabindex="-1"><a class="header-anchor" href="#_1-数据库表结构设计"><span><a href="#_1-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1">#</a> 1. 数据库表结构设计</span></a></h2><p>设计用户组的数据库表名为 <code>system_group</code>，其建表语句如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE `system_group` (</span></span>\n<span class="line"><span>    `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;编号&#39;,</span></span>\n<span class="line"><span>    `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;名字&#39;,</span></span>\n<span class="line"><span>    `description` varchar(512) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &#39;描述&#39;,</span></span>\n<span class="line"><span>    `status` tinyint NOT NULL COMMENT &#39;状态&#39;,</span></span>\n<span class="line"><span>    `creator` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT &#39;&#39; COMMENT &#39;创建者&#39;,</span></span>\n<span class="line"><span>    `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,</span></span>\n<span class="line"><span>    `updater` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT &#39;&#39; COMMENT &#39;更新者&#39;,</span></span>\n<span class="line"><span>    `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;更新时间&#39;,</span></span>\n<span class="line"><span>    `deleted` bit(1) NOT NULL DEFAULT b&#39;0&#39; COMMENT &#39;是否删除&#39;,</span></span>\n<span class="line"><span>    `tenant_id` bigint NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;租户编号&#39;,</span></span>\n<span class="line"><span>    PRIMARY KEY (`id`) USING BTREE</span></span>\n<span class="line"><span>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&#39;用户组&#39;;</span></span></code></pre></div><figure><img src="https://doc.iocoder.cn/img/代码生成/单表/表结构.png" alt="建表语句" tabindex="0" loading="lazy"><figcaption>建表语句</figcaption></figure><p>① 表名的前缀，要和 Maven Module 的模块名保持一致。例如说，用户组在 <code>yudao-module-system</code> 模块，所以表名的前缀是 <code>system_</code>。</p><p>疑问：为什么要保持一致？</p><p>代码生成器会自动解析表名的前缀，获得其所属的 Maven Module 模块，简化配置过程。</p><p>② 设置 ID 主键，一般推荐使用 <code>bigint</code> 长整形，并设置自增长。</p><p>③ 正确设置每个字段是否允许空，代码生成器会根据它生成参数是否允许空的校验规则。</p><p>④ 正确设置注释，代码生成器会根据它生成字段名与提示等信息。</p><p>⑤ 添加 <code>creator</code>、<code>create_time</code>、<code>updater</code>、<code>update_time</code>、<code>deleted</code> 是必须设置的系统字段；如果开启多租户的功能，并且该表需要多租户的隔离，则需要添加 <code>tenant_id</code> 字段。</p><h2 id="_2-代码生成" tabindex="-1"><a class="header-anchor" href="#_2-代码生成"><span><a href="#_2-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90">#</a> 2. 代码生成</span></a></h2><h3 id="_2-1-导入表" tabindex="-1"><a class="header-anchor" href="#_2-1-导入表"><span><a href="#_2-1-%E5%AF%BC%E5%85%A5%E8%A1%A8">#</a> 2.1 导入表</span></a></h3><p>点击 [基础设施 -&gt; 代码生成] 菜单，点击 [基于 DB 导入] 按钮，选择 <code>system_group</code> 表，后点击 [确认] 按钮。</p><figure><img src="https://doc.iocoder.cn/img/代码生成/单表/导入表.png" alt="基于 DB 导入" tabindex="0" loading="lazy"><figcaption>基于 DB 导入</figcaption></figure><p>代码实现？</p><p>可见 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-infra/yudao-module-infra-biz/src/main/java/cn/iocoder/yudao/module/infra/service/codegen/inner/CodegenBuilder.java" target="_blank" rel="noopener noreferrer">CodegenBuilder</a> 类，自动解析数据库的表结构，生成默认的配置。</p><h3 id="_2-2-编辑配置" tabindex="-1"><a class="header-anchor" href="#_2-2-编辑配置"><span><a href="#_2-2-%E7%BC%96%E8%BE%91%E9%85%8D%E7%BD%AE">#</a> 2.2 编辑配置</span></a></h3><p>点击 <code>system_group</code> 所在行的 [编辑] 按钮，修改生成配置。后操作如下：</p><figure><img src="https://doc.iocoder.cn/img/代码生成/单表/修改配置-基本信息.png" alt="基本信息" tabindex="0" loading="lazy"><figcaption>基本信息</figcaption></figure><figure><img src="https://doc.iocoder.cn/img/代码生成/单表/修改配置-字段信息.png" alt="字段信息" tabindex="0" loading="lazy"><figcaption>字段信息</figcaption></figure><ul><li>将 <code>status</code> 字段的显示类型为【下拉框】，字典类型为【系统状态】。</li><li>将 <code>description</code> 字段的【查询】取消。</li><li>将 <code>id</code>、<code>name</code>、<code>description</code>、<code>status</code> 字段的【示例】填写上。</li></ul><p>字段信息</p><ul><li><p>插入：新增时，是否传递该字段。</p></li><li><p>编辑：修改时，是否传递该字段。</p></li><li><p>列表：Table 表格，是否展示该字段。</p></li><li><p>查询：搜索框，是否支持该字段查询，查询的条件是什么。</p></li><li><p>允许空：新增或修改时，是否必须传递该字段，用于 Validator 参数校验。</p></li><li><p>字典类型：在显示类型是下拉框、单选框、复选框时，选择使用的字典。</p></li><li><p>示例：参数示例，用于 Swagger 接口文档的 <code>example</code> 示例。<br><img src="https://doc.iocoder.cn/img/代码生成/单表/修改配置-生成信息.png" alt="生成信息" loading="lazy"></p></li><li><p>将【上级菜单】设置为【系统管理】。</p></li><li><p>将【前端类型】设置为“前端项目”对应的“前端类型”。例如说，我们这里演示的是 <code>yudao-ui-admin-vue3</code> 前端项目，则选择了【Vue3 Element Plus 标准模版】。</p></li></ul><table><thead><tr><th>前端项目</th><th>前端类型</th></tr></thead><tbody><tr><td>yudao-ui-admin-vue2</td><td>Vue2 Element UI 标准模版</td></tr><tr><td>yudao-ui-admin-vue3</td><td>Vue3 Element Plus 标准模版、Vue3 Element Plus Schema 模版</td></tr><tr><td>yudao-ui-admin-vben</td><td>Vue3 Vben 模版</td></tr></tbody></table><p>生成信息</p><ul><li>生成场景：分成管理后台、用户 App 两种，用于生成 Controller 放在 <code>admin</code> 还是 <code>app</code> 包。</li><li>上级菜单：生成场景是管理后台时，需要设置其所属的上级菜单。</li><li>前端类型： 提供多种 UI 模版。 <ul><li>【Vue3 Element Plus Schema 模版】，对应 <a href="/vue3/crud-schema">《前端手册 Vue 3.X —— CRUD 组件》</a> 说明。</li><li>后端的 <code>application.yaml</code> 配置文件中的 <code>yudao.codegen.front-type</code> 配置项，设置默认的 UI 模版，避免每次都需要设置。<br> 完成后，点击 [提交] 按钮，保存生成配置。</li></ul></li></ul><h3 id="_2-3-预览代码" tabindex="-1"><a class="header-anchor" href="#_2-3-预览代码"><span><a href="#_2-3-%E9%A2%84%E8%A7%88%E4%BB%A3%E7%A0%81">#</a> 2.3 预览代码</span></a></h3><p>点击 <code>system_group</code> 所在行的 [预览] 按钮，在线预览生成的代码，检查是否符合预期。</p><figure><img src="https://doc.iocoder.cn/img/代码生成/单表/代码预览.png" alt="代码预览" tabindex="0" loading="lazy"><figcaption>代码预览</figcaption></figure><h3 id="_2-4-生成代码" tabindex="-1"><a class="header-anchor" href="#_2-4-生成代码"><span><a href="#_2-4-%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81">#</a> 2.4 生成代码</span></a></h3><p>点击 <code>system_group</code> 所在行的 [生成代码] 按钮，下载生成代码的压缩包，双击进行解压。</p><figure><img src="https://doc.iocoder.cn/img/代码生成/单表/代码生成.png" alt="生成代码" tabindex="0" loading="lazy"><figcaption>生成代码</figcaption></figure><p>代码实现？</p><p>可见 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-infra/yudao-module-infra-biz/src/main/java/cn/iocoder/yudao/module/infra/service/codegen/inner/CodegenEngine.java" target="_blank" rel="noopener noreferrer">CodegenEngine</a> 类，基于 Velocity 模板引擎，生成具体代码。模板文件，可见 <a href="https://github.com/YunaiV/ruoyi-vue-pro/tree/master/yudao-module-infra/yudao-module-infra-biz/src/main/resources/codegen" target="_blank" rel="noopener noreferrer"><code>resources/codegen</code></a> 目录。</p><h2 id="_3-代码运行" tabindex="-1"><a class="header-anchor" href="#_3-代码运行"><span><a href="#_3-%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C">#</a> 3. 代码运行</span></a></h2><p>本小节，我们将生成的代码，复制到项目中，并进行运行。</p><h3 id="_3-1-后端运行" tabindex="-1"><a class="header-anchor" href="#_3-1-后端运行"><span><a href="#_3-1-%E5%90%8E%E7%AB%AF%E8%BF%90%E8%A1%8C">#</a> 3.1 后端运行</span></a></h3><p>① 将生成的后端代码，复制到项目中。操作如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/代码生成/单表/复制后端.png" alt="复制后端" tabindex="0" loading="lazy"><figcaption>复制后端</figcaption></figure><p>② 将 <code>ErrorCodeConstants.java_手动操作</code> 文件的错误码，复制到该模块 ErrorCodeConstants 类中，并设置对应的错误码编号，之后进行删除。操作如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/代码生成/单表/添加错误码.png" alt="添加错误码" tabindex="0" loading="lazy"><figcaption>添加错误码</figcaption></figure><p>③ 将 <code>h2.sql</code> 的 CREATE 语句复制到该模块的 <code>create_tables.sql</code> 文件，DELETE 语句复制到该模块的 <code>clean.sql</code>。操作如下图：</p><figure><img src="https://doc.iocoder.cn/img/代码生成/单表/复制H2.png" alt="复制 h2 SQL" tabindex="0" loading="lazy"><figcaption>复制 h2 SQL</figcaption></figure><p>疑问：<code>create\\_tables.sql</code> 和 <code>clean.sql</code> 文件的作用是什么？</p><p>项目的单元测试，需要使用到 H2 内存数据库，<code>create_tables.sql</code> 用于创建所有的表结构，<code>clean.sql</code> 用于每个单元测试的方法跑完后清理数据。</p><p>然后，运行 GroupServiceImplTest 单元测试，执行通过。</p><p>④ 打开数据库工具，运行代码生成的 <code>sql/sql.sql</code> 文件，用于菜单的初始化。</p><figure><img src="https://doc.iocoder.cn/img/代码生成/单表/初始化菜单.png" alt="初始化菜单" tabindex="0" loading="lazy"><figcaption>初始化菜单</figcaption></figure><p>⑤ Debug 运行 YudaoServerApplication 类，启动后端项目。通过 IDEA 的 [Actuator -&gt; Mappings] 菜单，可以看到代码生成的 GroupController 的 RESTful API 接口已经生效。</p><figure><img src="https://doc.iocoder.cn/img/代码生成/单表/接口调用.png" alt="RESTful API 接口" tabindex="0" loading="lazy"><figcaption>RESTful API 接口</figcaption></figure><h3 id="_3-2-前端运行" tabindex="-1"><a class="header-anchor" href="#_3-2-前端运行"><span><a href="#_3-2-%E5%89%8D%E7%AB%AF%E8%BF%90%E8%A1%8C">#</a> 3.2 前端运行</span></a></h3><p>① 将生成的前端代码，复制到项目中。操作如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/代码生成/单表/复制前端.png" alt="复制前端" tabindex="0" loading="lazy"><figcaption>复制前端</figcaption></figure><p>② <strong>重新</strong>执行 <code>npm run dev</code> 命令，启动前端项目。点击 [系统管理 -&gt; 菜单管理] 菜单，点击【刷新菜单缓存】，因为前端项目会缓存菜单在内存中的，所以需要刷新一下。</p><p>③ 点击 [系统管理 -&gt; 用户组管理] 菜单，就可以看到用户组的 UI 界面。</p><figure><img src="https://doc.iocoder.cn/img/代码生成/单表/前端界面.png" alt="前端界面" tabindex="0" loading="lazy"><figcaption>前端界面</figcaption></figure><hr><p>至此，我们已经完成了【<strong>用户组</strong>】功能的代码生成，基本节省了你 80% 左右的开发任务，后续可以根据自己的需求，进行剩余的 20% 的开发！</p><h2 id="_4-后续变更" tabindex="-1"><a class="header-anchor" href="#_4-后续变更"><span><a href="#_4-%E5%90%8E%E7%BB%AD%E5%8F%98%E6%9B%B4">#</a> 4. 后续变更</span></a></h2><p>随着业务的发展，已经生成代码的功能需要变更。继续以【<strong>用户组</strong>】举例子，它的 <code>system_group</code> 表需要新增一个分类 <code>category</code> 字段，此时<strong>不建议</strong>使用代码生成器，而是直接修改已经生成的代码：</p><p>① 后端：修改 GroupDO 数据实体类、GroupSaveReqVO 保存 VO 类、GroupSaveRespVO 响应 VO 类，新增 <code>category</code> 字段。</p><p>② 前端：修改 Vue 的 <code>index.vue</code> 列表和 Form 表单组件，新增 <code>category</code> 字段。</p><p>③ 重新编译后后端，并进行启动。</p><p>over！非常简单方便，即保证了代码的整洁规范，又不增加过多的开发量。</p><h2 id="_5-常见问题" tabindex="-1"><a class="header-anchor" href="#_5-常见问题"><span><a href="#_5-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">#</a> 5. 常见问题</span></a></h2><p>① 生成的代码结构，有没具体说明？</p><p>答：参见 <a href="/project-intro">《项目结构》</a> 文档的说明，最好把对应视频好好看下。</p><p>② 为什么要分 XXXSaveReqVO、XXXRespVO、XXXPageReqVO 三个 VO 类？</p><p>答：星球里 <a href="https://t.zsxq.com/14Fc743WH" target="_blank" rel="noopener noreferrer">https://t.zsxq.com/14Fc743WH</a> 进行了 VO 拆分的讨论，总体大家倾向拆分成三个 VO 类，因为这样更加清晰，而且也不会增加太多的维护工作量。</p><p>可能你会想，能不能把 XXXSaveReqVO 和 XXXRespVO 合并成一个呢？有两方面的考虑：</p><ol><li>一般来说，新增/修改是不传递 <code>createTime</code>、<code>creator</code> 等字段，响应是需要返回 <code>createTime</code>、<code>creator</code> 等字段，两者的字段无法不一致。</li><li>一旦 VO 和 DO 拆分开后，调整字段时，例如说新增一个 xxx 字段，两个 VO 的修改成本，和一个 VO 实际是差不多的。</li></ol>',79)]))}const p=a(t,[["render",r],["__file","new-feature.html.vue"]]),l=JSON.parse('{"path":"/project/rouyi-vue-pro/new-feature.html","title":"代码生成【单表】（新增功能）","lang":"en-US","frontmatter":{"title":"代码生成【单表】（新增功能）","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":20,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 👍 相关视频教程","slug":"👍-相关视频教程","link":"#👍-相关视频教程","children":[]},{"level":2,"title":"# 1. 数据库表结构设计","slug":"_1-数据库表结构设计","link":"#_1-数据库表结构设计","children":[]},{"level":2,"title":"# 2. 代码生成","slug":"_2-代码生成","link":"#_2-代码生成","children":[{"level":3,"title":"# 2.1 导入表","slug":"_2-1-导入表","link":"#_2-1-导入表","children":[]},{"level":3,"title":"# 2.2 编辑配置","slug":"_2-2-编辑配置","link":"#_2-2-编辑配置","children":[]},{"level":3,"title":"# 2.3 预览代码","slug":"_2-3-预览代码","link":"#_2-3-预览代码","children":[]},{"level":3,"title":"# 2.4 生成代码","slug":"_2-4-生成代码","link":"#_2-4-生成代码","children":[]}]},{"level":2,"title":"# 3. 代码运行","slug":"_3-代码运行","link":"#_3-代码运行","children":[{"level":3,"title":"# 3.1 后端运行","slug":"_3-1-后端运行","link":"#_3-1-后端运行","children":[]},{"level":3,"title":"# 3.2 前端运行","slug":"_3-2-前端运行","link":"#_3-2-前端运行","children":[]}]},{"level":2,"title":"# 4. 后续变更","slug":"_4-后续变更","link":"#_4-后续变更","children":[]},{"level":2,"title":"# 5. 常见问题","slug":"_5-常见问题","link":"#_5-常见问题","children":[]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":8.96,"words":2689},"filePathRelative":"project/rouyi-vue-pro/new-feature.md","localizedDate":"July 7, 2024"}');export{p as comp,l as data};
