import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as n,e as i}from"./app-C-_dXKvP.js";const l={},t=i(`<h1 id="instance-initializer-block" tabindex="-1"><a class="header-anchor" href="#instance-initializer-block"><span>Instance Initializer Block</span></a></h1><p>Khối khởi tạo mã (Instance Initializer Block) được sử dụng để khởi tạo một số biến thành viên. Đối tượng được tạo ra sẽ thực hiện khối khởi tạo mã, còn được gọi là khối khởi tạo, để phân biệt nó với khối khởi tạo tĩnh.</p><p>Chúng ta có thể khởi tạo biến thành viên trực tiếp bằng toán tử &#39;=&#39; nhưng khối khởi tạo mã có thể làm nhiều hơn thế, ví dụ như in ra giá trị khởi tạo của biến thành viên.</p><p>Hãy xem đoạn mã dưới đây, chúng ta có thể khởi tạo biến thành viên trực tiếp bằng toán tử &#39;=&#39;.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">class</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> Bike</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">{</span><span style="color:#24292E;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    int</span><span style="color:#24292E;--shiki-dark:#E06C75;"> speed</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#005CC5;--shiki-dark:#D19A66;">100</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="color:#24292E;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Chúng ta có thể thực hiện các hoạt động phức tạp hơn thông qua khối khởi tạo mã, ví dụ như điền giá trị cho collection. Hãy xem đoạn mã dưới đây:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> Bike</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">    List</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="color:#24292E;--shiki-dark:#E06C75;"> list</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">    {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">        list </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> ArrayList</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="color:#24292E;--shiki-dark:#E06C75;">()</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        list</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">add</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;bike1&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        list</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">add</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;bike2&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#D73A49;--shiki-dark:#C678DD;">new</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> Bike</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="color:#24292E;--shiki-dark:#E5C07B;">list</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&quot;Nếu chỉ sử dụng toán tử &#39;=&#39; thì không thể hoàn thành việc điền giá trị cho bộ sưu tập, đúng không? Khối khởi tạo mã sẽ hoàn thành công việc này.&quot;</p><p>Quá trình khởi tạo phương thức hay khối khởi tạo mã trước,?</p><p>Hãy xem ví dụ dưới đây:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> Car</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">    Car</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;Phương thức khởi tạo&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">    {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;Khối khởi tạo mã&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        new</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> Car</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Chúng ta hãy xem kết quả của chương trình để hiểu ngay</p><div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>Khối khởi tạo mã</span></span>
<span class="line"><span>Phương thức khởi tạo</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Từ kết quả này, có vẻ như khối khởi tạo mã thực thi sớm hơn.</p><p>Khi một đối tượng khởi tạo, thực sự nó trước tiên gọi phương thức khởi tạo mà không có bất kỳ nghi ngờ nào. Tuy nhiên, phương thức khởi tạo đặt khối khởi tạo mã vào đầu các câu lệnh khác trong phương thức khởi tạo, vì vậy chúng ta thấy &#39;Khối khởi tạo mã&#39; đầu tiên và sau đó là &#39;Phương thức khởi tạo.&#39; Đối với khối khởi tạo mã, có ba quy tắc:</p><ul><li>Khối khởi tạo mã được thực thi khi một thể hiện của lớp được tạo.</li><li>Thực tế, khối khởi tạo mã được thực thi trong phương thức khởi tạo, chỉ đặt gần phần đầu.</li><li>Các câu lệnh trong khối khởi tạo mã được thực thi theo thứ tự từ trên xuống dưới.</li></ul><p>&quot;Các quy tắc này không cần phải nhớ thuộc lòng từng từ; chỉ cần hiểu chung. Bây giờ chúng ta tiếp tục với đoạn mã sau:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">class</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> A</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">    A</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> ()</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;Phương thức khởi tạo lớp cha&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> B</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> extends</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> A</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">    B</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;Phương thức khởi tạo lớp con&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">    {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;Khối khởi tạo mã&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        new</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> B</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&quot;Hãy xem kết quả.&quot;</p><div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>Phương thức khởi tạo lớp cha</span></span>
<span class="line"><span>Khối khởi tạo mã</span></span>
<span class="line"><span>Phương thức khởi tạo lớp con</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mặc định, khi phương thức khởi tạo của lớp con thực thi, nó tự động gọi phương thức khởi tạo của lớp cha. Nói cách khác, phương thức khởi tạo thực thi trước và sau đó là khối khởi tạo mã.</p><p>“Đây là một ví dụ khẳng định lại quy tắc thứ hai đã đề cập trước đó: Khối khởi tạo mã được thực thi trong phương thức khởi tạo, chỉ là nằm ở phía trước.”</p><p>Ngoài việc khởi tạo khối mã này khi khởi tạo một đối tượng, còn có khởi tạo tĩnh, nhưng chúng ta sẽ đề cập đến từ khóa <strong>static</strong> sau này. Hiện tại, chúng ta hãy hiểu về nó một cách chung.</p><p>Dưới đây là một ví dụ Java, minh họa cách sử dụng khối khởi tạo thực thể và khối khởi tạo tĩnh:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> Example</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">    // Biến tĩnh</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="color:#24292E;--shiki-dark:#E06C75;"> staticVar </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">    // Biến thực thể</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="color:#24292E;--shiki-dark:#E06C75;"> instanceVar </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">    // Khối khởi tạo tĩnh</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    static</span><span style="color:#24292E;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;Thực thi khối khởi tạo tĩnh&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">        staticVar </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">    // Khối khởi tạo thực thể</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">    {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;Thực thi khối khởi tạo thực thể&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">        instanceVar </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 4</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">    // Phương thức khởi tạo</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> Example</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;Thực thi phương thức khởi tạo&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;Thực thi phương thức main&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        Example</span><span style="color:#24292E;--shiki-dark:#E06C75;"> e1</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> Example</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        Example</span><span style="color:#24292E;--shiki-dark:#E06C75;"> e2</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> Example</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;Biến tĩnh của e1: &quot;</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> e1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">staticVar</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;Biến thực thể của e1: &quot;</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> e1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">instanceVar</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;Biến tĩnh của e2: &quot;</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> e2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">staticVar</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;Biến thực thể của e2: &quot;</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> e2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">instanceVar</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Trong đoạn mã ví dụ này, có một biến tĩnh staticVar và một biến thực thể instanceVar, cùng với một khối khởi tạo tĩnh và một khối khởi tạo thực thể. Trong khối khởi tạo tĩnh, chúng ta in ra một thông báo và thay đổi giá trị của biến tĩnh; trong khối khởi tạo thực thể, chúng ta cũng in ra một thông báo và thay đổi giá trị của biến thực thể.</p><p>Hãy xem kết quả thực thi:</p><div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>Thực thi khối khởi tạo tĩnh</span></span>
<span class="line"><span>Thực thi phương thức main</span></span>
<span class="line"><span>Thực thi khối khởi tạo thực thể</span></span>
<span class="line"><span>Thực thi phương thức khởi tạo</span></span>
<span class="line"><span>Thực thi khối khởi tạo thực thể</span></span>
<span class="line"><span>Thực thi phương thức khởi tạo</span></span>
<span class="line"><span>Biến tĩnh của e1: 3</span></span>
<span class="line"><span>Biến thực thể của e1: 4</span></span>
<span class="line"><span>Biến tĩnh của e2: 3</span></span>
<span class="line"><span>Biến thực thể của e2: 4</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Từ kết quả xuất ra, chúng ta có thể thấy rằng khối khởi tạo tĩnh được thực thi khi lớp được tải, chỉ thực thi một lần và được thực hiện trước khối khởi tạo thực thể và phương thức khởi tạo; khối khởi tạo thực thể được thực thi mỗi khi một đối tượng được tạo ra, trước khi phương thức khởi tạo được thực thi.</p>`,29),p=[t];function e(r,o){return n(),a("div",null,p)}const h=s(l,[["render",e],["__file","code-init.html.vue"]]),d=JSON.parse(`{"path":"/programming/java/basic/oo/code-init.html","title":"Instance Initializer Block","lang":"en-US","frontmatter":{"title":"Instance Initializer Block","tags":["java"],"categories":["java"],"order":8,"description":"Instance Initializer Block Khối khởi tạo mã (Instance Initializer Block) được sử dụng để khởi tạo một số biến thành viên. Đối tượng được tạo ra sẽ thực hiện khối khởi tạo mã, cò...","head":[["meta",{"property":"og:url","content":"https://vanhung4499.github.io/programming/java/basic/oo/code-init.html"}],["meta",{"property":"og:site_name","content":"vanhung4499"}],["meta",{"property":"og:title","content":"Instance Initializer Block"}],["meta",{"property":"og:description","content":"Instance Initializer Block Khối khởi tạo mã (Instance Initializer Block) được sử dụng để khởi tạo một số biến thành viên. Đối tượng được tạo ra sẽ thực hiện khối khởi tạo mã, cò..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-26T14:44:55.000Z"}],["meta",{"property":"article:author","content":"Hung Nguyen"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:modified_time","content":"2024-06-26T14:44:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Instance Initializer Block\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-26T14:44:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hung Nguyen\\",\\"url\\":\\"https://vanhung4499.github.io\\",\\"email\\":\\"vanhung4499@gmail.com\\"}]}"]]},"headers":[],"git":{"createdTime":1719413095000,"updatedTime":1719413095000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":4.59,"words":1378},"filePathRelative":"programming/java/basic/oo/code-init.md","localizedDate":"June 26, 2024","excerpt":"\\n<p>Khối khởi tạo mã (Instance Initializer Block) được sử dụng để khởi tạo một số biến thành viên. Đối tượng được tạo ra sẽ thực hiện khối khởi tạo mã, còn được gọi là khối khởi tạo, để phân biệt nó với khối khởi tạo tĩnh.</p>\\n<p>Chúng ta có thể khởi tạo biến thành viên trực tiếp bằng toán tử '=' nhưng khối khởi tạo mã có thể làm nhiều hơn thế, ví dụ như in ra giá trị khởi tạo của biến thành viên.</p>","autoDesc":true}`);export{h as comp,d as data};
