import{_ as l,g as r,o as p,c as d,e as a,h as n,f as t,w as i,a as o}from"./app-5QVbWi7Z.js";const c={};function E(h,e){const s=r("RouteLink");return p(),d("div",null,[e[6]||(e[6]=a("h1",{id:"代码生成-树表",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#代码生成-树表"},[a("span",null,"代码生成（树表）")])],-1)),e[7]||(e[7]=a("p",null,"友情提示：",-1)),a("p",null,[e[1]||(e[1]=n("本文接 ")),t(s,{to:"/new-feature/"},{default:i(()=>e[0]||(e[0]=[n("《代码生成【单表】》")])),_:1}),e[2]||(e[2]=n("，请务必先阅读。因为重复的内容，本文会不再赘述！"))]),e[8]||(e[8]=o('<p>树表，是在“单表”的基础上，增加了「树形结构」的功能。</p><figure><img src="https://doc.iocoder.cn/img/代码生成/树表/树表.png" alt="树表" tabindex="0" loading="lazy"><figcaption>树表</figcaption></figure><p>例如说：部门、分类等，是一个树形结构。我们可以通过树形结构，来展示部门、分类的层级关系。</p><p>下面，我们将演示“树表”的使用，基于代码生成器，在 <code>yudao-module-system</code> 模块中，开发一个【<strong>分类</strong>】的功能。</p><h2 id="_1-数据库表结构设计" tabindex="-1"><a class="header-anchor" href="#_1-数据库表结构设计"><span><a href="#_1-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1">#</a> 1. 数据库表结构设计</span></a></h2><p>设计分类的数据库表名为 <code>system_category</code>，其建表语句如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE `system_category` (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;编号&#39;,</span></span>\n<span class="line"><span>  `name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &#39;&#39; COMMENT &#39;名字&#39;,</span></span>\n<span class="line"><span>  `parent_id` bigint NOT NULL COMMENT &#39;父级编号&#39;,</span></span>\n<span class="line"><span>  `creator` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT &#39;&#39; COMMENT &#39;创建者&#39;,</span></span>\n<span class="line"><span>  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,</span></span>\n<span class="line"><span>  `updater` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT &#39;&#39; COMMENT &#39;更新者&#39;,</span></span>\n<span class="line"><span>  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;更新时间&#39;,</span></span>\n<span class="line"><span>  `deleted` bit(1) NOT NULL DEFAULT b&#39;0&#39; COMMENT &#39;是否删除&#39;,</span></span>\n<span class="line"><span>  `tenant_id` bigint NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;租户编号&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`) USING BTREE</span></span>\n<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&#39;分类表&#39;;</span></span></code></pre></div><p>其中 <code>parent_id</code> 字段，用于标识父级分类的编号。如果是顶级分类，则 <code>parent_id</code> 为 <code>0</code>。</p><h2 id="_2-代码生成" tabindex="-1"><a class="header-anchor" href="#_2-代码生成"><span><a href="#_2-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90">#</a> 2. 代码生成</span></a></h2><h3 id="_2-1-导入表" tabindex="-1"><a class="header-anchor" href="#_2-1-导入表"><span><a href="#_2-1-%E5%AF%BC%E5%85%A5%E8%A1%A8">#</a> 2.1 导入表</span></a></h3><p>点击 [基础设施 -&gt; 代码生成] 菜单，点击 [基于 DB 导入] 按钮，选择 <code>system_category</code> 表，后点击 [确认] 按钮。</p><h3 id="_2-2-编辑配置" tabindex="-1"><a class="header-anchor" href="#_2-2-编辑配置"><span><a href="#_2-2-%E7%BC%96%E8%BE%91%E9%85%8D%E7%BD%AE">#</a> 2.2 编辑配置</span></a></h3><p>点击 <code>system_category</code> 所在行的 [编辑] 按钮，修改生成配置。后操作如下：</p><figure><img src="https://doc.iocoder.cn/img/代码生成/树表/生成信息.png" alt="生成信息" tabindex="0" loading="lazy"><figcaption>生成信息</figcaption></figure><ul><li>将【生成模版】设置为【树表】。🔥最最关键的步骤！</li><li>树表信息：将【父编号字段】设置为 <code>parent_id</code> 字段，将【树名称字段】设置为 <code>name</code> 字段。</li><li>将【上级菜单】设置为【系统管理】。</li><li>将【前端类型】设置为“前端项目”对应的“前端类型”。例如说，我们这里演示的是 <code>yudao-ui-admin-vue3</code> 前端项目，则选择了【Vue3 Element Plus 标准模版】。</li></ul><h3 id="_2-3-预览代码" tabindex="-1"><a class="header-anchor" href="#_2-3-预览代码"><span><a href="#_2-3-%E9%A2%84%E8%A7%88%E4%BB%A3%E7%A0%81">#</a> 2.3 预览代码</span></a></h3><p>点击 <code>system_category</code> 所在行的 [预览] 按钮，在线预览生成的代码，检查是否符合预期。</p><h3 id="_2-3-生成代码" tabindex="-1"><a class="header-anchor" href="#_2-3-生成代码"><span><a href="#_2-3-%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81">#</a> 2.3 生成代码</span></a></h3><p>点击 <code>system_category</code> 所在行的 [生成] 按钮，生成代码。</p><h1 id="_3-代码运行" tabindex="-1"><a class="header-anchor" href="#_3-代码运行"><span><a href="#_3-%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C">#</a> 3. 代码运行</span></a></h1>',20)),a("p",null,[e[4]||(e[4]=n("和 ")),t(s,{to:"/new-feature/"},{default:i(()=>e[3]||(e[3]=[n("《代码生成【单表】》")])),_:1}),e[5]||(e[5]=n(" 的「3. 代码运行」一致，就不重复赘述。"))])])}const T=l(c,[["render",E],["__file","tree.html.vue"]]),_=JSON.parse('{"path":"/project/rouyi-vue-pro/new-feature/tree.html","title":"代码生成（树表）","lang":"en-US","frontmatter":{"title":"代码生成（树表）","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":22,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 数据库表结构设计","slug":"_1-数据库表结构设计","link":"#_1-数据库表结构设计","children":[]},{"level":2,"title":"# 2. 代码生成","slug":"_2-代码生成","link":"#_2-代码生成","children":[{"level":3,"title":"# 2.1 导入表","slug":"_2-1-导入表","link":"#_2-1-导入表","children":[]},{"level":3,"title":"# 2.2 编辑配置","slug":"_2-2-编辑配置","link":"#_2-2-编辑配置","children":[]},{"level":3,"title":"# 2.3 预览代码","slug":"_2-3-预览代码","link":"#_2-3-预览代码","children":[]},{"level":3,"title":"# 2.3 生成代码","slug":"_2-3-生成代码","link":"#_2-3-生成代码","children":[]}]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":2.31,"words":694},"filePathRelative":"project/rouyi-vue-pro/new-feature/tree.md","localizedDate":"July 7, 2024"}');export{T as comp,_ as data};
