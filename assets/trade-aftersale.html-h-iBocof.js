import{_ as l,g as c,o as p,c as t,e as a,h as e,f as i,w as d,a as n}from"./app-BRTHG7K9.js";const o={},r=n('<h1 id="【交易】售后退款" tabindex="-1"><a class="header-anchor" href="#【交易】售后退款"><span>【交易】售后退款</span></a></h1><h2 id="_1-表结构" tabindex="-1"><a class="header-anchor" href="#_1-表结构"><span><a href="#_1-%E8%A1%A8%E7%BB%93%E6%9E%84">#</a> 1. 表结构</span></a></h2><p>售后退款，由 <code>yudao-module-trade-biz</code> 后端模块的 <code>aftersale</code> 包实现，分成二个表：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/售后退款/表关系.png" alt="表关系" tabindex="0" loading="lazy"><figcaption>表关系</figcaption></figure><ul><li><code>trade_after_sale_</code>：售后订单表</li><li><code>trade_after_sale_log</code>：售后订单日志表</li></ul><h3 id="_1-1-售后订单表" tabindex="-1"><a class="header-anchor" href="#_1-1-售后订单表"><span><a href="#_1-1-%E5%94%AE%E5%90%8E%E8%AE%A2%E5%8D%95%E8%A1%A8">#</a> 1.1 售后订单表</span></a></h3><blockquote><p>省略 creator/create_time/updater/update_time/deleted/tenant_id 等通用字段</p></blockquote><div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>CREATE TABLE `trade_after_sale` (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;售后编号&#39;,</span></span>\n<span class="line"><span>  `no` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT &#39;售后单号&#39;,</span></span>\n<span class="line"><span>  `user_id` bigint unsigned NOT NULL COMMENT &#39;用户编号&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `type` tinyint DEFAULT NULL COMMENT &#39;售后类型&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  `status` int NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;售后状态&#39;,</span></span>\n<span class="line"><span>  `way` tinyint NOT NULL COMMENT &#39;售后方式&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `refund_price` int NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;退款金额，单位：分&#39;,</span></span>\n<span class="line"><span>  `apply_reason` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT &#39;申请原因&#39;,</span></span>\n<span class="line"><span>  `apply_description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT &#39;补充描述&#39;,</span></span>\n<span class="line"><span>  `apply_pic_urls` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT &#39;补充凭证图片&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `order_id` bigint unsigned NOT NULL COMMENT &#39;订单编号&#39;,</span></span>\n<span class="line"><span>  `order_no` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT &#39;订单流水号&#39;,</span></span>\n<span class="line"><span>  `order_item_Id` bigint unsigned NOT NULL COMMENT &#39;订单项编号&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `spu_id` bigint unsigned NOT NULL COMMENT &#39;商品 SPU 编号&#39;,</span></span>\n<span class="line"><span>  `spu_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT &#39;商品 SPU 名称&#39;,</span></span>\n<span class="line"><span>  `sku_id` bigint unsigned NOT NULL COMMENT &#39;商品 SKU 编号&#39;,</span></span>\n<span class="line"><span>  `properties` json DEFAULT NULL COMMENT &#39;商品属性数组，JSON 格式&#39;,</span></span>\n<span class="line"><span>  `pic_url` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT &#39;商品图片&#39;,</span></span>\n<span class="line"><span>  `count` int NOT NULL COMMENT &#39;购买数量&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `audit_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT &#39;审批时间&#39;,</span></span>\n<span class="line"><span>  `audit_user_id` bigint unsigned DEFAULT NULL COMMENT &#39;审批人&#39;,</span></span>\n<span class="line"><span>  `audit_reason` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT &#39;审批备注&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `logistics_id` bigint DEFAULT NULL COMMENT &#39;退货物流公司编号&#39;,</span></span>\n<span class="line"><span>  `logistics_no` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT &#39;退货物流单号&#39;,</span></span>\n<span class="line"><span>  `delivery_time` datetime DEFAULT NULL COMMENT &#39;退货时间&#39;,</span></span>\n<span class="line"><span>  `receive_time` datetime DEFAULT NULL COMMENT &#39;收货时间&#39;,</span></span>\n<span class="line"><span>  `receive_reason` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT &#39;收货备注&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `pay_refund_id` bigint unsigned DEFAULT NULL COMMENT &#39;支付退款编号&#39;,</span></span>\n<span class="line"><span>  `refund_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT &#39;退款时间&#39;,</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  PRIMARY KEY (`id`) USING BTREE</span></span>\n<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT=&#39;售后订单&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字段还是非常多的，我们来分块来看看。</p><p>① <code>no</code> 字段：售后单号，主要展示给用户看，由 TradeNoRedisDAO 的 <code>#generate(...)</code> 方法生成。</p><p>而 <code>id</code> 字段是数据库自增的订单编号，系统内部使用，一般不展示给用户查看。</p><p>② 【类型】<code>type</code> 字段：售后类型，由 AfterSaleTypeEnum 枚举，分成两种类型：</p><ul><li>售中退款：交易完成【前】买家申请退款</li><li>售后退款：交易完成【后】买家申请退款</li></ul><p>③ 【状态】<code>status</code> 字段：订单状态，由 AfterSaleStatusEnum 枚举，流转状态如下图：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/售后退款/售后状态流转.png" alt="售后状态流转" tabindex="0" loading="lazy"><figcaption>售后状态流转</figcaption></figure><p><code>way</code> 字段：售后方式，由 AfterSaleWayEnum 枚举，分成两种方式：仅退款、退货退款。如上图所示，退款会多 SELLER_AGREE、BUYER_DELIVERY 两个动作。</p><p>④ 【申请】<code>refund_price</code>、<code>apply_reason</code>、<code>apply_description</code>、<code>apply_pic_urls</code> 字段：买家发起售后的基本信息。</p><p>⑤ 【订单】<code>order_id</code>、<code>order_no</code>、<code>order_item_Id</code> 字段：关联的订单项信息，一个 <code>trade_order_item</code> 可以发起多次售后，同一时间只允许一个，并且最终只能有一个成功。</p><p>如果你希望一个售后订单可以退多个订单项，需要自己加个 <code>trade_after_sale_item</code> 表，将部分【订单信息】【商品信息】挪过去。</p><p>⑥ 【商品】<code>spu_id</code>、<code>sku_id</code>、<code>count</code> 字段：关联的商品信息。冗余的 <code>spu_name</code>、<code>pic_url</code>、<code>properties</code> 字段，是为了方便查询。</p><p>⑦ 【审核】<code>audit_time</code>、<code>audit_user_id</code>、<code>audit_reason</code> 字段：卖家审核的信息。</p><p>⑧ 【退货】<code>logistics_id</code>、<code>logistics_no</code>、<code>delivery_time</code> 字段：买家退货的信息。</p><p><code>receive_time</code>、<code>receive_reason</code> 字段：卖家收货的信息。</p>',23),u=a("code",null,"pay_refund_id",-1),E=a("code",null,"refund_time",-1),_=a("code",null,"pay_refund_id",-1),g=n('<h3 id="_1-2-售后订单日志表" tabindex="-1"><a class="header-anchor" href="#_1-2-售后订单日志表"><span><a href="#_1-2-%E5%94%AE%E5%90%8E%E8%AE%A2%E5%8D%95%E6%97%A5%E5%BF%97%E8%A1%A8">#</a> 1.2 售后订单日志表</span></a></h3><blockquote><p>省略 creator/create_time/updater/update_time/deleted/tenant_id 等通用字段</p></blockquote><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>CREATE TABLE `trade_after_sale_log` (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;编号&#39;,</span></span>\n<span class="line"><span>  `user_id` bigint NOT NULL COMMENT &#39;用户编号&#39;,</span></span>\n<span class="line"><span>  `user_type` tinyint NOT NULL COMMENT &#39;用户类型&#39;,</span></span>\n<span class="line"><span>  `after_sale_id` bigint NOT NULL COMMENT &#39;售后编号&#39;,</span></span>\n<span class="line"><span>  `before_status` tinyint DEFAULT NULL COMMENT &#39;售后状态（之前）&#39;,</span></span>\n<span class="line"><span>  `after_status` tinyint NOT NULL COMMENT &#39;售后状态（之后）&#39;,</span></span>\n<span class="line"><span>  `operate_type` tinyint NOT NULL COMMENT &#39;操作类型&#39;,</span></span>\n<span class="line"><span>  `content` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT &#39;操作明细&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`) USING BTREE</span></span>\n<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=32 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT=&#39;售后订单日志&#39;;</span></span></code></pre></div><p>每次售后状态变更，都会记录一条日志，方便后续查询、统计。</p><p>通过 <code>@AfterSaleLog</code> 注解，基于 Spring AOP 实现记录，具体可以看看 AfterSaleLogAspect 类。</p><h2 id="_2-售后流程" tabindex="-1"><a class="header-anchor" href="#_2-售后流程"><span><a href="#_2-%E5%94%AE%E5%90%8E%E6%B5%81%E7%A8%8B">#</a> 2. 售后流程</span></a></h2><p>本小节，我们按照售后的 <code>申请 =&gt; 审批 =&gt; 退货 =&gt; 收货 =&gt; 退款</code> 流程，来看看售后的各个阶段。</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/售后退款/售后流程.png" alt="售后流程" tabindex="0" loading="lazy"><figcaption>售后流程</figcaption></figure><figure><img src="https://cloud.iocoder.cn/img/商城手册/售后退款/售后流程-去售后.png" alt="去售后" tabindex="0" loading="lazy"><figcaption>去售后</figcaption></figure><h3 id="_2-1-申请【买家】" tabindex="-1"><a class="header-anchor" href="#_2-1-申请【买家】"><span><a href="#_2-1-%E7%94%B3%E8%AF%B7%E3%80%90%E4%B9%B0%E5%AE%B6%E3%80%91">#</a> 2.1 申请【买家】</span></a></h3><p>① 点击「申请售后」按钮，进入售后页面，对应前端 <code>yudao-mall-uniapp</code> 项目的 <code>pages/order/aftersale/apply.vue</code> 页面，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/售后退款/申请-移动端.png" alt="售后申请" tabindex="0" loading="lazy"><figcaption>售后申请</figcaption></figure><p>另外，可选的“申请原因”，可在 <code>trade_config</code> 表的 <code>after_sale_refund_reasons</code>、<code>after_sale_return_reasons</code> 字段配置。</p><p>② 点击「提交」按钮，调用后端对应 AppAfterSaleController 的 <code>#createAfterSale(...)</code> 提供的“申请售后”接口，插入 <code>trade_after_sale</code> 表一条记录，状态为 <code>APPLY</code> 申请中。</p><p>售后状态：APPLY 申请中</p><p>③ 发起成功后，进入售后列表页面，对应前端 <code>yudao-mall-uniapp</code> 项目的 <code>pages/order/aftersale/list.vue</code> 页面，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/售后退款/售后流程-售后列表.png" alt="售后列表" tabindex="0" loading="lazy"><figcaption>售后列表</figcaption></figure><p>④ 点击第一条售后记录，进入售后详情页面，对应前端 <code>yudao-mall-uniapp</code> 项目的 <code>pages/order/aftersale/detail.vue</code> 页面，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/售后退款/售后流程-售后详情.png" alt="售后详情" tabindex="0" loading="lazy"><figcaption>售后详情</figcaption></figure><p>此时，买家只能等待卖家审核，或者取消售后。</p><h3 id="_2-2-审批【卖家】" tabindex="-1"><a class="header-anchor" href="#_2-2-审批【卖家】"><span><a href="#_2-2-%E5%AE%A1%E6%89%B9%E3%80%90%E5%8D%96%E5%AE%B6%E3%80%91">#</a> 2.2 审批【卖家】</span></a></h3><p>① 卖家可以在售后列表进行审批，对应 [商城系统 -&gt; 订单中心 -&gt; 售后退款] 菜单，对应 <code>yudao-ui-admin-vue3</code> 项目的 <code>@/views/trade/afterSale</code> 目录。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/售后退款/审批-管理后台-列表.png" alt="售后列表" tabindex="0" loading="lazy"><figcaption>售后列表</figcaption></figure><p>② 点击第一条售后记录的「处理退款」按钮，进入售后详情页面，对应 <code>yudao-ui-admin-vue3</code> 项目的 <code>@/views/trade/afterSale/detail</code> 目录，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/售后退款/审批-管理后台-列表.png" alt="售后详情" tabindex="0" loading="lazy"><figcaption>售后详情</figcaption></figure><p>③ 点击「同意售后」按钮，调用后端对应 AfterSaleController 的 <code>#agreeAfterSale(...)</code> 提供的“同意售后”接口，更新 <code>trade_after_sale</code> 表的状态为 <code>SELLER_AGREE</code> 卖家通过（待买家退货）。</p><p>售后状态：SELLER_AGREE 卖家通过（待买家退货）</p><h3 id="_2-3-退货【买家】" tabindex="-1"><a class="header-anchor" href="#_2-3-退货【买家】"><span><a href="#_2-3-%E9%80%80%E8%B4%A7%E3%80%90%E4%B9%B0%E5%AE%B6%E3%80%91">#</a> 2.3 退货【买家】</span></a></h3><p>① 点击「填写退货」按钮，进入退货页面，对应前端 <code>yudao-mall-uniapp</code> 项目的 <code>pages/order/aftersale/return-delivery.vue</code> 页面，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/售后退款/退货-移动端.png" alt="退货" tabindex="0" loading="lazy"><figcaption>退货</figcaption></figure><p>② 点击「提交」按钮，调用后端对应 AppAfterSaleController 的 <code>#deliveryAfterSale(...)</code> 提供的“退回货物”接口，更新 <code>trade_after_sale</code> 表的状态为 <code>BUYER_DELIVERY</code> 买家已退货（待卖家收货）。</p><p>售后状态：BUYER_DELIVERY 买家已退货（待卖家收货）</p><h3 id="_2-4-收货【卖家】" tabindex="-1"><a class="header-anchor" href="#_2-4-收货【卖家】"><span><a href="#_2-4-%E6%94%B6%E8%B4%A7%E3%80%90%E5%8D%96%E5%AE%B6%E3%80%91">#</a> 2.4 收货【卖家】</span></a></h3><p>点击「确认收货」按钮，调用后端对应 AfterSaleController 的 <code>#receiveAfterSale(...)</code> 提供的“确认收货”接口，更新 <code>trade_after_sale</code> 表的状态为 <code>WAIT_REFUND</code> 卖家已收货（待卖家退款）。</p><p>售后状态：WAIT_REFUND 卖家已收货（待卖家退款）</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/售后退款/收货-管理后台.png" alt="收货" tabindex="0" loading="lazy"><figcaption>收货</figcaption></figure><h3 id="_2-5-退款【卖家】" tabindex="-1"><a class="header-anchor" href="#_2-5-退款【卖家】"><span><a href="#_2-5-%E9%80%80%E6%AC%BE%E3%80%90%E5%8D%96%E5%AE%B6%E3%80%91">#</a> 2.5 退款【卖家】</span></a></h3><p>① 点击「确认退款」按钮，调用后端对应 AfterSaleController 的 <code>#refundAfterSale(...)</code> 提供的“确认退款”接口，更新 <code>trade_after_sale</code> 表的状态为 <code>COMPLETE</code> 退款成功。</p><p>售后状态：COMPLETE 退款成功</p><figure><img src="https://cloud.iocoder.cn/img/商城手册/售后退款/退款-管理后台.png" alt="退款" tabindex="0" loading="lazy"><figcaption>退款</figcaption></figure>',40),f=n('<p>② 在真正退款到卖家的支付宝、微信账户后（退款是个异步过程），支付中心会回调 AfterSaleController 的 <code>#updateAfterRefund(...)</code> 提供的“更新售后订单为已退款”接口，目前仅仅打印日志，可以按需拓展。</p><p>至此，售后流程结束~可以试着多多 debug 调试整个流程，并不复杂噢。</p><h2 id="_3-售后配置" tabindex="-1"><a class="header-anchor" href="#_3-售后配置"><span><a href="#_3-%E5%94%AE%E5%90%8E%E9%85%8D%E7%BD%AE">#</a> 3. 售后配置</span></a></h2><figure><img src="https://cloud.iocoder.cn/img/商城手册/售后退款/售后配置.png" alt="售后配置" tabindex="0" loading="lazy"><figcaption>售后配置</figcaption></figure><ul><li>SQL 对应 <code>trade_config</code> 表的 <code>after_sale_</code> 开头的字段。</li><li>前端对应 <code>yudao-ui-admin-vue3</code> 项目的 <code>views/mall/trade/config/index.vue</code> 目录</li><li>后端对应 <code>yudao-module-trade-biz</code> 项目的 TradeConfigController 类</li></ul>',5);function m(T,b){const s=c("RouteLink");return p(),t("div",null,[r,a("p",null,[e("⑨ 【退款】"),u,e("、"),E,e(" 字段：退款的信息。 其中，"),_,e(" 关联的支付中心的退款单号。对支付中心还不了解的同学，可以阅读下 "),i(s,{to:"/pay/build/"},{default:d(()=>[e("《支付手册》")]),_:1}),e(" 文档。")]),g,a("p",null,[e("该接口的内部实现，主要是调用支付中心的退款接口，具体可以看看 "),i(s,{to:"/pay/refund-demo/"},{default:d(()=>[e("《21.支付宝、微信退款接入》")]),_:1}),e(" 文档。")]),f])}const L=l(o,[["render",m],["__file","trade-aftersale.html.vue"]]),h=JSON.parse('{"path":"/project/yudao-cloud/mall/trade-aftersale.html","title":"【交易】售后退款","lang":"en-US","frontmatter":{"title":"【交易】售后退款","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":101,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 表结构","slug":"_1-表结构","link":"#_1-表结构","children":[{"level":3,"title":"# 1.1 售后订单表","slug":"_1-1-售后订单表","link":"#_1-1-售后订单表","children":[]},{"level":3,"title":"# 1.2 售后订单日志表","slug":"_1-2-售后订单日志表","link":"#_1-2-售后订单日志表","children":[]}]},{"level":2,"title":"# 2. 售后流程","slug":"_2-售后流程","link":"#_2-售后流程","children":[{"level":3,"title":"# 2.1 申请【买家】","slug":"_2-1-申请【买家】","link":"#_2-1-申请【买家】","children":[]},{"level":3,"title":"# 2.2 审批【卖家】","slug":"_2-2-审批【卖家】","link":"#_2-2-审批【卖家】","children":[]},{"level":3,"title":"# 2.3 退货【买家】","slug":"_2-3-退货【买家】","link":"#_2-3-退货【买家】","children":[]},{"level":3,"title":"# 2.4 收货【卖家】","slug":"_2-4-收货【卖家】","link":"#_2-4-收货【卖家】","children":[]},{"level":3,"title":"# 2.5 退款【卖家】","slug":"_2-5-退款【卖家】","link":"#_2-5-退款【卖家】","children":[]}]},{"level":2,"title":"# 3. 售后配置","slug":"_3-售后配置","link":"#_3-售后配置","children":[]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":8.28,"words":2485},"filePathRelative":"project/yudao-cloud/mall/trade-aftersale.md","localizedDate":"July 7, 2024"}');export{L as comp,h as data};
