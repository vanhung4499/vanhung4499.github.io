import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,e as i}from"./app-C-_dXKvP.js";const t={},e=i(`<h1 id="ham-ghi-nho-function-memoization" tabindex="-1"><a class="header-anchor" href="#ham-ghi-nho-function-memoization"><span>Hàm ghi nhớ - Function Memoization</span></a></h1><p><strong>Hàm ghi nhớ (Function Memoization)</strong>: Lưu trữ kết quả tính toán của lần trước, khi gọi lại với cùng các tham số, chỉ cần trả về kết quả đã lưu trữ.</p><p>Nguyên lý hoạt động: Lưu trữ các tham số và kết quả tương ứng trong một đối tượng, khi gọi lại hàm với các tham số tương tự, kiểm tra xem khóa đã tồn tại trong đối tượng hay chưa, nếu tồn tại thì trả về kết quả đã lưu trữ.</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">function</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> memorize</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> cache</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    const</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> key</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> Array</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#005CC5;--shiki-dark:#E06C75;">prototype</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">call</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#E5C07B;">arguments</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#032F62;--shiki-dark:#98C379;">&#39;,&#39;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#24292E;--shiki-dark:#E06C75;">key</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> in</span><span style="color:#24292E;--shiki-dark:#E06C75;"> cache</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">      return</span><span style="color:#24292E;--shiki-dark:#E06C75;"> cache</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="color:#24292E;--shiki-dark:#E06C75;">key</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#24292E;--shiki-dark:#E06C75;">cache</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="color:#24292E;--shiki-dark:#E06C75;">key</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">apply</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#E5C07B;">arguments</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),o=[e];function r(l,c){return a(),s("div",null,o)}const k=n(t,[["render",r],["__file","memorize.html.vue"]]),d=JSON.parse('{"path":"/programming/js/core/function/types/memorize.html","title":"Memorize Function","lang":"en-US","frontmatter":{"title":"Memorize Function","tags":["js","programming"],"categories":["js","programming"],"date created":"2023-08-05T00:00:00.000Z","date modified":"2023-08-05T00:00:00.000Z","order":10,"description":"Hàm ghi nhớ - Function Memoization Hàm ghi nhớ (Function Memoization): Lưu trữ kết quả tính toán của lần trước, khi gọi lại với cùng các tham số, chỉ cần trả về kết quả đã lưu t...","head":[["meta",{"property":"og:url","content":"https://vanhung4499.github.io/programming/js/core/function/types/memorize.html"}],["meta",{"property":"og:site_name","content":"vanhung4499"}],["meta",{"property":"og:title","content":"Memorize Function"}],["meta",{"property":"og:description","content":"Hàm ghi nhớ - Function Memoization Hàm ghi nhớ (Function Memoization): Lưu trữ kết quả tính toán của lần trước, khi gọi lại với cùng các tham số, chỉ cần trả về kết quả đã lưu t..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-20T12:02:51.000Z"}],["meta",{"property":"article:author","content":"Hung Nguyen"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"programming"}],["meta",{"property":"article:modified_time","content":"2024-06-20T12:02:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Memorize Function\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-20T12:02:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hung Nguyen\\",\\"url\\":\\"https://vanhung4499.github.io\\",\\"email\\":\\"vanhung4499@gmail.com\\"}]}"]]},"headers":[],"git":{"createdTime":1718884971000,"updatedTime":1718884971000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":0.54,"words":161},"filePathRelative":"programming/js/core/function/types/memorize.md","localizedDate":"June 20, 2024","excerpt":"\\n<p><strong>Hàm ghi nhớ (Function Memoization)</strong>: Lưu trữ kết quả tính toán của lần trước, khi gọi lại với cùng các tham số, chỉ cần trả về kết quả đã lưu trữ.</p>\\n<p>Nguyên lý hoạt động: Lưu trữ các tham số và kết quả tương ứng trong một đối tượng, khi gọi lại hàm với các tham số tương tự, kiểm tra xem khóa đã tồn tại trong đối tượng hay chưa, nếu tồn tại thì trả về kết quả đã lưu trữ.</p>","autoDesc":true}');export{k as comp,d as data};
