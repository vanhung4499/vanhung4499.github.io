import{_ as e,o as n,c as i,a as o}from"./app-5QVbWi7Z.js";const s={};function r(l,a){return n(),i("div",null,a[0]||(a[0]=[o(`<h1 id="定时任务" tabindex="-1"><a class="header-anchor" href="#定时任务"><span>定时任务</span></a></h1><p>定时任务的使用场景主要如下：</p><ul><li>时间驱动处理场景：每分钟扫描超时支付的订单，活动状态刷新，整点发送优惠券。</li><li>批量处理数据：按月批量统计报表数据，批量更新短信状态，实时性要求不高。</li></ul><p>年度最佳定时任务：每个月初的工资单的推送！！！</p><p>如果你对定时任务了解不多，可以后续阅读 <a href="http://www.iocoder.cn/Spring-Boot/Job/?yudao" target="_blank" rel="noopener noreferrer">《芋道 Spring Boot 定时任务入门》</a> 文章。</p><p>项目基于 Quartz + MySQL 实现分布式定时任务，并提供 [基础设施 -&gt; 定时任务] 菜单，进行定时任务的统一管理，支持动态控制任务的添加、修改、开启、暂停、删除、执行一次等操作。</p><figure><img src="https://doc.iocoder.cn/img/定时任务/01.png" alt="定时任务" tabindex="0" loading="lazy"><figcaption>定时任务</figcaption></figure><ul><li><a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-job/" target="_blank" rel="noopener noreferrer"><code>yudao-spring-boot-starter-job</code></a> 技术组件：基于 Quartz 框架的封装，提供简便的 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-job/src/main/java/cn/iocoder/yudao/framework/quartz/core/handler/JobHandler.java" target="_blank" rel="noopener noreferrer">JobHandler</a> 接入，任务的执行、重试，执行日志的记录。</li><li><code>yudao-module-infra</code> 的 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-infra/yudao-module-infra-biz/src/main/java/cn/iocoder/yudao/module/infra/service/job/" target="_blank" rel="noopener noreferrer"><code>job</code></a> 业务模块，提供任务的动态管理，执行日志的存储。</li></ul><h2 id="_1-如何开启" tabindex="-1"><a class="header-anchor" href="#_1-如何开启"><span><a href="#_1-%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF">#</a> 1. 如何开启？</span></a></h2><p>① 导入 <code>sql</code> 目录下，对应数据库的 <code>quartz.sql</code> 文件，初始化 Quartz 表结构。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/后端手册/定时任务/导入数据库.png" alt="导入数据库" tabindex="0" loading="lazy"><figcaption>导入数据库</figcaption></figure><p>② 在 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-server/src/main/resources/application-local.yaml#L66-L93" target="_blank" rel="noopener noreferrer"><code>application-local.yaml</code></a> 配置文件中，通过 <code>spring.quartz</code> 配置项，设置 Quartz 使用 MySQL 实现集群。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/定时任务/02.png" alt="配置文件" tabindex="0" loading="lazy"><figcaption>配置文件</figcaption></figure><p>考虑到 <code>local</code> 本地和 <code>dev</code> 测试环境使用相同的数据库，如果 <code>local</code> 也跑定时任务，可能会影响 <code>dev</code> 测试环境的执行。所以默认配置下，<code>local</code> 禁用了定时任务。</p><p>重要！！！如果你要开启 <code>local</code> 的定时任务，可以删除 <code>- org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration</code> 那一行即可开启。</p><p>③ 启动项目后，调用 JobController 提供的 <code>#syncJob()</code> 接口，将 <code>infra_job</code> 表的任务同步到 Quartz 中。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/后端手册/定时任务/同步任务.png" alt="同步任务" tabindex="0" loading="lazy"><figcaption>同步任务</figcaption></figure><h2 id="_2-实战案例" tabindex="-1"><a class="header-anchor" href="#_2-实战案例"><span><a href="#_2-%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B">#</a> 2. 实战案例</span></a></h2><p>以用户 Session 超时的定时任务举例子，讲解在项目中使用定时任务。</p><h3 id="_2-1-引入依赖" tabindex="-1"><a class="header-anchor" href="#_2-1-引入依赖"><span><a href="#_2-1-%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96">#</a> 2.1 引入依赖</span></a></h3><p>在 <code>yudao-module-system-biz</code> 模块中，引入 <code>yudao-spring-boot-starter-job</code> 技术组件。如下所示：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;yudao-spring-boot-starter-job&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div><h3 id="_2-2-编写-job-类" tabindex="-1"><a class="header-anchor" href="#_2-2-编写-job-类"><span><a href="#_2-2-%E7%BC%96%E5%86%99-job-%E7%B1%BB">#</a> 2.2 编写 Job 类</span></a></h3><p>每个 <code>yudao-module-xxx-biz</code> 模块的 <code>job</code> 包，用于定义定时任务的 Job 类。</p><p>因此，在 <code>yudao-module-system-biz</code> 模块的 <code>job</code> 包下，创建 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/job/auth/UserSessionTimeoutJob.java" target="_blank" rel="noopener noreferrer">UserSessionTimeoutJob</a> 类，实现 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-job/src/main/java/cn/iocoder/yudao/framework/quartz/core/handler/JobHandler.java#L8" target="_blank" rel="noopener noreferrer">JobHandler</a> 接口，执行用户 Session 超时 Job。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/定时任务/03.png" alt="UserSessionTimeoutJob 类" tabindex="0" loading="lazy"><figcaption>UserSessionTimeoutJob 类</figcaption></figure><p>疑问：为什么添加 @TenantJob 注解？</p><p>声明 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-biz-tenant/src/main/java/cn/iocoder/yudao/framework/tenant/core/job/TenantJob.java" target="_blank" rel="noopener noreferrer"><code>@TenantJob</code></a> 注解在 Job 类上，实现<strong>并行</strong>遍历每个租户，执行定时任务的逻辑。</p><p>更多多租户的内容，可见 <a href="https://doc.iocoder.cn/saas-tenant/" target="_blank" rel="noopener noreferrer">《开发指南 —— SaaS 多租户》</a> 文档。</p><h3 id="_2-3-配置任务" tabindex="-1"><a class="header-anchor" href="#_2-3-配置任务"><span><a href="#_2-3-%E9%85%8D%E7%BD%AE%E4%BB%BB%E5%8A%A1">#</a> 2.3 配置任务</span></a></h3><p>① 点击 [新增] 按钮，填写定时任务 UserSessionTimeoutJob 的信息。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/定时任务/04.png" alt="新建任务" tabindex="0" loading="lazy"><figcaption>新建任务</figcaption></figure><ul><li>处理器的名字：对应的 Spring Bean 名字。例如说 UserSessionTimeoutJob 对应 userSessionTimeoutJob</li><li>Cron 表达式：执行周期，可通过 [生成表达式] 功能，进行生成<br><img src="https://doc.iocoder.cn/img/定时任务/08.png" alt="新建任务" loading="lazy"></li><li>重试次数、重试间隔：执行失败后，立即重试的次数以及重试的间隔时间</li><li>超时时间监控：执行超过该时间后，发送告警邮件给开发【暂不支持，未来实现】</li></ul><p>常用的 Cron 表达式如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>0 0 10,14,16 * * ? 每天上午 10 点，下午 2 点、4 点</span></span>
<span class="line"><span>0 0/30 9-17 * * ? 朝九晚五工作时间内，每半小时</span></span>
<span class="line"><span>0 0 12 ? * WED 表示每个星期三中午 12 点</span></span>
<span class="line"><span>0 0 12 * * ? 每天中午 12 点触发</span></span>
<span class="line"><span>0 15 10 ? * * 每天上午 10:15 触发</span></span>
<span class="line"><span>0 15 10 * * ? 每天上午 10:15 触发</span></span>
<span class="line"><span>0 15 10 * * ? * 每天上午 10:15 触发</span></span>
<span class="line"><span>0 15 10 * * ? 2005 2005 年的每天上午 10:15 触发</span></span>
<span class="line"><span>0 * 14 * * ? 在每天下午 2 点到下午 2:59 期间，每 1 分钟触发</span></span>
<span class="line"><span>0 0/5 14 * * ? 在每天下午 2 点到下午 2:55 期间，每 5 分钟触发</span></span>
<span class="line"><span>0 0/5 14,18 * * ? 在每天下午 2 点到 2:55 期间和下午 6 点到 6:55 期间，每 5 分钟触发</span></span>
<span class="line"><span>0 0-5 14 * * ? 在每天下午 2 点到下午 2:05 期间，每 1 分钟触发</span></span>
<span class="line"><span>0 10,44 14 ? 3 WED 每年三月的星期三的下午 2:10 和 2:44 触发</span></span>
<span class="line"><span>0 15 10 ? * MON-FRI 周一至周五的上午 10:15 触发</span></span>
<span class="line"><span>0 15 10 15 * ? 每月15日上午 10:15 触发</span></span>
<span class="line"><span>0 15 10 L * ? 每月最后一日的上午 10:15 触发</span></span>
<span class="line"><span>0 15 10 ? * 6L 每月的最后一个星期五上午 10:15 触发</span></span>
<span class="line"><span>0 15 10 ? * 6L 2002-2005 2002 年至 2005 年，每月的最后一个星期五上午 10:15 触发</span></span>
<span class="line"><span>0 15 10 ? * 6#3 每月的第三个星期五上午 10:15 触发</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 点击 [更多 -&gt; 任务详情] 按钮，可以查看任务的基础信息、后续的执行时间。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/定时任务/05.png" alt="新建任务" tabindex="0" loading="lazy"><figcaption>新建任务</figcaption></figure><h3 id="_2-4-测试任务" tabindex="-1"><a class="header-anchor" href="#_2-4-测试任务"><span><a href="#_2-4-%E6%B5%8B%E8%AF%95%E4%BB%BB%E5%8A%A1">#</a> 2.4 测试任务</span></a></h3><p>① 点击 [更多 -&gt; 执行一次] 按钮，立即执行一次 UserSessionTimeoutJob 定时任务。可以在 IDEA 控制台看到输出，如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/定时任务/06.png" alt="执行一次" tabindex="0" loading="lazy"><figcaption>执行一次</figcaption></figure><p>② 点击 [更多 -&gt; 调度日志] 按钮，可以查看到 UserSessionTimeoutJob 的执行日志。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/定时任务/07.png" alt="调度日志" tabindex="0" loading="lazy"><figcaption>调度日志</figcaption></figure>`,42)]))}const d=e(s,[["render",r],["__file","job.html.vue"]]),p=JSON.parse('{"path":"/project/rouyi-vue-pro/job.html","title":"定时任务","lang":"en-US","frontmatter":{"title":"定时任务","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":53,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 如何开启？","slug":"_1-如何开启","link":"#_1-如何开启","children":[]},{"level":2,"title":"# 2. 实战案例","slug":"_2-实战案例","link":"#_2-实战案例","children":[{"level":3,"title":"# 2.1 引入依赖","slug":"_2-1-引入依赖","link":"#_2-1-引入依赖","children":[]},{"level":3,"title":"# 2.2 编写 Job 类","slug":"_2-2-编写-job-类","link":"#_2-2-编写-job-类","children":[]},{"level":3,"title":"# 2.3 配置任务","slug":"_2-3-配置任务","link":"#_2-3-配置任务","children":[]},{"level":3,"title":"# 2.4 测试任务","slug":"_2-4-测试任务","link":"#_2-4-测试任务","children":[]}]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":5.2,"words":1561},"filePathRelative":"project/rouyi-vue-pro/job.md","localizedDate":"July 7, 2024"}');export{d as comp,p as data};
