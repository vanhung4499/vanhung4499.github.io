import{_ as a,o,c as i,a as r}from"./app-5QVbWi7Z.js";const n={};function t(c,e){return o(),i("div",null,e[0]||(e[0]=[r(`<h1 id="服务网关-spring-cloud-gateway" tabindex="-1"><a class="header-anchor" href="#服务网关-spring-cloud-gateway"><span>服务网关 Spring Cloud Gateway</span></a></h1><p><a href="https://github.com/YunaiV/yudao-cloud/tree/master/yudao-gateway" target="_blank" rel="noopener noreferrer"><code>yudao-gateway</code></a> 模块，基于 Spring Cloud Gateway 构建 API 服务网关，提供用户认证、服务路由、灰度发布、访问日志、异常处理等功能。</p><p>友情提示：如何学习 Spring Cloud Gateway？</p><p>阅读 <a href="https://www.iocoder.cn/Spring-Cloud/Spring-Cloud-Gateway/?yudao" target="_blank" rel="noopener noreferrer">《芋道 Spring Cloud 网关 Spring Cloud Gateway 入门<br> 》</a> 文章。</p><h2 id="_1-服务路由" tabindex="-1"><a class="header-anchor" href="#_1-服务路由"><span><a href="#_1-%E6%9C%8D%E5%8A%A1%E8%B7%AF%E7%94%B1">#</a> 1. 服务路由</span></a></h2><p>新建服务后，在 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-gateway/src/main/resources/application.yaml" target="_blank" rel="noopener noreferrer"><code>application.yaml</code></a> 配置文件中，需要添加该服务的路由配置。示例如下图：</p><figure><img src="https://cloud.iocoder.cn/img/服务网关/服务网关.png" alt="服务网关" tabindex="0" loading="lazy"><figcaption>服务网关</figcaption></figure><h2 id="_2-用户认证" tabindex="-1"><a class="header-anchor" href="#_2-用户认证"><span><a href="#_2-%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81">#</a> 2. 用户认证</span></a></h2><p>由 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-gateway/src/main/java/cn/iocoder/yudao/gateway/filter/security/" target="_blank" rel="noopener noreferrer"><code>filter/security</code></a> 包实现，无需配置。</p><p>TokenAuthenticationFilter 会获得请求头中的 <code>Authorization</code> 字段，调用 <code>system-server</code> 服务，进行用户认证。</p><ul><li>如果认证成功，会将用户信息放到 <code>login-user</code> 请求头，转发到后续服务。后续服务可以从 <code>login-user</code> 请求头，<a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-framework/yudao-spring-boot-starter-security/src/main/java/cn/iocoder/yudao/framework/security/core/filter/TokenAuthenticationFilter.java#L77-L95" target="_blank" rel="noopener noreferrer">解析</a>到用户信息。</li><li>如果认证失败，依然会转发到后续服务，由该服务决定是否需要登录，是否需要校验权限。</li></ul><figure><img src="https://cloud.iocoder.cn/img/服务网关/用户认证.png" alt="用户认证" tabindex="0" loading="lazy"><figcaption>用户认证</figcaption></figure><p>考虑到性能，API 网关会<a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-gateway/src/main/java/cn/iocoder/yudao/gateway/filter/security/TokenAuthenticationFilter.java#L56-L71" target="_blank" rel="noopener noreferrer">本地缓存</a> Token 与用户信息，每次收到 HTTP 请求时，异步从 <code>system-server</code> 刷新本地缓存。</p><h2 id="_3-灰度发布" tabindex="-1"><a class="header-anchor" href="#_3-灰度发布"><span><a href="#_3-%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83">#</a> 3. 灰度发布</span></a></h2><p>由 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-gateway/src/main/java/cn/iocoder/yudao/gateway/filter/grey/" target="_blank" rel="noopener noreferrer"><code>filter/grey</code></a> 包实现，实现原理如下：</p><figure><img src="https://cloud.iocoder.cn/img/服务网关/灰度发布原理.png" alt="灰度发布原理" tabindex="0" loading="lazy"><figcaption>灰度发布原理</figcaption></figure><p>所以在使用灰度时，如要如下配置：</p><p>① 第一步，【网关】配置服务的路由配置使用 <code>grebLb://</code> 协议，指向灰度服务。例如说：</p><figure><img src="https://cloud.iocoder.cn/img/服务网关/灰度路由greyLb.png" alt=" 协议" tabindex="0" loading="lazy"><figcaption> 协议</figcaption></figure><p>② 第二步，【服务】配置服务的版本 <code>version</code> 配置。例如说：</p><figure><img src="https://cloud.iocoder.cn/img/服务网关/灰度路由version.png" alt=" 版本" tabindex="0" loading="lazy"><figcaption> 版本</figcaption></figure><p>③ 第三步，请求 API 网关时，请求头带上想要 <code>version</code> 版本。</p><p>可能想让用户的请求带上 <code>version</code> 请求头比较难，可以通过 Spring Cloud Gateway 修改请求头，通过 User Agent、Cookie、登录用户等信息，来判断用户想要的版本。详细的解析，可见 <a href="https://www.jianshu.com/p/6db15bc0be8f" target="_blank" rel="noopener noreferrer">《Spring Cloud Gateway 实现灰度发布功能 》</a> 文章。</p><h2 id="_4-访问日志" tabindex="-1"><a class="header-anchor" href="#_4-访问日志"><span><a href="#_4-%E8%AE%BF%E9%97%AE%E6%97%A5%E5%BF%97">#</a> 4. 访问日志</span></a></h2><p>由 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-gateway/src/main/java/cn/iocoder/yudao/gateway/filter/logging/" target="_blank" rel="noopener noreferrer"><code>filter/logging</code></a> 包实现，无需配置。</p><p>每次收到 HTTP 请求时，会打印访问日志，包括 Request、Response、用户等信息。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/服务网关/访问日志.png" alt="访问日志" tabindex="0" loading="lazy"><figcaption>访问日志</figcaption></figure><h2 id="_5-异常处理" tabindex="-1"><a class="header-anchor" href="#_5-异常处理"><span><a href="#_5-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">#</a> 5. 异常处理</span></a></h2><p>由 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-gateway/src/main/java/cn/iocoder/yudao/gateway/handler/GlobalExceptionHandler.java" target="_blank" rel="noopener noreferrer">GlobalExceptionHandler</a> 累实现，无需配置。</p><p>请求发生异常时，会翻译异常信息，返回给用户。例如说：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;code&quot;: 500,</span></span>
<span class="line"><span>  &quot;data&quot;: null,</span></span>
<span class="line"><span>  &quot;msg&quot;: &quot;系统异常&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="_6-动态路由" tabindex="-1"><a class="header-anchor" href="#_6-动态路由"><span><a href="#_6-%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1">#</a> 6. 动态路由</span></a></h2><p>在 Nacos 配置发生变化时，Spring Cloud Alibaba Nacos Config 内置的监听器，会监听到配置刷新，最终触发 Gateway 的路由信息刷新。</p><p>参见 <a href="https://www.iocoder.cn/Spring-Cloud/Spring-Cloud-Gateway/?yudao" target="_blank" rel="noopener noreferrer">《芋道 Spring Cloud 网关 Spring Cloud Gateway 入门 》</a> 博客的「6. 基于配置中心 Nacos 实现动态路由」小节。</p><p>使用方式：在 Nacos 新增 DataId 为 <code>gateway-server.yaml</code> 的配置，修改 <code>spring.cloud.gateway.routes</code> 配置项。</p><h2 id="_7-swagger-接口文档" tabindex="-1"><a class="header-anchor" href="#_7-swagger-接口文档"><span><a href="#_7-swagger-%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3">#</a> 7. Swagger 接口文档</span></a></h2><p>基于 Knife4j 实现 Swagger 接口文档的 <a href="https://doc.xiaominfo.com/docs/middleware-sources/spring-cloud-gateway/spring-gateway-introduction" target="_blank" rel="noopener noreferrer">网关聚合</a>。需要路由配置如下：</p><figure><img src="https://cloud.iocoder.cn/img/新建服务/102.png" alt="网关路由配置" tabindex="0" loading="lazy"><figcaption>网关路由配置</figcaption></figure><p>友情提示：图中的 /v2/ 都改成 /v3/，或者以下面的文字为准！！！</p><ul><li>管理后台的接口：<code>- RewritePath=/admin-api/{服务的基础路由}/v3/api-docs, /v3/api-docs</code></li><li>用户 App 的接口：<code>- RewritePath=/app-api/{服务的基础路由}/v3/api-docs, /v3/api-docs</code></li><li>Knife4j 配置：<code>knife4j.gateway.routes</code> 添加</li></ul><p>浏览器访问 <a href="http://127.0.0.1:48080/doc.html" target="_blank" rel="noopener noreferrer">http://127.0.0.1:48080/doc.html</a> 地址，可以看到所有接口的信息。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/服务网关/接口文档.png" alt="接口文档" tabindex="0" loading="lazy"><figcaption>接口文档</figcaption></figure><h3 id="_7-1-如何调用" tabindex="-1"><a class="header-anchor" href="#_7-1-如何调用"><span><a href="#_7-1-%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8">#</a> 7.1 如何调用</span></a></h3><p>〇 点击左边「文档管理 - 全局参数设置」菜单，设置 <code>header-id</code> 和 <code>Authorization</code> 请求头。如下图所示：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>tenant-id：1</span></span>
<span class="line"><span>Authorization: Bearer test1</span></span></code></pre></div><figure><img src="https://cloud.iocoder.cn/img/服务网关/Knife4j全局参数设置.png" alt="Knife4j 全局参数设置" tabindex="0" loading="lazy"><figcaption>Knife4j 全局参数设置</figcaption></figure><p>添加完后，需要 F5 刷新下网页，否则全局参数不生效。</p><p>① 点击任意一个接口，进行接口的调用测试。这里，使用「管理后台 - 用户个中心」的“获得登录用户信息”举例子。</p><p>② 点击左侧「调试」按钮，并将请求头部的 <code>header-id</code> 和 <code>Authorization</code> 勾选上。</p><p>其中，<code>header-id</code> 为租户编号，<code>Authorization</code> 的 <code>&quot;Bearer test&quot;</code> 后面为用户编号（模拟哪个用户操作）。</p><p>③ 点击「发送」按钮，即可发起一次 API 的调用。</p><figure><img src="https://cloud.iocoder.cn/img/接口文档/Knife4j调用.png" alt="Knife4j 调试" tabindex="0" loading="lazy"><figcaption>Knife4j 调试</figcaption></figure><h3 id="_7-2-如何关闭" tabindex="-1"><a class="header-anchor" href="#_7-2-如何关闭"><span><a href="#_7-2-%E5%A6%82%E4%BD%95%E5%85%B3%E9%97%AD">#</a> 7.2 如何关闭</span></a></h3><p>如果想要禁用 Swagger 功能，可通过 <code>knife4j.gateway.enabled</code> 配置项为 <code>false</code>。一般情况下，建议 prod 生产环境进行禁用，避免发生安全问题。</p><figure><img src="https://cloud.iocoder.cn/img/服务网关/Knife4j关闭.png" alt="Knife4j 关闭" tabindex="0" loading="lazy"><figcaption>Knife4j 关闭</figcaption></figure><h2 id="_8-cors-跨域处理" tabindex="-1"><a class="header-anchor" href="#_8-cors-跨域处理"><span><a href="#_8-cors-%E8%B7%A8%E5%9F%9F%E5%A4%84%E7%90%86">#</a> 8. Cors 跨域处理</span></a></h2><p>由 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-gateway/src/main/java/cn/iocoder/yudao/gateway/filter/cors/" target="_blank" rel="noopener noreferrer"><code>filter/cors</code></a> 包实现，无需配置。</p>`,57)]))}const l=a(n,[["render",t],["__file","gateway.html.vue"]]),s=JSON.parse('{"path":"/project/yudao-cloud/gateway.html","title":"服务网关 Spring Cloud Gateway","lang":"en-US","frontmatter":{"title":"服务网关 Spring Cloud Gateway","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":53,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 服务路由","slug":"_1-服务路由","link":"#_1-服务路由","children":[]},{"level":2,"title":"# 2. 用户认证","slug":"_2-用户认证","link":"#_2-用户认证","children":[]},{"level":2,"title":"# 3. 灰度发布","slug":"_3-灰度发布","link":"#_3-灰度发布","children":[]},{"level":2,"title":"# 4. 访问日志","slug":"_4-访问日志","link":"#_4-访问日志","children":[]},{"level":2,"title":"# 5. 异常处理","slug":"_5-异常处理","link":"#_5-异常处理","children":[]},{"level":2,"title":"# 6. 动态路由","slug":"_6-动态路由","link":"#_6-动态路由","children":[]},{"level":2,"title":"# 7. Swagger 接口文档","slug":"_7-swagger-接口文档","link":"#_7-swagger-接口文档","children":[{"level":3,"title":"# 7.1 如何调用","slug":"_7-1-如何调用","link":"#_7-1-如何调用","children":[]},{"level":3,"title":"# 7.2 如何关闭","slug":"_7-2-如何关闭","link":"#_7-2-如何关闭","children":[]}]},{"level":2,"title":"# 8. Cors 跨域处理","slug":"_8-cors-跨域处理","link":"#_8-cors-跨域处理","children":[]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":4.78,"words":1435},"filePathRelative":"project/yudao-cloud/gateway.md","localizedDate":"July 7, 2024"}');export{l as comp,s as data};
