import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as n,e as i}from"./app-C-_dXKvP.js";const l={},r=i(`<h1 id="ham-currying" tabindex="-1"><a class="header-anchor" href="#ham-currying"><span>Hàm Currying</span></a></h1><blockquote><p>Trong khoa học máy tính, Currying, còn được gọi là phần tử hóa, là một kỹ thuật chuyển đổi một hàm sử dụng nhiều tham số thành một chuỗi các hàm sử dụng một tham số duy nhất và trả về một hàm mới nhận các tham số còn lại và trả về kết quả.</p></blockquote><p>Currying là việc chuyển đổi một hàm có nhiều tham số thành một chuỗi các hàm chỉ nhận một tham số (tham số đầu tiên của hàm ban đầu) và trả về một hàm mới nhận các tham số còn lại và trả về kết quả. Ý tưởng cốt lõi là chia nhỏ hàm có nhiều tham số thành các hàm chỉ nhận một tham số (hoặc một phần) và sau đó trả về việc gọi hàm chỉ nhận một tham số (hoặc một phần) tiếp theo, tiếp tục xử lý các tham số còn lại.</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// Cách viết thông thường</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">4</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// Currying</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">4</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Giả sử hàm này được sử dụng để tính tổng, thì Currying sẽ chuyển đổi hàm ban đầu nhận nhiều tham số để tính tổng thành một chuỗi các hàm chỉ nhận một tham số và tính tổng từng tham số một. Điều này làm cho việc hiểu rõ hơn.</p><h2 id="cai-đat" tabindex="-1"><a class="header-anchor" href="#cai-đat"><span>Cài đặt</span></a></h2><p>Triển khai từng bước một hàm Currying.</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">const</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> sum3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(x, </span><span style="color:#005CC5;--shiki-dark:#E5C07B;">y</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#E5C07B;">z</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="color:#24292E;--shiki-dark:#E06C75;"> x</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="color:#24292E;--shiki-dark:#E06C75;"> y</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="color:#24292E;--shiki-dark:#E06C75;"> z</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">console</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">sum</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="color:#005CC5;--shiki-dark:#D19A66;">2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="color:#005CC5;--shiki-dark:#D19A66;">3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 6</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// Currying</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">const</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> sum3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(x) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">y</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">z</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">      return</span><span style="color:#24292E;--shiki-dark:#E06C75;"> x</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="color:#24292E;--shiki-dark:#E06C75;"> y</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="color:#24292E;--shiki-dark:#E06C75;"> z</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">console</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">sum</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 6</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">function</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> curry</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">y</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">z</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">      return</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">x</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#E06C75;">y</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#E06C75;">z</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">var</span><span style="color:#24292E;--shiki-dark:#E06C75;"> sum3</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> curry</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">((</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">x</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">y</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">z</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="color:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="color:#24292E;--shiki-dark:#E06C75;"> x</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="color:#24292E;--shiki-dark:#E06C75;"> y</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="color:#24292E;--shiki-dark:#E06C75;"> z</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">console</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">sum3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)); </span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 6</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Thêm nhiều tham số:</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">function</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> curryN</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">a1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">a2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">      return</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">a3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">        //......</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">aN</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">          return</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">a1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#E06C75;">a2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#E06C75;">a3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">...</span><span style="color:#24292E;--shiki-dark:#E06C75;">aN</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">        };</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">      };</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sử dụng đệ quy để đơn giản hóa cách viết này:</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">function</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> nest</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">x</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> nest</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">function</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> curry</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> nest</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ở đây thiếu một điều kiện dừng vòng lặp, vì vậy hàm <code>nest</code> trước tiên sẽ thêm một tham số mới là <code>i</code>, khi <code>i === N</code> thì đệ quy dừng lại.</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">function</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> nest</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">i</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">x</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#24292E;--shiki-dark:#E06C75;">i</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> ===</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> N</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">...</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> nest</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#E06C75;">i</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">function</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> curry</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> nest</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tiếp theo, cần một mảng để lưu trữ các tham số tùy ý, gọi mảng này là <code>args</code>, sau đó truyền vào hàm <code>nest</code>.</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">function</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> nest</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">i</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">x</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">    args</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">push</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">x</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#24292E;--shiki-dark:#E06C75;">i</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> ===</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#005CC5;--shiki-dark:#E06C75;">length</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">      return</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">...</span><span style="color:#24292E;--shiki-dark:#E06C75;">args</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> nest</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#E06C75;">i</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#E06C75;">args</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">function</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> curry</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> args</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> nest</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#E06C75;">args</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Cuối cùng, thêm xử lý cho trường hợp không có tham số, chúng ta đã hoàn thành phiên bản cuối cùng của hàm Currying.</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">function</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> curry</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  if</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#24292E;--shiki-dark:#E5C07B;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#005CC5;--shiki-dark:#E06C75;">length</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> ===</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="color:#24292E;--shiki-dark:#E06C75;"> fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> args</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> nest</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#E06C75;">args</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vi-du" tabindex="-1"><a class="header-anchor" href="#vi-du"><span>Ví dụ</span></a></h2><p><strong>Ví dụ 1: Triển khai một hàm Currying tính tổng</strong></p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">const</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> currying</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">...</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> len</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#005CC5;--shiki-dark:#E06C75;">length</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">  args</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#E06C75;"> args</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> ||</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> () </span><span style="color:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    const</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> totalArgs</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">...</span><span style="color:#24292E;--shiki-dark:#E06C75;">args</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">].</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">concat</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">([</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">...</span><span style="color:#005CC5;--shiki-dark:#E5C07B;">arguments</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> totalArgs</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#005CC5;--shiki-dark:#E06C75;">length</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> &gt;=</span><span style="color:#24292E;--shiki-dark:#E06C75;"> len</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> ?</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">call</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#E06C75;">totalArgs</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="color:#D73A49;--shiki-dark:#C678DD;">:</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> currying</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">call</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#E06C75;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#E06C75;">totalArgs</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">const</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> sum</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">a</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">b</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">c</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="color:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E06C75;"> a</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="color:#24292E;--shiki-dark:#E06C75;"> b</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="color:#24292E;--shiki-dark:#E06C75;"> c</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">const</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> newSum</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> currying</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">sum</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">newSum</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">4</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 10</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dường như khá tinh vi, nhưng loại bài toán này rõ ràng không phải là một câu hỏi phỏng vấn dựa trên thực tế.</p><p><strong>Ví dụ 2: Tìm kiếm một giá trị trong một mảng</strong></p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">const</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> find</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">arr</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">value</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> arr</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">indexOf</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">value</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">!==</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Một hàm đơn giản để tìm kiếm một giá trị trong một mảng, mỗi lần sử dụng đều cần gọi như vậy.</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">find</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">arr</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">find</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">arr</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Vì <code>arr</code> là một tham số cố định, chúng ta có thể lưu trữ một hàm đã nhận <code>arr</code>, sau đó sử dụng hàm này để xử lý các tham số thay đổi.</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">const</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> collection</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="color:#005CC5;--shiki-dark:#D19A66;">5</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">4</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">const</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> findInCollection</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> currying</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">find</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)(</span><span style="color:#24292E;--shiki-dark:#E06C75;">collection</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">findInCollection</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">findInCollection</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mục đích của việc sử dụng hàm Currying có thể hiểu là: tái sử dụng tham số. Bản chất là giảm tính chung chung và tăng tính ứng dụng.</p><p><strong>Triển khai Currying đơn giản</strong></p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">const</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> curry</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="color:#D73A49;--shiki-dark:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  (</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">judge</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">...</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="color:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#24292E;--shiki-dark:#E5C07B;">args</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#005CC5;--shiki-dark:#E06C75;">length</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> ===</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#005CC5;--shiki-dark:#E06C75;">length</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> ?</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">...</span><span style="color:#24292E;--shiki-dark:#E06C75;">args</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="color:#D73A49;--shiki-dark:#C678DD;">:</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">arg</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="color:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> judge</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">...</span><span style="color:#24292E;--shiki-dark:#E06C75;">args</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#E06C75;">arg</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// Mở rộng</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">const</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> currying</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="color:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {};</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ham-uncurrying" tabindex="-1"><a class="header-anchor" href="#ham-uncurrying"><span>Hàm Uncurrying</span></a></h2><p>Ngược lại với Currying.</p><ul><li>Currying được sử dụng để giới hạn phạm vi áp dụng, tạo ra một hàm có tính chất đặc thù hơn;</li><li>&quot;Không Currying&quot; được sử dụng để mở rộng phạm vi áp dụng, tạo ra một hàm có tính chất áp dụng rộng hơn.</li></ul><p>Chuyển đổi mã tương ứng như sau.</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">4</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)  </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">-&gt;</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">  fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">4</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ví dụ</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">Array</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">forEach</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> fn</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> [].</span><span style="color:#24292E;--shiki-dark:#E5C07B;">pop</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">call</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#E5C07B;">arguments</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> arr</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> arguments</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#005CC5;--shiki-dark:#E06C75;">length</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> &gt;</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> ?</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> arguments</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> :</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> arguments</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="color:#005CC5;--shiki-dark:#D19A66;">0</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> [].</span><span style="color:#24292E;--shiki-dark:#E5C07B;">forEach</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">call</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">arr</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#E06C75;">fn</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">Array</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">forEach</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#D73A49;--shiki-dark:#C678DD;">function</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">i</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">i</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">  // 1 2 3</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">Array</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">forEach</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&#39;123&#39;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#D73A49;--shiki-dark:#C678DD;">function</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">i</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">i</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">  // 1 2 3</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">Array</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">forEach</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#98C379;">    &#39;0&#39;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#98C379;">    &#39;1&#39;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="color:#005CC5;--shiki-dark:#D19A66;">2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#98C379;">    &#39;2&#39;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="color:#005CC5;--shiki-dark:#D19A66;">3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">    length</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="color:#005CC5;--shiki-dark:#D19A66;">3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  function</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">i</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">    console</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E06C75;">i</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">    // 1 2 3</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Việc sử dụng hàm gốc của mảng thông qua hàm <code>call</code> là một ứng dụng phổ biến. Trong ví dụ này, chúng ta sử dụng <code>call</code> để trích xuất một hàm mới, có thể nhận nhiều tham số và loại dữ liệu khác nhau, có tính ứng dụng rộng hơn.</p>`,41),o=[r];function p(e,t){return n(),a("div",null,o)}const d=s(l,[["render",p],["__file","currying.html.vue"]]),h=JSON.parse('{"path":"/programming/js/core/function/types/currying.html","title":"Function Currying","lang":"en-US","frontmatter":{"title":"Function Currying","tags":["js","programming"],"categories":["js","programming"],"date created":"2023-08-05T00:00:00.000Z","date modified":"2023-08-05T00:00:00.000Z","order":7,"description":"Hàm Currying Trong khoa học máy tính, Currying, còn được gọi là phần tử hóa, là một kỹ thuật chuyển đổi một hàm sử dụng nhiều tham số thành một chuỗi các hàm sử dụng một tham số...","head":[["meta",{"property":"og:url","content":"https://vanhung4499.github.io/programming/js/core/function/types/currying.html"}],["meta",{"property":"og:site_name","content":"vanhung4499"}],["meta",{"property":"og:title","content":"Function Currying"}],["meta",{"property":"og:description","content":"Hàm Currying Trong khoa học máy tính, Currying, còn được gọi là phần tử hóa, là một kỹ thuật chuyển đổi một hàm sử dụng nhiều tham số thành một chuỗi các hàm sử dụng một tham số..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-20T12:02:51.000Z"}],["meta",{"property":"article:author","content":"Hung Nguyen"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"programming"}],["meta",{"property":"article:modified_time","content":"2024-06-20T12:02:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Function Currying\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-20T12:02:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hung Nguyen\\",\\"url\\":\\"https://vanhung4499.github.io\\",\\"email\\":\\"vanhung4499@gmail.com\\"}]}"]]},"headers":[{"level":2,"title":"Cài đặt","slug":"cai-đat","link":"#cai-đat","children":[]},{"level":2,"title":"Ví dụ","slug":"vi-du","link":"#vi-du","children":[]},{"level":2,"title":"Hàm Uncurrying","slug":"ham-uncurrying","link":"#ham-uncurrying","children":[]}],"git":{"createdTime":1718884971000,"updatedTime":1718884971000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":3.84,"words":1151},"filePathRelative":"programming/js/core/function/types/currying.md","localizedDate":"June 20, 2024","excerpt":"\\n<blockquote>\\n<p>Trong khoa học máy tính, Currying, còn được gọi là phần tử hóa, là một kỹ thuật chuyển đổi một hàm sử dụng nhiều tham số thành một chuỗi các hàm sử dụng một tham số duy nhất và trả về một hàm mới nhận các tham số còn lại và trả về kết quả.</p>\\n</blockquote>\\n<p>Currying là việc chuyển đổi một hàm có nhiều tham số thành một chuỗi các hàm chỉ nhận một tham số (tham số đầu tiên của hàm ban đầu) và trả về một hàm mới nhận các tham số còn lại và trả về kết quả. Ý tưởng cốt lõi là chia nhỏ hàm có nhiều tham số thành các hàm chỉ nhận một tham số (hoặc một phần) và sau đó trả về việc gọi hàm chỉ nhận một tham số (hoặc một phần) tiếp theo, tiếp tục xử lý các tham số còn lại.</p>","autoDesc":true}');export{d as comp,h as data};
