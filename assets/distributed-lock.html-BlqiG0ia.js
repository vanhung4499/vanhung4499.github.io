import{_ as e,o as a,c as s,a as n}from"./app-BRTHG7K9.js";const i={},o=n(`<h1 id="分布式锁" tabindex="-1"><a class="header-anchor" href="#分布式锁"><span>分布式锁</span></a></h1><p><a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-protection/" target="_blank" rel="noopener noreferrer"><code>yudao-spring-boot-starter-protection</code></a> 技术组件，使用 Redis 实现分布式锁的功能，它有 2 种使用方式：</p><ul><li>编程式锁：基于 <a href="https://github.com/redisson/redisson" target="_blank" rel="noopener noreferrer">Redisson</a> 框架提供的<a href="https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8" target="_blank" rel="noopener noreferrer">各种</a>分布式锁</li><li>声明式锁：基于 <a href="https://github.com/baomidou/lock4j" target="_blank" rel="noopener noreferrer">Lock4j</a> 框架的 <code>@Lock4j</code> 注解</li></ul><p>Redis 分布式锁的实现原理？</p><p>参见 <a href="https://www.iocoder.cn/Redis/good-collection/?yudao" target="_blank" rel="noopener noreferrer">《Redis 实现原理与源码解析系列》</a> 文章。</p><h2 id="_1-编程式锁" tabindex="-1"><a class="header-anchor" href="#_1-编程式锁"><span><a href="#_1-%E7%BC%96%E7%A8%8B%E5%BC%8F%E9%94%81">#</a> 1. 编程式锁</span></a></h2><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.redisson&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;redisson-spring-boot-starter&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div><h3 id="_1-1-redisson-配置" tabindex="-1"><a class="header-anchor" href="#_1-1-redisson-配置"><span><a href="#_1-1-redisson-%E9%85%8D%E7%BD%AE">#</a> 1.1 Redisson 配置</span></a></h3><p>无需配置。因为在 <a href="/redis-cache">Redis 缓存</a> 中，进行了 Spring Data Redis + Redisson 的配置。</p><h3 id="_1-2-实战案例" tabindex="-1"><a class="header-anchor" href="#_1-2-实战案例"><span><a href="#_1-2-%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B">#</a> 1.2 实战案例</span></a></h3><p><code>yudao-module-pay</code> 模块的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-pay/yudao-module-pay-biz/src/main/java/cn/iocoder/yudao/module/pay/service/notify/PayNotifyServiceImpl.java#L155-L174" target="_blank" rel="noopener noreferrer"><code>notify</code></a> 功能，使用到分布式锁，确保<strong>每个</strong>支付通知任务有且仅有一个在执行。下面，来看看这个案例是如何实现的。</p><p>友情提示：</p><p>建议你已经阅读过 <a href="/redis-cache">《开发指南 —— Redis 缓存》</a> 文档。</p><p>① 在 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-pay/yudao-module-pay-biz/src/main/java/cn/iocoder/yudao/module/pay/dal/redis/RedisKeyConstants.java" target="_blank" rel="noopener noreferrer">RedisKeyConstants</a> 类中，定义通知任务使用的分布式锁的 Redis Key。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/分布式锁/01.png" alt="PAY_NOTIFY_LOCK" tabindex="0" loading="lazy"><figcaption>PAY_NOTIFY_LOCK</figcaption></figure><p>② 创建 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-pay/yudao-module-pay-biz/src/main/java/cn/iocoder/yudao/module/pay/dal/redis/notify/PayNotifyLockRedisDAO.java" target="_blank" rel="noopener noreferrer">PayNotifyLockRedisDAO</a> 类，使用 RedisClient 实现分布式锁的加锁与解锁。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/分布式锁/02.png" alt="PayNotifyLockRedisDAO" tabindex="0" loading="lazy"><figcaption>PayNotifyLockRedisDAO</figcaption></figure><p>③ 在 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-pay/yudao-module-pay-biz/src/main/java/cn/iocoder/yudao/module/pay/service/notify/PayNotifyServiceImpl.java#L155-L174" target="_blank" rel="noopener noreferrer">PayNotifyServiceImpl</a> 执行指定的支付通知任务时，通过 PayNotifyLockRedisDAO 获得分布式锁。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/分布式锁/03.png" alt="PayNotifyLockRedisDAO" tabindex="0" loading="lazy"><figcaption>PayNotifyLockRedisDAO</figcaption></figure><p>技术选型：为什么不使用 Lock4j 提供的 LockTemplate 实现编程式锁？</p><p>两者各有优势，选择 Redisson 主要考虑它支持的 Redis 分布式锁的类型较多：可靠性较高的红锁、性能较好的读写锁等等。</p><p>Lock4j 的 LockTemplate 也是不错的选择，一方面不强依赖 Redisson 框架，一方面支持 ZooKeeper 等等。</p><h2 id="_2-声明式锁" tabindex="-1"><a class="header-anchor" href="#_2-声明式锁"><span><a href="#_2-%E5%A3%B0%E6%98%8E%E5%BC%8F%E9%94%81">#</a> 2. 声明式锁</span></a></h2><p>考虑到不是所有人都会使用 Lock4j 组件，所以默认项目未引入 <code>lock4j-redisson-spring-boot-starter</code>。如果你想要实用，可按照下图进行引入：</p><figure><img src="https://cloud.iocoder.cn/img/分布式锁/05.png" alt="引入依赖" tabindex="0" loading="lazy"><figcaption>引入依赖</figcaption></figure><h3 id="_2-1-lock4j-配置" tabindex="-1"><a class="header-anchor" href="#_2-1-lock4j-配置"><span><a href="#_2-1-lock4j-%E9%85%8D%E7%BD%AE">#</a> 2.1 Lock4j 配置</span></a></h3><p>友情提示：以 yudao-module-system 服务为例子。</p><p>在 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-system/yudao-module-system-biz/src/main/resources/application-local.yaml#L89-L92" target="_blank" rel="noopener noreferrer"><code>application-local.yaml</code></a> 配置文件中，通过 <code>lock4j</code> 配置项，添加 Lock4j 全局默认的分布式锁配置。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/分布式锁/04.png" alt="配置文件" tabindex="0" loading="lazy"><figcaption>配置文件</figcaption></figure><h3 id="_2-2-使用案例" tabindex="-1"><a class="header-anchor" href="#_2-2-使用案例"><span><a href="#_2-2-%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B">#</a> 2.2 使用案例</span></a></h3><p>在需要使用到分布式锁的方法上，添加 <code>@Lock4j</code> 注解，非常方便。示例代码如下：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>@Service</span></span>
<span class="line"><span>public class DemoService {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 默认使用 lock4j 配置项</span></span>
<span class="line"><span>    @Lock4j</span></span>
<span class="line"><span>    public void simple() {</span></span>
<span class="line"><span>        //do something</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 完全配置，支持 Spring EL 表达式</span></span>
<span class="line"><span>    @Lock4j(keys = {&quot;#user.id&quot;, &quot;#user.name&quot;}, expire = 60000, acquireTimeout = 1000)</span></span>
<span class="line"><span>    public User customMethod(User user) {</span></span>
<span class="line"><span>        return user;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32),r=[o];function l(d,c){return a(),s("div",null,r)}const p=e(i,[["render",l],["__file","distributed-lock.html.vue"]]),u=JSON.parse('{"path":"/project/yudao-cloud/distributed-lock.html","title":"分布式锁","lang":"en-US","frontmatter":{"title":"分布式锁","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":43,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 编程式锁","slug":"_1-编程式锁","link":"#_1-编程式锁","children":[{"level":3,"title":"# 1.1 Redisson 配置","slug":"_1-1-redisson-配置","link":"#_1-1-redisson-配置","children":[]},{"level":3,"title":"# 1.2 实战案例","slug":"_1-2-实战案例","link":"#_1-2-实战案例","children":[]}]},{"level":2,"title":"# 2. 声明式锁","slug":"_2-声明式锁","link":"#_2-声明式锁","children":[{"level":3,"title":"# 2.1 Lock4j 配置","slug":"_2-1-lock4j-配置","link":"#_2-1-lock4j-配置","children":[]},{"level":3,"title":"# 2.2 使用案例","slug":"_2-2-使用案例","link":"#_2-2-使用案例","children":[]}]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":2.6,"words":781},"filePathRelative":"project/yudao-cloud/distributed-lock.md","localizedDate":"July 7, 2024"}');export{p as comp,u as data};
