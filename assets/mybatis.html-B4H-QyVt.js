import{_ as e,o as n,c as s,a as i}from"./app-5QVbWi7Z.js";const r={};function t(o,a){return n(),s("div",null,a[0]||(a[0]=[i(`<h1 id="mybatis-数据库" tabindex="-1"><a class="header-anchor" href="#mybatis-数据库"><span>MyBatis 数据库</span></a></h1><p><a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-mybatis/" target="_blank" rel="noopener noreferrer"><code>yudao-spring-boot-starter-mybatis</code></a> 技术组件，基于 MyBatis Plus 实现数据库的操作。如果你没有学习过 MyBatis Plus，建议先阅读 <a href="https://www.iocoder.cn/Spring-Boot/MyBatis/?yudao" target="_blank" rel="noopener noreferrer">《芋道 Spring Boot MyBatis 入门 》</a> 文章。</p><p>友情提示</p><p>MyBatis 是最容易读懂的 Java 框架之一，感兴趣的话，可以看看艿艿写的 <a href="https://www.iocoder.cn/MyBatis/good-collection/?yudao" target="_blank" rel="noopener noreferrer">《芋道 MyBatis 源码解析》</a> 系列，已经有 18000 人学习过！</p><h2 id="_1-实体类" tabindex="-1"><a class="header-anchor" href="#_1-实体类"><span><a href="#_1-%E5%AE%9E%E4%BD%93%E7%B1%BB">#</a> 1. 实体类</span></a></h2><p><a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-mybatis/src/main/java/cn/iocoder/yudao/framework/mybatis/core/dataobject/BaseDO.java" target="_blank" rel="noopener noreferrer">BaseDO</a> 是所有数据库实体的<strong>父类</strong>，代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>@Data</span></span>
<span class="line"><span>public abstract class BaseDO implements Serializable {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 创建时间</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @TableField(fill = FieldFill.INSERT)</span></span>
<span class="line"><span>    private Date createTime;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 最后更新时间</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @TableField(fill = FieldFill.INSERT_UPDATE)</span></span>
<span class="line"><span>    private Date updateTime;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 创建者，目前使用 AdminUserDO / MemberUserDO 的 id 编号</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * 使用 String 类型的原因是，未来可能会存在非数值的情况，留好拓展性。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @TableField(fill = FieldFill.INSERT)</span></span>
<span class="line"><span>    private String creator;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 更新者，目前使用 AdminUserDO / MemberUserDO 的 id 编号</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * 使用 String 类型的原因是，未来可能会存在非数值的情况，留好拓展性。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @TableField(fill = FieldFill.INSERT_UPDATE)</span></span>
<span class="line"><span>    private String updater;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 是否删除</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @TableLogic</span></span>
<span class="line"><span>    private Boolean deleted;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>createTime</code> + <code>creator</code> 字段，创建人相关信息。</li><li><code>updater</code> + <code>updateTime</code> 字段，创建人相关信息。</li><li><code>deleted</code> 字段，逻辑删除。</li></ul><p>对应的 SQL 字段如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>\`creator\` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT &#39;&#39; COMMENT &#39;创建者&#39;,</span></span>
<span class="line"><span>\`create_time\` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,</span></span>
<span class="line"><span>\`updater\` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT &#39;&#39; COMMENT &#39;更新者&#39;,</span></span>
<span class="line"><span>\`update_time\` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;更新时间&#39;,</span></span>
<span class="line"><span>\`deleted\` bit(1) NOT NULL DEFAULT b&#39;0&#39; COMMENT &#39;是否删除&#39;,</span></span></code></pre></div><h3 id="_1-1-主键编号" tabindex="-1"><a class="header-anchor" href="#_1-1-主键编号"><span><a href="#_1-1-%E4%B8%BB%E9%94%AE%E7%BC%96%E5%8F%B7">#</a> 1.1 主键编号</span></a></h3><p><code>id</code> 主键编号，推荐使用 Long 型自增，原因是：</p><ul><li>自增，保证数据库是按顺序写入，性能更加优秀。</li><li>Long 型，避免未来业务增长，超过 Int 范围。</li></ul><p>对应的 SQL 字段如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>\`id\` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;编号&#39;,</span></span></code></pre></div><p>项目的 <code>id</code> <strong>默认</strong>采用数据库自增的策略，如果希望使用 Snowflake 雪花算法，可以修改 <code>application.yaml</code> 配置文件，将配置项 <code>mybatis-plus.global-config.db-config.id-type</code> 修改为 <code>ASSIGN_ID</code>。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/数据库MyBatis/01.png" alt="配置 Snowflake 雪花算法" tabindex="0" loading="lazy"><figcaption>配置 Snowflake 雪花算法</figcaption></figure><h3 id="_1-2-逻辑删除" tabindex="-1"><a class="header-anchor" href="#_1-2-逻辑删除"><span><a href="#_1-2-%E9%80%BB%E8%BE%91%E5%88%A0%E9%99%A4">#</a> 1.2 逻辑删除</span></a></h3><p>所有表通过 <code>deleted</code> 字段来实现逻辑删除，值为 0 表示未删除，值为 1 表示已删除，可见 <code>application.yaml</code> 配置文件的 <code>logic-delete-value</code> 和 <code>logic-not-delete-value</code> 配置项。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/数据库MyBatis/03.png" alt="逻辑删除的配置" tabindex="0" loading="lazy"><figcaption>逻辑删除的配置</figcaption></figure><p>① 所有 SELECT 查询，都会自动拼接 <code>WHERE deleted = 0</code> 查询条件，过滤已经删除的记录。如果被删除的记录，只能通过在 XML 或者 <code>@SELECT</code> 来手写 SQL 语句。例如说：</p><figure><img src="https://doc.iocoder.cn/img/数据库MyBatis/04.png" alt="不自动过滤逻辑删除" tabindex="0" loading="lazy"><figcaption>不自动过滤逻辑删除</figcaption></figure><p>② 建立唯一索引时，需要额外增加 <code>delete_time</code> 字段，添加到唯一索引字段中，避免唯一索引冲突。例如说，<code>system_users</code> 使用 <code>username</code> 作为唯一索引：</p><ul><li>未添加前：先逻辑删除了一条 <code>username = yudao</code> 的记录，然后又插入了一条 <code>username = yudao</code> 的记录时，会报索引冲突的异常。</li><li>已添加后：先逻辑删除了一条 <code>username = yudao</code> 的记录并更新 <code>delete_time</code> 为当前时间，然后又插入一条 <code>username = yudao</code> 并且 <code>delete_time</code> 为 0 的记录，不会导致唯一索引冲突。</li></ul><h3 id="_1-3-自动填充" tabindex="-1"><a class="header-anchor" href="#_1-3-自动填充"><span><a href="#_1-3-%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85">#</a> 1.3 自动填充</span></a></h3><p><a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-mybatis/src/main/java/cn/iocoder/yudao/framework/mybatis/core/handler/DefaultDBFieldHandler.java" target="_blank" rel="noopener noreferrer">DefaultDBFieldHandler</a> 基于 MyBatis 自动填充机制，实现 BaseDO 通用字段的自动设置。代码如下如：</p><figure><img src="https://doc.iocoder.cn/img/数据库MyBatis/02.png" alt="DefaultDBFieldHandler 自动填充" tabindex="0" loading="lazy"><figcaption>DefaultDBFieldHandler 自动填充</figcaption></figure><h3 id="_1-4-复杂-字段类型" tabindex="-1"><a class="header-anchor" href="#_1-4-复杂-字段类型"><span><a href="#_1-4-%E5%A4%8D%E6%9D%82-%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8B">#</a> 1.4 “复杂”字段类型</span></a></h3><p>MyBatis Plus 提供 TypeHandler 字段类型处理器，用于 JavaType 与 JdbcType 之间的转换。示例如下：</p><figure><img src="https://doc.iocoder.cn/img/数据库MyBatis/13.png" alt="字段处理器的示例" tabindex="0" loading="lazy"><figcaption>字段处理器的示例</figcaption></figure><p>常用的字段类型处理器有：</p><ul><li><a href="https://github.com/baomidou/mybatis-plus/blob/a3e121c27cd26cb7c546dfb88190f3b1f574dc38/mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/handlers/JacksonTypeHandler.java" target="_blank" rel="noopener noreferrer">JacksonTypeHandler</a>：通用的 Jackson 实现 JSON 字段类型处理器。</li><li><a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-mybatis/src/main/java/cn/iocoder/yudao/framework/mybatis/core/type/JsonLongSetTypeHandler.java" target="_blank" rel="noopener noreferrer">JsonLongSetTypeHandler</a>：针对 <code>Set&lt;Long&gt;</code> 的 Jackson 实现 JSON 字段类型处理器。</li></ul><p>另外，如果你后续要拓展自定义的 TypeHandler 实现，可以添加到 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-mybatis/src/main/java/cn/iocoder/yudao/framework/mybatis/core/type/JsonLongSetTypeHandler.java" target="_blank" rel="noopener noreferrer"><code>cn.iocoder.yudao.framework.mybatis.core.type</code></a> 包下。</p><p>注意事项：</p><p>使用 TypeHandler 时，需要设置实体的 <code>@TableName</code> 注解的 <code>@autoResultMap = true</code>。</p><h2 id="_2-编码规范" tabindex="-1"><a class="header-anchor" href="#_2-编码规范"><span><a href="#_2-%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83">#</a> 2. 编码规范</span></a></h2><p>① 数据库实体类放在 <code>dal.dataobject</code> 包下，以 DO 结尾；数据库访问类放在 <code>dal.mysql</code> 包下，以 Mapper 结尾。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/数据库MyBatis/17.png" alt="包规范" tabindex="0" loading="lazy"><figcaption>包规范</figcaption></figure><hr><p>② 数据库实体类的注释要完整，特别是哪些字段是关联（外键）、枚举、冗余等等。例如说：</p><figure><img src="https://doc.iocoder.cn/img/数据库MyBatis/18.png" alt="包规范" tabindex="0" loading="lazy"><figcaption>包规范</figcaption></figure><hr><p>③ 禁止在 Controller、Service 中，<strong>直接</strong>进行 MyBatis Plus 操作。原因是：大量 MyBatis 操作散落在 Service 中，会导致 Service 的代码越来乱，无法聚焦业务逻辑。</p><table><thead><tr><th></th><th>示例</th></tr></thead><tbody><tr><td>错误</td><td></td></tr><tr><td>正确</td><td></td></tr></tbody></table><p>并且，通过只允许将 MyBatis Plus 操作编写 Mapper 层，更好的实现 SELECT 查询的复用，而不是 Service 会存在很多相同且重复的 SELECT 查询的逻辑。</p><hr><p>④ Mapper 的 SELECT 查询方法的命名，采用 Spring Data 的 <a href="https://docs.spring.io/spring-data/jpa/docs/2.2.0.RELEASE/reference/html/#jpa.query-methods.query-creation" target="_blank" rel="noopener noreferrer">&quot;Query methods&quot;</a> 策略，方法名使用 <code>selectBy查询条件</code> 规则。例如说：</p><figure><img src="https://doc.iocoder.cn/img/数据库MyBatis/07.png" alt="SELECT 命名示例" tabindex="0" loading="lazy"><figcaption>SELECT 命名示例</figcaption></figure><hr><p>⑤ 优先使用 LambdaQueryWrapper 条件构造器，使用方法获得字段名，避免手写 <code>&quot;字段&quot;</code> 可能写错的情况。例如说：</p><figure><img src="https://doc.iocoder.cn/img/数据库MyBatis/08.png" alt="LambdaQueryWrapper 条件构造器" tabindex="0" loading="lazy"><figcaption>LambdaQueryWrapper 条件构造器</figcaption></figure><hr><p>⑥ 简单的单表查询，优先在 Mapper 中通过 <code>default</code> 方法实现。例如说：</p><figure><img src="https://doc.iocoder.cn/img/数据库MyBatis/11.png" alt="单表查询" tabindex="0" loading="lazy"><figcaption>单表查询</figcaption></figure><h2 id="_3-crud-接口" tabindex="-1"><a class="header-anchor" href="#_3-crud-接口"><span><a href="#_3-crud-%E6%8E%A5%E5%8F%A3">#</a> 3. CRUD 接口</span></a></h2><p><a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-mybatis/src/main/java/cn/iocoder/yudao/framework/mybatis/core/mapper/BaseMapperX.java" target="_blank" rel="noopener noreferrer">BaseMapperX</a> 接口，继承 MyBatis Plus 的 BaseMapper 接口，提供更强的 CRUD 操作能力。</p><h3 id="_3-1-selectone" tabindex="-1"><a class="header-anchor" href="#_3-1-selectone"><span><a href="#_3-1-selectone">#</a> 3.1 selectOne</span></a></h3><p><a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-mybatis/src/main/java/cn/iocoder/yudao/framework/mybatis/core/mapper/BaseMapperX.java#L30-L44" target="_blank" rel="noopener noreferrer"><code>#selectOne(...)</code></a> 方法，使用指定条件，查询单条记录。示例如下：</p><figure><img src="https://doc.iocoder.cn/img/数据库MyBatis/09.png" alt="selectOne 示例" tabindex="0" loading="lazy"><figcaption>selectOne 示例</figcaption></figure><h3 id="_3-2-selectcount" tabindex="-1"><a class="header-anchor" href="#_3-2-selectcount"><span><a href="#_3-2-selectcount">#</a> 3.2 selectCount</span></a></h3><p><a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-mybatis/src/main/java/cn/iocoder/yudao/framework/mybatis/core/mapper/BaseMapperX.java#L46-L56" target="_blank" rel="noopener noreferrer"><code>#selectCount(...)</code></a> 方法，使用指定条件，查询记录的数量。示例如下：</p><figure><img src="https://doc.iocoder.cn/img/数据库MyBatis/10.png" alt="selectCount 示例" tabindex="0" loading="lazy"><figcaption>selectCount 示例</figcaption></figure><h3 id="_3-3-selectlist" tabindex="-1"><a class="header-anchor" href="#_3-3-selectlist"><span><a href="#_3-3-selectlist">#</a> 3.3 selectList</span></a></h3><p><a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-mybatis/src/main/java/cn/iocoder/yudao/framework/mybatis/core/mapper/BaseMapperX.java#L58-L76" target="_blank" rel="noopener noreferrer"><code>#selectList(...)</code></a> 方法，使用指定条件，查询多条记录。示例如下：</p><figure><img src="https://doc.iocoder.cn/img/数据库MyBatis/11.png" alt="selectList 示例" tabindex="0" loading="lazy"><figcaption>selectList 示例</figcaption></figure><h3 id="_3-4-selectpage" tabindex="-1"><a class="header-anchor" href="#_3-4-selectpage"><span><a href="#_3-4-selectpage">#</a> 3.4 selectPage</span></a></h3><p>针对 MyBatis Plus 分页查询的二次分装，在 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-mybatis/src/main/java/cn/iocoder/yudao/framework/mybatis/core/mapper/BaseMapperX.java" target="_blank" rel="noopener noreferrer">BaseMapperX</a> 中实现，目的是使用项目自己的分页封装：</p><ul><li>【入参】查询前，将项目的分页参数 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/pojo/PageParam.java" target="_blank" rel="noopener noreferrer">PageParam</a>，转换成 MyBatis Plus 的 IPage 对象。</li><li>【出参】查询后，将 MyBatis Plus 的分页结果 IPage，转换成项目的分页结果 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/pojo/PageResult.java" target="_blank" rel="noopener noreferrer">PageResult</a>。代码如下图：</li></ul><figure><img src="https://doc.iocoder.cn/img/分页实现/01.png" alt="BaseMapperX 实现" tabindex="0" loading="lazy"><figcaption>BaseMapperX 实现</figcaption></figure><p>具体的使用示例，可见 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/dal/mysql/tenant/TenantMapper.java" target="_blank" rel="noopener noreferrer">TenantMapper</a> 类中，定义 selectPage 查询方法。代码如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>@Mapper</span></span>
<span class="line"><span>public interface TenantMapper extends BaseMapperX&lt;TenantDO&gt; {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    default PageResult&lt;TenantDO&gt; selectPage(TenantPageReqVO reqVO) {</span></span>
<span class="line"><span>        return selectPage(reqVO, new LambdaQueryWrapperX&lt;TenantDO&gt;()</span></span>
<span class="line"><span>                .likeIfPresent(TenantDO::getName, reqVO.getName()) // 如果 name 不为空，则进行 like 查询</span></span>
<span class="line"><span>                .likeIfPresent(TenantDO::getContactName, reqVO.getContactName())</span></span>
<span class="line"><span>                .likeIfPresent(TenantDO::getContactMobile, reqVO.getContactMobile())</span></span>
<span class="line"><span>                .eqIfPresent(TenantDO::getStatus, reqVO.getStatus()) // 如果 status 不为空，则进行 = 查询</span></span>
<span class="line"><span>                .betweenIfPresent(TenantDO::getCreateTime, reqVO.getBeginCreateTime(), reqVO.getEndCreateTime()) // 如果 create 不为空，则进行 between 查询</span></span>
<span class="line"><span>                .orderByDesc(TenantDO::getId)); // 按照 id 倒序</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><p>完整实战，可见 <a href="/page-feature">《开发指南 —— 分页实现》</a> 文档。</p><h3 id="_3-5-insertbatch" tabindex="-1"><a class="header-anchor" href="#_3-5-insertbatch"><span><a href="#_3-5-insertbatch">#</a> 3.5 insertBatch</span></a></h3><p><a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-mybatis/src/main/java/cn/iocoder/yudao/framework/mybatis/core/mapper/BaseMapperX.java#L78-L88" target="_blank" rel="noopener noreferrer"><code>#insertBatch(...)</code></a> 方法，遍历数组，逐条插入数据库中，适合<strong>少量</strong>数据插入，或者对<strong>性能要求不高</strong>的场景。 示例如下：</p><figure><img src="https://doc.iocoder.cn/img/数据库MyBatis/12.png" alt="insertBatch 示例" tabindex="0" loading="lazy"><figcaption>insertBatch 示例</figcaption></figure><p>为什么不使用 insertBatchSomeColumn 批量插入？</p><ul><li>只支持 MySQL 数据库。其它 Oracle 等数据库使用会报错，可见 <a href="https://github.com/baomidou/mybatis-plus/blob/a3e121c27cd26cb7c546dfb88190f3b1f574dc38/mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/injector/methods/InsertBatchSomeColumn.java" target="_blank" rel="noopener noreferrer">InsertBatchSomeColumn</a> 说明。</li><li>未支持多租户。插入数据库时，多租户字段不会进行自动赋值。</li></ul><h2 id="_4-批量插入" tabindex="-1"><a class="header-anchor" href="#_4-批量插入"><span><a href="#_4-%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5">#</a> 4. 批量插入</span></a></h2><p>绝大多数场景下，推荐使用 MyBatis Plus 提供的 IService 的 <a href="https://github.com/baomidou/mybatis-plus/blob/34ebdf6ee6/mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/service/IService.java#L66-L74" target="_blank" rel="noopener noreferrer"><code>#saveBatch()</code></a> 方法。示例 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/service/permission/PermissionServiceImpl.java#L200-L230" target="_blank" rel="noopener noreferrer">PermissionServiceImpl</a> 如下：</p><figure><img src="https://doc.iocoder.cn/img/数据库MyBatis/14.png" alt="saveBatch 示例" tabindex="0" loading="lazy"><figcaption>saveBatch 示例</figcaption></figure><h2 id="_5-条件构造器" tabindex="-1"><a class="header-anchor" href="#_5-条件构造器"><span><a href="#_5-%E6%9D%A1%E4%BB%B6%E6%9E%84%E9%80%A0%E5%99%A8">#</a> 5. 条件构造器</span></a></h2><p>继承 MyBatis Plus 的条件构造器，拓展了 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-mybatis/src/main/java/cn/iocoder/yudao/framework/mybatis/core/query/LambdaQueryWrapperX.java" target="_blank" rel="noopener noreferrer">LambdaQueryWrapperX</a> 和 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-mybatis/src/main/java/cn/iocoder/yudao/framework/mybatis/core/query/QueryWrapperX.java" target="_blank" rel="noopener noreferrer">QueryWrapperX</a> 类，主要是增加 xxxIfPresent 方法，用于判断值不存在的时候，不要拼接到条件中。例如说：</p><figure><img src="https://doc.iocoder.cn/img/数据库MyBatis/15.png" alt="xxxIfPresent 方法" tabindex="0" loading="lazy"><figcaption>xxxIfPresent 方法</figcaption></figure><p>具体的使用示例如下：</p><figure><img src="https://doc.iocoder.cn/img/数据库MyBatis/16.png" alt="LambdaQueryWrapperX 使用示例" tabindex="0" loading="lazy"><figcaption>LambdaQueryWrapperX 使用示例</figcaption></figure><h2 id="_6-mapper-xml" tabindex="-1"><a class="header-anchor" href="#_6-mapper-xml"><span><a href="#_6-mapper-xml">#</a> 6. Mapper XML</span></a></h2><p>默认配置下，MyBatis Mapper XML 需要写在各 <code>yudao-module-xxx-biz</code> 模块的 <code>resources/mapper</code> 目录下。示例 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-infra/yudao-module-infra-biz/src/main/resources/mapper/test/TestDemoMapper.xml" target="_blank" rel="noopener noreferrer">TestDemoMapper.xml</a> 如下：</p><figure><img src="https://doc.iocoder.cn/img/数据库MyBatis/19.png" alt="TestDemoMapper.xml 示例" tabindex="0" loading="lazy"><figcaption>TestDemoMapper.xml 示例</figcaption></figure><p>尽量避免数据库的连表（多表）查询，而是采用多次查询，Java 内存拼接的方式替代。例如说：</p><figure><img src="https://doc.iocoder.cn/img/数据库MyBatis/20.png" alt="UserController 示例" tabindex="0" loading="lazy"><figcaption>UserController 示例</figcaption></figure><h2 id="_7-字段加密" tabindex="-1"><a class="header-anchor" href="#_7-字段加密"><span><a href="#_7-%E5%AD%97%E6%AE%B5%E5%8A%A0%E5%AF%86">#</a> 7. 字段加密</span></a></h2><p><a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-mybatis/src/main/java/cn/iocoder/yudao/framework/mybatis/core/type/EncryptTypeHandler.java" target="_blank" rel="noopener noreferrer">EncryptTypeHandler</a>，基于 <a href="https://apidoc.gitee.com/dromara/hutool/cn/hutool/crypto/symmetric/AES.html" target="_blank" rel="noopener noreferrer">Hutool AES</a> 实现字段的解密与解密。</p><p>例如说，<a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-infra/yudao-module-infra-biz/src/main/java/cn/iocoder/yudao/module/infra/dal/dataobject/db/DataSourceConfigDO.java" target="_blank" rel="noopener noreferrer">数据源配置</a>的 <code>password</code> 密码需要实现加密存储，则只需要在该字段上添加 EncryptTypeHandler 处理器。示例代码如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>@TableName(value = &quot;infra_data_source_config&quot;, autoResultMap = true) // ① 添加 autoResultMap = true</span></span>
<span class="line"><span>public class DataSourceConfigDO extends BaseDO {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // ... 省略其它字段</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 密码</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @TableField(typeHandler = EncryptTypeHandler.class) // ② 添加 EncryptTypeHandler 处理器</span></span>
<span class="line"><span>    private String password;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><p>另外，在 <code>application.yaml</code> 配置文件中，可使用 <code>mybatis-plus.encryptor.password</code> 设置加密密钥。</p><p>字段加密后，只允许使用<strong>精准</strong>匹配，无法使用模糊匹配。示例代码如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>@Test // 测试使用 password 查询，可以查询到数据</span></span>
<span class="line"><span>public void testSelectPassword() {</span></span>
<span class="line"><span>    // mock 数据</span></span>
<span class="line"><span>    DataSourceConfigDO dbDataSourceConfig = randomPojo(DataSourceConfigDO.class);</span></span>
<span class="line"><span>    dataSourceConfigMapper.insert(dbDataSourceConfig);// @Sql: 先插入出一条存在的数据</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 调用</span></span>
<span class="line"><span>    DataSourceConfigDO result = dataSourceConfigMapper.selectOne(DataSourceConfigDO::getPassword,</span></span>
<span class="line"><span>            EncryptTypeHandler.encrypt(dbDataSourceConfig.getPassword())); // 重点：需要使用 EncryptTypeHandler 去加密查询字段！！！</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,97)]))}const l=e(r,[["render",t],["__file","mybatis.html.vue"]]),c=JSON.parse('{"path":"/project/rouyi-vue-pro/mybatis.html","title":"MyBatis 数据库","lang":"en-US","frontmatter":{"title":"MyBatis 数据库","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":38,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 实体类","slug":"_1-实体类","link":"#_1-实体类","children":[{"level":3,"title":"# 1.1 主键编号","slug":"_1-1-主键编号","link":"#_1-1-主键编号","children":[]},{"level":3,"title":"# 1.2 逻辑删除","slug":"_1-2-逻辑删除","link":"#_1-2-逻辑删除","children":[]},{"level":3,"title":"# 1.3 自动填充","slug":"_1-3-自动填充","link":"#_1-3-自动填充","children":[]},{"level":3,"title":"# 1.4 “复杂”字段类型","slug":"_1-4-复杂-字段类型","link":"#_1-4-复杂-字段类型","children":[]}]},{"level":2,"title":"# 2. 编码规范","slug":"_2-编码规范","link":"#_2-编码规范","children":[]},{"level":2,"title":"# 3. CRUD 接口","slug":"_3-crud-接口","link":"#_3-crud-接口","children":[{"level":3,"title":"# 3.1 selectOne","slug":"_3-1-selectone","link":"#_3-1-selectone","children":[]},{"level":3,"title":"# 3.2 selectCount","slug":"_3-2-selectcount","link":"#_3-2-selectcount","children":[]},{"level":3,"title":"# 3.3 selectList","slug":"_3-3-selectlist","link":"#_3-3-selectlist","children":[]},{"level":3,"title":"# 3.4 selectPage","slug":"_3-4-selectpage","link":"#_3-4-selectpage","children":[]},{"level":3,"title":"# 3.5 insertBatch","slug":"_3-5-insertbatch","link":"#_3-5-insertbatch","children":[]}]},{"level":2,"title":"# 4. 批量插入","slug":"_4-批量插入","link":"#_4-批量插入","children":[]},{"level":2,"title":"# 5. 条件构造器","slug":"_5-条件构造器","link":"#_5-条件构造器","children":[]},{"level":2,"title":"# 6. Mapper XML","slug":"_6-mapper-xml","link":"#_6-mapper-xml","children":[]},{"level":2,"title":"# 7. 字段加密","slug":"_7-字段加密","link":"#_7-字段加密","children":[]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":8.52,"words":2556},"filePathRelative":"project/rouyi-vue-pro/mybatis.md","localizedDate":"July 7, 2024"}');export{l as comp,c as data};
