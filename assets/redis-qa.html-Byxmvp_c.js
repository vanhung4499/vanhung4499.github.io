import{_ as n,o as h,c as t,a as i}from"./app-B9pwkC50.js";const c={},g=i('<h1 id="redis-12-cau-hoi-phong-van-pho-bien" tabindex="-1"><a class="header-anchor" href="#redis-12-cau-hoi-phong-van-pho-bien"><span>Redis: 12 câu hỏi phỏng vấn phổ biến</span></a></h1><p>Redis là một chủ đề không thể tránh khỏi trong các buổi phỏng vấn. Nếu bạn ghi rằng đã sử dụng Redis trong CV của mình, chắc chắn sẽ không thể thoát khỏi những câu hỏi về nó. Hôm nay, chúng ta sẽ mô phỏng cách một nhà tuyển dụng từng bước đánh giá kiến thức của ứng viên về Redis.</p><p>Ứng viên: Xin chào, tôi đến để phỏng vấn.</p><p>Nhà tuyển dụng: Chào Ứng viên. Tôi đã xem CV của bạn và thấy rằng bạn thành thạo Redis, vậy tôi sẽ hỏi bạn một vài câu hỏi liên quan đến Redis. Đầu tiên, Redis là đơn luồng hay đa luồng?</p><p>Ứng viên:</p><p>Redis sử dụng mô hình luồng khác nhau ở các phiên bản khác nhau. Trước phiên bản Redis 4.0, nó sử dụng mô hình đơn luồng, nhưng sau phiên bản 4.0, đã thêm hỗ trợ đa luồng.</p><p>Trước phiên bản 4.0, mặc dù nói rằng Redis là đơn luồng, nhưng chỉ có nghĩa là các thao tác I/O mạng và các lệnh Set và Get được thực hiện bởi một luồng duy nhất. Tuy nhiên, các chức năng như lưu trữ dữ liệu, đồng bộ hóa cụm vẫn sử dụng các luồng khác.</p><p>Sau phiên bản 4.0, thêm hỗ trợ đa luồng chủ yếu ở các chức năng xóa dữ liệu không đồng bộ, ví dụ như unlink key, flushdb async, flushall async, v.v.</p><p>Nhà tuyển dụng: Trả lời rất tốt. Vậy tại sao Redis lại chọn sử dụng đơn luồng trước phiên bản 4.0? Và tại sao đơn luồng lại nhanh như vậy?</p><p>Ứng viên:</p><p>Chọn đơn luồng chủ yếu vì nó đơn giản, không có sự cạnh tranh của các khóa, có thể hoàn thành mọi thao tác mà không cần khóa, không xảy ra tình trạng chết chốt và không tốn chi phí thời gian và hiệu năng do chuyển đổi luồng. Tuy nhiên, đơn luồng không thể tận dụng hết hiệu năng của CPU đa nhân.</p><p>Lý do tại sao đơn luồng lại nhanh, tôi nghĩ là do các nguyên nhân sau:</p><ul><li>Phần lớn các thao tác của Redis được thực hiện trong bộ nhớ, và hiệu suất thực thi trong bộ nhớ vốn đã nhanh, với các cấu trúc dữ liệu hiệu quả như bảng băm và bảng nhảy.</li><li>Sử dụng đơn luồng tránh được sự cạnh tranh của đa luồng, tiết kiệm thời gian và hiệu năng do chuyển đổi luồng, và không xảy ra tình trạng chết chốt.</li><li>Sử dụng cơ chế I/O đa đường để xử lý nhiều yêu cầu Socket của khách hàng, vì đây là mô hình I/O không chặn, giúp Redis có thể giao tiếp mạng hiệu quả, và quá trình đọc ghi I/O không bị chặn.</li></ul><p>Nhà tuyển dụng: Tốt lắm, vậy Redis làm thế nào để đảm bảo dữ liệu không bị mất?</p><p>Ứng viên:</p><p>Dữ liệu Redis được lưu trữ trong bộ nhớ, để đảm bảo không bị mất, cần lưu dữ liệu từ bộ nhớ xuống đĩa, để có thể khôi phục lại dữ liệu gốc từ đĩa sau khi khởi động lại máy chủ. Đây là việc lưu trữ dữ liệu của Redis. Redis có ba cách lưu trữ dữ liệu.</p><p><strong>1) Nhật ký AOF (Append Only File, ghi nối thêm vào tệp)</strong>: Ghi lại tất cả các lệnh thao tác và thêm vào tệp dưới dạng văn bản.</p><p><strong>2) Ảnh chụp RDB (Redis DataBase)</strong>: Ghi dữ liệu bộ nhớ vào đĩa dưới dạng nhị phân tại một thời điểm cụ thể.</p><p><strong>3) Lưu trữ hỗn hợp</strong>: Redis 4.0 bổ sung cách lưu trữ hỗn hợp, tích hợp ưu điểm của cả RDB và AOF.</p><p>Nhà tuyển dụng: Vậy hãy giải thích nguyên lý của AOF và RDB.</p><p>Ứng viên:</p><p>AOF sử dụng cách ghi nhật ký sau khi ghi dữ liệu. Redis thực hiện lệnh và ghi dữ liệu vào bộ nhớ trước, sau đó ghi nhật ký vào tệp. AOF ghi lại lệnh thao tác, không phải dữ liệu thực tế. Nếu sử dụng AOF để phục hồi lỗi, cần thực hiện lại toàn bộ nhật ký.</p><p>RDB sử dụng cách chụp ảnh bộ nhớ, ghi lại dữ liệu tại một thời điểm cụ thể thay vì lệnh thao tác. Do đó, khi phục hồi lỗi bằng RDB, chỉ cần đọc tệp RDB vào bộ nhớ, giúp phục hồi nhanh chóng.</p><p>Nhà tuyển dụng: Bạn vừa đề cập rằng AOF sử dụng cách &quot;ghi nhật ký sau khi ghi dữ liệu&quot;, trong khi MySQL chúng ta thường dùng lại sử dụng &quot;ghi nhật ký trước khi ghi dữ liệu&quot;. Vậy tại sao Redis lại thực hiện lệnh trước, sau đó mới ghi dữ liệu vào nhật ký?</p><p>Ứng viên: Điều này chủ yếu là do Redis không kiểm tra cú pháp lệnh trước khi ghi vào nhật ký, nên chỉ ghi lại các lệnh thực hiện thành công, tránh ghi lại các lệnh sai, và việc ghi nhật ký sau khi thực hiện lệnh không gây chặn các thao tác ghi hiện tại.</p><p>Nhà tuyển dụng: Vậy việc ghi nhật ký sau khi thực hiện lệnh có rủi ro gì không?</p><p>Ứng viên: Tôi... cái này tôi không biết.</p><p>Nhà tuyển dụng:</p><p>Được rồi, ghi nhật ký sau khi thực hiện lệnh có hai rủi ro chính:</p><ul><li><strong>Dữ liệu có thể bị mất</strong>: Nếu Redis vừa thực hiện xong lệnh và gặp sự cố, sẽ có nguy cơ mất lệnh đó.</li><li><strong>Có thể chặn các thao tác khác</strong>: Nhật ký AOF cũng được thực hiện trong luồng chính, vì vậy khi Redis ghi tệp nhật ký vào đĩa, sẽ chặn các thao tác tiếp theo.</li></ul><p>Tôi có một câu hỏi nữa, khi RDB chụp ảnh có chặn luồng không?</p><p>Ứng viên: Redis cung cấp hai lệnh để tạo tệp ảnh chụp RDB, là save và bgsave. Lệnh save thực hiện trong luồng chính, sẽ gây chặn. Lệnh bgsave sẽ tạo một tiến trình con để thực hiện việc ghi tệp RDB, tránh chặn luồng chính, đây là cấu hình mặc định của Redis RDB.</p><p>Nhà tuyển dụng: Khi tạo ảnh chụp nhanh RDB, dữ liệu có thể bị thay đổi không?</p><p>Ứng viên: Lệnh save là đồng bộ và sẽ chặn các lệnh của khách hàng, nhưng khi sử dụng lệnh bgsave, dữ liệu vẫn có thể bị thay đổi.</p><p>Nhà tuyển dụng: Vậy Redis giải quyết vấn đề cho phép dữ liệu thay đổi trong khi bgsave tạo ảnh chụp nhanh như thế nào?</p><p>Ứng viên: À, cái này tôi không rõ lắm...</p><p>Nhà tuyển dụng:</p><p>Điều này chủ yếu được thực hiện thông qua luồng con của bgsave, cụ thể như sau:</p><ul><li>Nếu luồng chính thực hiện thao tác đọc, luồng chính và luồng con bgsave sẽ không ảnh hưởng lẫn nhau.</li><li>Nếu luồng chính thực hiện thao tác ghi, dữ liệu bị thay đổi sẽ được sao chép một bản, sau đó luồng con bgsave sẽ ghi dữ liệu sao chép này vào tệp RDB, trong quá trình này, luồng chính vẫn có thể thay đổi dữ liệu gốc.</li></ul><p>Cần lưu ý rằng tần suất thực hiện RDB của Redis rất quan trọng, vì điều này sẽ ảnh hưởng đến tính toàn vẹn của dữ liệu ảnh chụp nhanh cũng như độ ổn định của Redis. Do đó, sau phiên bản Redis 4.0, cơ chế lưu trữ dữ liệu hỗn hợp AOF và RDB đã được thêm vào: ghi dữ liệu vào tệp dưới dạng RDB, sau đó lưu các lệnh thao tác tiếp theo dưới dạng AOF, vừa đảm bảo tốc độ khởi động lại của Redis, vừa giảm thiểu rủi ro mất dữ liệu.</p><p>Ứng viên: Học được rồi, học được rồi.</p><p>Nhà tuyển dụng: Vậy bạn hãy nói về cách Redis đạt được tính khả dụng cao.</p><p>Ứng viên: Redis đạt được tính khả dụng cao chủ yếu bằng ba cách: sao chép master-slave, chế độ Sentinel và cụm Redis.</p><p><strong>1) Sao chép master-slave</strong></p><p>Đồng bộ dữ liệu từ một máy chủ Redis chính sang nhiều máy chủ Redis phụ, tức là mô hình một chính nhiều phụ, tương tự như nguyên lý sao chép master-slave của MySQL.</p><p><strong>2) Chế độ Sentinel</strong></p><p>Khi sử dụng dịch vụ master-slave của Redis, nếu máy chủ master-slave của Redis gặp sự cố, cần phải khôi phục thủ công. Để giải quyết vấn đề này, Redis đã thêm chế độ Sentinel (vì chế độ Sentinel có thể giám sát máy chủ master-slave và cung cấp chức năng khôi phục tự động).</p><p><strong>3) Cụm Redis (Redis Cluster)</strong></p><p>Redis Cluster là một chế độ hoạt động phân tán phi tập trung, được giới thiệu trong phiên bản Redis 3.0. Nó phân phối dữ liệu trên các máy chủ khác nhau để giảm sự phụ thuộc vào một nút chính duy nhất, từ đó cải thiện hiệu suất đọc và ghi của dịch vụ Redis.</p><p>Nhà tuyển dụng: Sử dụng chế độ Sentinel, dữ liệu có bản sao đảm bảo tính khả dụng và có Sentinel giám sát, nếu master gặp sự cố sẽ chọn slave làm master. Điều này đã đáp ứng nhu cầu sản xuất của chúng ta. Vậy tại sao cần sử dụng chế độ cụm?</p><p>Ứng viên: Chế độ Sentinel thực chất vẫn là chế độ master-slave, trong chế độ master-slave, chúng ta có thể mở rộng khả năng đọc bằng cách thêm các nút slave, nhưng không thể mở rộng khả năng ghi và lưu trữ. Khả năng lưu trữ chỉ có thể đạt đến giới hạn của nút master. Vì vậy, để mở rộng khả năng ghi và lưu trữ, chúng ta cần đưa vào chế độ cụm.</p><p>Nhà tuyển dụng: Có nhiều nút master trong cụm, vậy Redis Cluster xác định chọn nút nào để lưu trữ dữ liệu như thế nào?</p><p>Ứng viên: Điều này có lẽ sử dụng một thuật toán hash nào đó, nhưng tôi không rõ lắm...</p><p>Nhà tuyển dụng: Được rồi, buổi phỏng vấn hôm nay kết thúc tại đây. Bạn về chờ thông báo phỏng vấn của chúng tôi.</p><p>Ứng viên: Vâng, cảm ơn nhà tuyển dụng. Bạn có thể cho tôi biết cách Redis Cluster thực hiện lựa chọn nút không?</p><p>Nhà tuyển dụng:</p><p>Redis Cluster sử dụng một thuật toán hash nhất quán để thực hiện lựa chọn nút. Redis Cluster chia thành 16384 Slot (vị trí). Mỗi cặp khóa-giá trị được ánh xạ vào một Slot theo khóa của nó, quy trình cụ thể như sau:</p><ol><li>Theo khóa của cặp khóa-giá trị, tính một giá trị 16 bit theo thuật toán CRC16.</li><li>Dùng giá trị 16 bit này chia lấy dư với 16384, nhận được số dư từ 0 đến 16383, mỗi số dư đại diện cho một Slot tương ứng.</li></ol><p>Mỗi nút Redis chịu trách nhiệm xử lý một phần các Slot. Giả sử có ba nút master ABC, mỗi nút xử lý các Slot như sau:</p><table><thead><tr><th>Nút</th><th>Xử lý Slot</th></tr></thead><tbody><tr><td>A</td><td>0-5000</td></tr><tr><td>B</td><td>5001-10000</td></tr><tr><td>C</td><td>10001-16383</td></tr></tbody></table><p>Như vậy, cụm Redis thực hiện lựa chọn nút.</p>',61),e=[g];function a(p,s){return h(),t("div",null,e)}const l=n(c,[["render",a],["__file","redis-qa.html.vue"]]),o=JSON.parse('{"path":"/interview/knowledge/redis-qa.html","title":"Redis Interview","lang":"en-US","frontmatter":{"title":"Redis Interview","tags":["interview","redis"],"categories":["interview"],"order":5,"description":"Redis: 12 câu hỏi phỏng vấn phổ biến Redis là một chủ đề không thể tránh khỏi trong các buổi phỏng vấn. Nếu bạn ghi rằng đã sử dụng Redis trong CV của mình, chắc chắn sẽ không t...","head":[["meta",{"property":"og:url","content":"https://vanhung4499.github.io/interview/knowledge/redis-qa.html"}],["meta",{"property":"og:site_name","content":"VanHung4499"}],["meta",{"property":"og:title","content":"Redis Interview"}],["meta",{"property":"og:description","content":"Redis: 12 câu hỏi phỏng vấn phổ biến Redis là một chủ đề không thể tránh khỏi trong các buổi phỏng vấn. Nếu bạn ghi rằng đã sử dụng Redis trong CV của mình, chắc chắn sẽ không t..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-07-05T10:10:42.000Z"}],["meta",{"property":"article:author","content":"Hung Nguyen"}],["meta",{"property":"article:tag","content":"interview"}],["meta",{"property":"article:tag","content":"redis"}],["meta",{"property":"article:modified_time","content":"2024-07-05T10:10:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis Interview\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-05T10:10:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hung Nguyen\\",\\"url\\":\\"https://vanhung4499.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1720174242000,"updatedTime":1720174242000,"contributors":[{"name":"Hung Nguyen","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":8.51,"words":2554},"filePathRelative":"interview/knowledge/redis-qa.md","localizedDate":"July 5, 2024","excerpt":"\\n<p>Redis là một chủ đề không thể tránh khỏi trong các buổi phỏng vấn. Nếu bạn ghi rằng đã sử dụng Redis trong CV của mình, chắc chắn sẽ không thể thoát khỏi những câu hỏi về nó. Hôm nay, chúng ta sẽ mô phỏng cách một nhà tuyển dụng từng bước đánh giá kiến thức của ứng viên về Redis.</p>\\n<p>Ứng viên: Xin chào, tôi đến để phỏng vấn.</p>","autoDesc":true}');export{l as comp,o as data};
