import{_ as n,o as e,c as s,a as i}from"./app-5QVbWi7Z.js";const l={};function p(r,a){return e(),s("div",null,a[0]||(a[0]=[i(`<h1 id="文件存储-上传下载" tabindex="-1"><a class="header-anchor" href="#文件存储-上传下载"><span>文件存储（上传下载）</span></a></h1><p>项目支持将文件上传到三类存储器：</p><ol><li>兼容 S3 协议的对象存储：支持 MinIO、腾讯云 COS、七牛云 Kodo、华为云 OBS、亚马逊 S3 等等。</li><li>磁盘存储：本地、FTP 服务器、SFTP 服务器。</li><li>数据库存储：MySQL、Oracle、PostgreSQL、SQL Server 等等。</li></ol><p>技术选型？</p><ul><li>优先，✔ 推荐方案 1。如果无法使用云服务，可以自己搭建一个 MinIO 服务。参见 <a href="https://www.iocoder.cn/Spring-Boot/MinIO/?yudao" target="_blank" rel="noopener noreferrer">《芋道 Spring Boot 对象存储 MinIO 入门 》</a> 文章。</li><li>其次，推荐方案 3。数据库的主从机制可以实现高可用，备份也方便，少量小文件问题不大。</li><li>最后，× 不推荐方案 2。主要是实现高可用比较困难，无法实现故障转移。</li></ul><h2 id="_1-快速入门" tabindex="-1"><a class="header-anchor" href="#_1-快速入门"><span><a href="#_1-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8">#</a> 1. 快速入门</span></a></h2><p>本小节，我们来添加个文件配置，并使用它上传下载文件。</p><h3 id="_1-1-新增配置" tabindex="-1"><a class="header-anchor" href="#_1-1-新增配置"><span><a href="#_1-1-%E6%96%B0%E5%A2%9E%E9%85%8D%E7%BD%AE">#</a> 1.1 新增配置</span></a></h3><p>① 打开 [基础设施 -&gt; 文件管理 -&gt; 文件配置] 菜单，进入文件配置的界面。</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/上传下载/01.png" alt="文件配置" tabindex="0" loading="lazy"><figcaption>文件配置</figcaption></figure><p>② 点击 [新增] 按钮，选择存储器为【S3 对象存储器】，并填写七牛云的配置。如下图：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/上传下载/02.png" alt="S3 对象存储器" tabindex="0" loading="lazy"><figcaption>S3 对象存储器</figcaption></figure><ul><li>节点地址：<a href="http://s3.cn-south-1.qiniucs.com" target="_blank" rel="noopener noreferrer">s3.cn-south-1.qiniucs.com</a></li><li>存储 bucket：ruoyi-vue-pro</li><li>accessKey：3TvrJ70gl2Gt6IBe7_IZT1F6i_k0iMuRtyEv4EyS</li><li>accessSecret：wd0tbVBYlp0S-ihA8Qg2hPLncoP83wyrIq24OZuY</li><li>自定义域名：<a href="http://test.yudao.iocoder.cn" target="_blank" rel="noopener noreferrer">http://test.yudao.iocoder.cn</a></li></ul><p>友善的眼神！</p><p>上述七牛云的配置，是艿艿为了大家方便体验，请勿在测试或生产环境体验。</p><p>③ 添加完后，点击该配置所在行的 [测试] 按钮，测试配置是否正确。</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/上传下载/03.png" alt="测试配置" tabindex="0" loading="lazy"><figcaption>测试配置</figcaption></figure><p>④ 测试通过后，点击该配置所在行的 [主配置] 按钮，设置它为<strong>默认</strong>的配置，后续使用它进行文件的上传。</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/上传下载/07.png" alt="测试配置" tabindex="0" loading="lazy"><figcaption>测试配置</figcaption></figure><h3 id="_1-2-上传文件" tabindex="-1"><a class="header-anchor" href="#_1-2-上传文件"><span><a href="#_1-2-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6">#</a> 1.2 上传文件</span></a></h3><p>① 点击 [基础设施 -&gt; 文件管理 -&gt; 文件列表] 菜单，进入文件列表的界面。</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/上传下载/04.png" alt="文件列表" tabindex="0" loading="lazy"><figcaption>文件列表</figcaption></figure><p>② 点击 [上传文件] 按钮，选择要上传的文件。</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/上传下载/05.png" alt="文件列表" tabindex="0" loading="lazy"><figcaption>文件列表</figcaption></figure><p>③ 上传完成后，如果想要删除，可点击该文件所在行的 [删除] 按钮。</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/上传下载/06.png" alt="文件列表" tabindex="0" loading="lazy"><figcaption>文件列表</figcaption></figure><h2 id="_2-文件上传" tabindex="-1"><a class="header-anchor" href="#_2-文件上传"><span><a href="#_2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0">#</a> 2. 文件上传</span></a></h2><p>项目提供了 2 种文件上传的方式，分别适合前端、后端使用。</p><h3 id="_2-1-方式一-前端上传" tabindex="-1"><a class="header-anchor" href="#_2-1-方式一-前端上传"><span><a href="#_2-1-%E6%96%B9%E5%BC%8F%E4%B8%80-%E5%89%8D%E7%AB%AF%E4%B8%8A%E4%BC%A0">#</a> 2.1 方式一：前端上传</span></a></h3><p><a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-infra/yudao-module-infra-biz/src/main/java/cn/iocoder/yudao/module/infra/controller/admin/file/FileController.java" target="_blank" rel="noopener noreferrer">FileController</a> 提供了 <code>/admin-api/infra/file/upload</code> RESTful API，用于前端直接上传文件。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>// FileController.java</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@PostMapping(&quot;/upload&quot;)</span></span>
<span class="line"><span>@Operation(summary = &quot;上传文件&quot;)</span></span>
<span class="line"><span>@OperateLog(logArgs = false) // 上传文件，没有记录操作日志的必要</span></span>
<span class="line"><span>public CommonResult&lt;String&gt; uploadFile(FileUploadReqVO uploadReqVO) throws Exception {</span></span>
<span class="line"><span>    MultipartFile file = uploadReqVO.getFile();</span></span>
<span class="line"><span>    String path = uploadReqVO.getPath();</span></span>
<span class="line"><span>    return success(fileService.createFile(file.getOriginalFilename(), path,</span></span>
<span class="line"><span>        IoUtil.readBytes(file.getInputStream())));</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>前端上传文件的代码如何实现，可见：</p><ul><li>文件列表，文件上传 <a href="https://github.com/yudaocode/yudao-ui-admin-vue2/blob/master/src/views/infra/file/index.vue#L59-L76" target="_blank" rel="noopener noreferrer"><code>index.vue</code></a></li><li>个人中心，头像修改 <a href="https://github.com/yudaocode/yudao-ui-admin-vue2/blob/master/src/views/system/user/profile/userAvatar.vue#L122-L135" target="_blank" rel="noopener noreferrer"><code>userAvatar.vue</code></a></li></ul><h3 id="_2-2-方式二-后端上传" tabindex="-1"><a class="header-anchor" href="#_2-2-方式二-后端上传"><span><a href="#_2-2-%E6%96%B9%E5%BC%8F%E4%BA%8C-%E5%90%8E%E7%AB%AF%E4%B8%8A%E4%BC%A0">#</a> 2.2 方式二：后端上传</span></a></h3><p><code>yudao-module-infra</code> 的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-infra/yudao-module-infra-api/src/main/java/cn/iocoder/yudao/module/infra/api/file/FileApi.java" target="_blank" rel="noopener noreferrer">FileApi</a> 提供了 <code>#createFile(...)</code> 方法，用于后端需要上传文件的逻辑。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>// FileApi.java</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * 保存文件，并返回文件的访问路径</span></span>
<span class="line"><span> *</span></span>
<span class="line"><span> * @param path 文件路径</span></span>
<span class="line"><span> * @param content 文件内容</span></span>
<span class="line"><span> * @return 文件路径</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>String createFile(String path, byte[] content);</span></span></code></pre></div><p>例如说，个人中心修改头像时，需要进行头像的上传。如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/上传下载/08.png" alt="后端上传" tabindex="0" loading="lazy"><figcaption>后端上传</figcaption></figure><p>注意，需要使用到后端上传的 Maven 模块，需要引入 <code>yudao-module-infra-api</code> 依赖。例如说 <code>yudao-module-system-biz</code> 模块的 <code>pom.xml</code> 文件，引用如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;cn.iocoder.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;yudao-module-infra-api&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;\${revision}&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div><h2 id="_3-文件下载" tabindex="-1"><a class="header-anchor" href="#_3-文件下载"><span><a href="#_3-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD">#</a> 3. 文件下载</span></a></h2><p>文件上传成功后，返回的是<strong>完整的 URL 访问路径</strong>，例如说 <a href="http://test.yudao.iocoder.cn/822aebded6e6414e912534c6091771a4.jpg" target="_blank" rel="noopener noreferrer">http://test.yudao.iocoder.cn/822aebded6e6414e912534c6091771a4.jpg</a> 。</p><p>不同的文件存储器，返回的 URL 路径的规则是不同的：</p><p>① 当存储器是【S3 对象存储】时，支持 HTTP 访问，所以直接使用 S3 对象存储返回的 URL 路径即可。</p><p>② 当存储器是【数据库】【本地磁盘】等时，它们只支持存储，所以需要 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-infra/yudao-module-infra-biz/src/main/java/cn/iocoder/yudao/module/infra/controller/admin/file/FileController.java" target="_blank" rel="noopener noreferrer">FileController</a> 提供的 <code>/admin-api/infra/file/{configId}/get/{path}</code> RESTful API，读取文件内容后返回。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>// FileController.java</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@GetMapping(&quot;/{configId}/get/**&quot;)</span></span>
<span class="line"><span>@PermitAll</span></span>
<span class="line"><span>@Operation(summary = &quot;下载文件&quot;)</span></span>
<span class="line"><span>@Parameter(name = &quot;configId&quot;, description = &quot;配置编号&quot;,  required = true)</span></span>
<span class="line"><span>public void getFileContent(HttpServletRequest request,</span></span>
<span class="line"><span>                           HttpServletResponse response,</span></span>
<span class="line"><span>                           @PathVariable(&quot;configId&quot;) Long configId) throws Exception {</span></span>
<span class="line"><span>    // 获取请求的路径</span></span>
<span class="line"><span>    String path = StrUtil.subAfter(request.getRequestURI(), &quot;/get/&quot;, false);</span></span>
<span class="line"><span>    if (StrUtil.isEmpty(path)) {</span></span>
<span class="line"><span>        throw new IllegalArgumentException(&quot;结尾的 path 路径必须传递&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 读取内容</span></span>
<span class="line"><span>    byte[] content = fileService.getFileContent(configId, path);</span></span>
<span class="line"><span>    if (content == null) {</span></span>
<span class="line"><span>        log.warn(&quot;[getFileContent][configId({}) path({}) 文件不存在]&quot;, configId, path);</span></span>
<span class="line"><span>        response.setStatus(HttpStatus.NOT_FOUND.value());</span></span>
<span class="line"><span>        return;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    ServletUtils.writeAttachment(response, path, content);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-文件客户端" tabindex="-1"><a class="header-anchor" href="#_4-文件客户端"><span><a href="#_4-%E6%96%87%E4%BB%B6%E5%AE%A2%E6%88%B7%E7%AB%AF">#</a> 4. 文件客户端</span></a></h2><p>在 <code>yudao-module-infra-biz</code> 模块中，它的 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-infra/yudao-module-infra-biz/src/main/java/cn/iocoder/yudao/module/infra/framework/file/package-info.java" target="_blank" rel="noopener noreferrer"><code>framework/file</code></a> 包下，定义了 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-infra/yudao-module-infra-biz/src/main/java/cn/iocoder/yudao/module/infra/framework/file/core/client/FileClient.java" target="_blank" rel="noopener noreferrer">FileClient</a> 接口，抽象了文件客户端的方法。代码如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>public interface FileClient {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 获得客户端编号</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @return 客户端编号</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    Long getId();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 上传文件</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param content 文件流</span></span>
<span class="line"><span>     * @param path 相对路径</span></span>
<span class="line"><span>     * @return 完整路径，即 HTTP 访问地址</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    String upload(byte[] content, String path);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 删除文件</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param path 相对路径</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    void delete(String path);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 获得文件的内容</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param path 相对路径</span></span>
<span class="line"><span>     * @return 文件的内容</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    byte[] getContent(String path);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FileClient 有 5 个实现类，使用不同存储器进行文件的上传与下载。UML 类图如所示：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/上传下载/09.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>文件上传的调用的 UML 时序图如下所示：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/上传下载/10.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_5-s3-对象存储的配置" tabindex="-1"><a class="header-anchor" href="#_5-s3-对象存储的配置"><span><a href="#_5-s3-%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E9%85%8D%E7%BD%AE">#</a> 5. S3 对象存储的配置</span></a></h2><p>做的不错的云存储服务，都是兼容 S3 协议的。如何获取对应的 S3 配置，艿艿整理到了 <a href="https://github.com/YunaiV/yudao-cloud/blob/master/yudao-module-infra/yudao-module-infra-biz/src/main/java/cn/iocoder/yudao/module/infra/framework/file/core/client/FileClientConfig.java" target="_blank" rel="noopener noreferrer">S3FileClientConfig</a> 配置类。</p><p>有一点要注意，云存储服务的 Bucket 需要设置为<strong>公共读</strong>，不然 URL 无法访问到文件。</p><p>并且，最好使用自定义域名，方便迁移到不同的云存储服务。</p><h2 id="_6-前端直传-s3-存储【推荐】" tabindex="-1"><a class="header-anchor" href="#_6-前端直传-s3-存储【推荐】"><span><a href="#_6-%E5%89%8D%E7%AB%AF%E7%9B%B4%E4%BC%A0-s3-%E5%AD%98%E5%82%A8%E3%80%90%E6%8E%A8%E8%8D%90%E3%80%91">#</a> 6. 前端直传 S3 存储【推荐】</span></a></h2><p>友情提示：目前仅 yudao-ui-admin-vue3 前端项目支持，Vue3 + Element Plus 版本</p><p>前面小节的文件上传，都是 <code>前端 =&gt; 后端 =&gt; S3 存储器</code> 的方式。这种方式，有一个问题，就是文件的流量会经过后端，如果后端的服务器带宽不够，就会影响文件的上传速度。例如说：上传文件有 10MB，后端服务器带宽只有 1MB，那么上传文件就需要 10 秒。如果多个人上传文件，就会导致后端服务器的带宽被占满。</p><p>因此，更加推荐采用 <code>前端 =&gt; S3 存储器</code> 的方式，即前端直传 S3 存储器。这样，文件的流量不会经过后端，上传速度会更快。例如说：上传文件有 10MB，用户的带宽有 100MB，那么上传文件就需要 0.1 秒。</p><p>下面，我们以七牛云的配置为例，演示如何在前端直传 S3 存储器。当然，其它阿里云、腾讯云、华为云等等都是类似的。</p><h3 id="_6-1-新增-s3-配置" tabindex="-1"><a class="header-anchor" href="#_6-1-新增-s3-配置"><span><a href="#_6-1-%E6%96%B0%E5%A2%9E-s3-%E9%85%8D%E7%BD%AE">#</a> 6.1 新增 S3 配置</span></a></h3><p>在 [基础设施 -&gt; 文件管理 -&gt; 文件配置] 菜单，新增一个 S3 对象存储器的配置，填写七牛云的配置，并设置它为<strong>默认</strong>的配置。结果如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/上传下载/前端直传-新增配置.png" alt="新增配置" tabindex="0" loading="lazy"><figcaption>新增配置</figcaption></figure><p>实际上，这个步骤和「2.1 新增步骤」是一样的哈！</p><h3 id="_6-2-配置-s3-跨域" tabindex="-1"><a class="header-anchor" href="#_6-2-配置-s3-跨域"><span><a href="#_6-2-%E9%85%8D%E7%BD%AE-s3-%E8%B7%A8%E5%9F%9F">#</a> 6.2 配置 S3 跨域</span></a></h3><p>友情提示：这个步骤，是为了解决前端直传 S3 存储器的跨域问题。</p><ul><li>七牛云的跨域配置：参见 <a href="https://developer.qiniu.com/kodo/6094/set-cors" target="_blank" rel="noopener noreferrer">《设置跨域资源共享 》</a></li><li>阿里云的跨域配置：参见 <a href="https://developer.aliyun.com/article/1168029" target="_blank" rel="noopener noreferrer">《阿里云 OSS 设置跨域访问》</a></li><li>腾讯云的跨域配置：参见 <a href="https://cloud.tencent.com/document/product/436/13318" target="_blank" rel="noopener noreferrer">《设置跨域访问》</a></li></ul><p>如下是七牛云的跨域配置截图：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/上传下载/前端直传-跨域配置.png" alt="跨域配置" tabindex="0" loading="lazy"><figcaption>跨域配置</figcaption></figure><h3 id="_6-3-配置前端直传" tabindex="-1"><a class="header-anchor" href="#_6-3-配置前端直传"><span><a href="#_6-3-%E9%85%8D%E7%BD%AE%E5%89%8D%E7%AB%AF%E7%9B%B4%E4%BC%A0">#</a> 6.3 配置前端直传</span></a></h3><p>修改 <code>yudao-ui-admin-vue3</code> 前端项目的配置文件的 <code>VITE_UPLOAD_TYPE</code> 为 <code>client</code> 前端直传模式。例如说，你是本地环境，则修改 <code>.env.local</code> 文件，如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/上传下载/前端直传-前端配置.png" alt="前端配置" tabindex="0" loading="lazy"><figcaption>前端配置</figcaption></figure><h3 id="_6-4-测试上传文件" tabindex="-1"><a class="header-anchor" href="#_6-4-测试上传文件"><span><a href="#_6-4-%E6%B5%8B%E8%AF%95%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6">#</a> 6.4 测试上传文件</span></a></h3><p>点击 [基础设施 -&gt; 文件管理 -&gt; 文件列表] 菜单，测试上传文件。结果如下图所示：</p><figure><img src="https://cloud.iocoder.cn/img/后端手册/上传下载/前端直传-测试上传.png" alt="测试上传" tabindex="0" loading="lazy"><figcaption>测试上传</figcaption></figure><p>具体的代码实现：</p><ul><li>前端：<code>src/components/UploadFile/src/useUpload.ts</code> 文件</li><li>后端：FileController 的 <code>/presigned-url</code> RESTful API</li></ul>`,79)]))}const o=n(l,[["render",p],["__file","file.html.vue"]]),d=JSON.parse('{"path":"/project/yudao-cloud/file.html","title":"文件存储（上传下载）","lang":"en-US","frontmatter":{"title":"文件存储（上传下载）","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":34,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 快速入门","slug":"_1-快速入门","link":"#_1-快速入门","children":[{"level":3,"title":"# 1.1 新增配置","slug":"_1-1-新增配置","link":"#_1-1-新增配置","children":[]},{"level":3,"title":"# 1.2 上传文件","slug":"_1-2-上传文件","link":"#_1-2-上传文件","children":[]}]},{"level":2,"title":"# 2. 文件上传","slug":"_2-文件上传","link":"#_2-文件上传","children":[{"level":3,"title":"# 2.1 方式一：前端上传","slug":"_2-1-方式一-前端上传","link":"#_2-1-方式一-前端上传","children":[]},{"level":3,"title":"# 2.2 方式二：后端上传","slug":"_2-2-方式二-后端上传","link":"#_2-2-方式二-后端上传","children":[]}]},{"level":2,"title":"# 3. 文件下载","slug":"_3-文件下载","link":"#_3-文件下载","children":[]},{"level":2,"title":"# 4. 文件客户端","slug":"_4-文件客户端","link":"#_4-文件客户端","children":[]},{"level":2,"title":"# 5. S3 对象存储的配置","slug":"_5-s3-对象存储的配置","link":"#_5-s3-对象存储的配置","children":[]},{"level":2,"title":"# 6. 前端直传 S3 存储【推荐】","slug":"_6-前端直传-s3-存储【推荐】","link":"#_6-前端直传-s3-存储【推荐】","children":[{"level":3,"title":"# 6.1 新增 S3 配置","slug":"_6-1-新增-s3-配置","link":"#_6-1-新增-s3-配置","children":[]},{"level":3,"title":"# 6.2 配置 S3 跨域","slug":"_6-2-配置-s3-跨域","link":"#_6-2-配置-s3-跨域","children":[]},{"level":3,"title":"# 6.3 配置前端直传","slug":"_6-3-配置前端直传","link":"#_6-3-配置前端直传","children":[]},{"level":3,"title":"# 6.4 测试上传文件","slug":"_6-4-测试上传文件","link":"#_6-4-测试上传文件","children":[]}]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":8.49,"words":2548},"filePathRelative":"project/yudao-cloud/file.md","localizedDate":"July 7, 2024"}');export{o as comp,d as data};
