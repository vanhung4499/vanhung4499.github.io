import{_ as e,o as n,c as s,a as i}from"./app-5QVbWi7Z.js";const p={};function t(d,a){return n(),s("div",null,a[0]||(a[0]=[i('<h1 id="【交易】快递发货" tabindex="-1"><a class="header-anchor" href="#【交易】快递发货"><span>【交易】快递发货</span></a></h1><h2 id="_1-快递公司" tabindex="-1"><a class="header-anchor" href="#_1-快递公司"><span><a href="#_1-%E5%BF%AB%E9%80%92%E5%85%AC%E5%8F%B8">#</a> 1. 快递公司</span></a></h2><h3 id="_1-1-表结构" tabindex="-1"><a class="header-anchor" href="#_1-1-表结构"><span><a href="#_1-1-%E8%A1%A8%E7%BB%93%E6%9E%84">#</a> 1.1 表结构</span></a></h3><p>快递公司，由 <code>yudao-module-trade-biz</code> 后端模块的 <code>delivery</code> 包的 DeliveryExpressService 实现，只有一个表：</p><blockquote><p>省略 creator/create_time/updater/update_time/deleted/tenant_id 等通用字段</p></blockquote><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE `trade_delivery_express` (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;编号&#39;,</span></span>\n<span class="line"><span>  `code` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;快递公司编码&#39;,</span></span>\n<span class="line"><span>  `name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;快递公司名称&#39;,</span></span>\n<span class="line"><span>  `logo` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &#39;快递公司 logo&#39;,</span></span>\n<span class="line"><span>  `sort` int NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;排序&#39;,</span></span>\n<span class="line"><span>  `status` tinyint NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;状态&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`) USING BTREE</span></span>\n<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&#39;快递公司&#39;;</span></span></code></pre></div><p>比较简单，就是存储下快递公司的基本信息。</p><h3 id="_1-2-管理后台" tabindex="-1"><a class="header-anchor" href="#_1-2-管理后台"><span><a href="#_1-2-%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0">#</a> 1.2 管理后台</span></a></h3><p>对应 [商城系统 -&gt; 订单中心 -&gt; 配送管理 -&gt; 快递发货 -&gt; 快递公司] 菜单，对应 <code>yudao-ui-admin-vue3</code> 项目的 <code>views/mall/trade/delivery/express</code> 目录。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/商城手册/快递发货/快递公司-管理后台.png" alt="快递公司" tabindex="0" loading="lazy"><figcaption>快递公司</figcaption></figure><h3 id="_1-3-物流信息" tabindex="-1"><a class="header-anchor" href="#_1-3-物流信息"><span><a href="#_1-3-%E7%89%A9%E6%B5%81%E4%BF%A1%E6%81%AF">#</a> 1.3 物流信息</span></a></h3><p>由 <code>yudao-module-trade-biz</code> 后端模块的 ExpressClient 实现，已对接快递鸟、快递 100 等快递查询接口。</p><h2 id="_2-快递运费模板" tabindex="-1"><a class="header-anchor" href="#_2-快递运费模板"><span><a href="#_2-%E5%BF%AB%E9%80%92%E8%BF%90%E8%B4%B9%E6%A8%A1%E6%9D%BF">#</a> 2. 快递运费模板</span></a></h2><h3 id="_2-1-表结构" tabindex="-1"><a class="header-anchor" href="#_2-1-表结构"><span><a href="#_2-1-%E8%A1%A8%E7%BB%93%E6%9E%84">#</a> 2.1 表结构</span></a></h3><p>运费模版，由 <code>yudao-module-trade-biz</code> 后端模块的 <code>delivery</code> 包的 DeliveryExpressTemplateService 实现，包括一个主表 + 两个子表：</p><figure><img src="https://doc.iocoder.cn/img/商城手册/快递发货/运费模版-表关系.png" alt="表关系" tabindex="0" loading="lazy"><figcaption>表关系</figcaption></figure><h4 id="_2-1-1-运费模版表" tabindex="-1"><a class="header-anchor" href="#_2-1-1-运费模版表"><span><a href="#_2-1-1-%E8%BF%90%E8%B4%B9%E6%A8%A1%E7%89%88%E8%A1%A8">#</a> 2.1.1 运费模版表</span></a></h4><blockquote><p>省略 creator/create_time/updater/update_time/deleted/tenant_id 等通用字段</p></blockquote><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE `trade_delivery_express_template` (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;编号&#39;,</span></span>\n<span class="line"><span>  `name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;模板名称&#39;,</span></span>\n<span class="line"><span>  `charge_mode` tinyint NOT NULL COMMENT &#39;配送计费方式&#39;,</span></span>\n<span class="line"><span>  `sort` int NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;排序&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`) USING BTREE</span></span>\n<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&#39;快递运费模板&#39;;</span></span></code></pre></div><p>比较简单，关键信息都在两个子表中。</p><p>唯一需要注意的是，<code>charge_mode</code> 字段，表示配送计费方式，由 DeliveryExpressChargeModeEnum 枚举，有三种：按件、按重量、按体积。</p><h4 id="_2-1-2-运费模板【计费】配置表" tabindex="-1"><a class="header-anchor" href="#_2-1-2-运费模板【计费】配置表"><span><a href="#_2-1-2-%E8%BF%90%E8%B4%B9%E6%A8%A1%E6%9D%BF%E3%80%90%E8%AE%A1%E8%B4%B9%E3%80%91%E9%85%8D%E7%BD%AE%E8%A1%A8">#</a> 2.1.2 运费模板【计费】配置表</span></a></h4><blockquote><p>省略 creator/create_time/updater/update_time/deleted/tenant_id 等通用字段</p></blockquote><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE `trade_delivery_express_template_charge` (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;编号，自增&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `template_id` bigint NOT NULL COMMENT &#39;快递运费模板编号&#39;,</span></span>\n<span class="line"><span>  `charge_mode` tinyint NOT NULL COMMENT &#39;配送计费方式&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `area_ids` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;配送区域 id&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `start_count` double NOT NULL COMMENT &#39;首件数量&#39;,</span></span>\n<span class="line"><span>  `start_price` int NOT NULL COMMENT &#39;起步价，单位：分&#39;,</span></span>\n<span class="line"><span>  `extra_count` double NOT NULL COMMENT &#39;续件数量&#39;,</span></span>\n<span class="line"><span>  `extra_price` int NOT NULL COMMENT &#39;额外价，单位：分&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`) USING BTREE</span></span>\n<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&#39;快递运费模板计费配置&#39;;</span></span></code></pre></div><p>① <code>template_id</code> 字段：关联 <code>trade_delivery_express_template</code> 表的 <code>id</code> 字段，表示该计费配置属于哪个运费模版。而 <code>charge_mode</code> 字段，只是进行冗余存储，减少查询次数。</p><p>② <code>area_ids</code> 字段：配送区域 id 数组，存储的区级别。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/商城手册/快递发货/运费计费配置-配送区域.png" alt="配送区域" tabindex="0" loading="lazy"><figcaption>配送区域</figcaption></figure><p>③ <code>start_count</code>、<code>start_price</code>、<code>extra_count</code>、<code>extra_price</code> 字段：配送计费的具体配置。</p><h4 id="_2-1-3-运费模板【包邮】配置" tabindex="-1"><a class="header-anchor" href="#_2-1-3-运费模板【包邮】配置"><span><a href="#_2-1-3-%E8%BF%90%E8%B4%B9%E6%A8%A1%E6%9D%BF%E3%80%90%E5%8C%85%E9%82%AE%E3%80%91%E9%85%8D%E7%BD%AE">#</a> 2.1.3 运费模板【包邮】配置</span></a></h4><blockquote><p>省略 creator/create_time/updater/update_time/deleted/tenant_id 等通用字段</p></blockquote><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE `trade_delivery_express_template_free` (</span></span>\n<span class="line"><span>  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#39;编号&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `template_id` bigint NOT NULL COMMENT &#39;快递运费模板编号&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `area_ids` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;包邮区域 id&#39;,</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  `free_price` int NOT NULL COMMENT &#39;包邮金额，单位：分&#39;,</span></span>\n<span class="line"><span>  `free_count` int NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;包邮件数,&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`) USING BTREE</span></span>\n<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&#39;快递运费模板包邮配置&#39;;</span></span></code></pre></div><p>整体类似 <code>trade_delivery_express_template_charge</code> 表，就不重复赘述。</p><h3 id="_2-2-管理后台" tabindex="-1"><a class="header-anchor" href="#_2-2-管理后台"><span><a href="#_2-2-%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0">#</a> 2.2 管理后台</span></a></h3><p>对应 [商城系统 -&gt; 交易系统 -&gt; 快递发货 -&gt; 快递发货 -&gt; 运费模版] 菜单，对应 <code>yudao-ui-admin-vue3</code> 项目的 <code>views/mall/trade/delivery/expressTemplate</code> 目录。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/商城手册/快递发货/运费模版-管理后台.png" alt="运费模版" tabindex="0" loading="lazy"><figcaption>运费模版</figcaption></figure><h3 id="_2-3-运费计算" tabindex="-1"><a class="header-anchor" href="#_2-3-运费计算"><span><a href="#_2-3-%E8%BF%90%E8%B4%B9%E8%AE%A1%E7%AE%97">#</a> 2.3 运费计算</span></a></h3><p>由 <code>yudao-module-trade-biz</code> 后端模块的 TradeDeliveryPriceCalculator 实现订单的运费计算。</p><h2 id="_3-配送配置" tabindex="-1"><a class="header-anchor" href="#_3-配送配置"><span><a href="#_3-%E9%85%8D%E9%80%81%E9%85%8D%E7%BD%AE">#</a> 3. 配送配置</span></a></h2><figure><img src="https://doc.iocoder.cn/img/商城手册/快递发货/配送配置.png" alt="配送配置" tabindex="0" loading="lazy"><figcaption>配送配置</figcaption></figure><ul><li>SQL 对应 <code>trade_config</code> 表的 <code>delivery_</code> 开头的字段。</li><li>前端对应 <code>yudao-ui-admin-vue3</code> 项目的 <code>views/mall/trade/config/index.vue</code> 目录</li><li>后端对应 <code>yudao-module-trade-biz</code> 项目的 TradeConfigController 类</li></ul>',40)]))}const c=e(p,[["render",t],["__file","trade-delivery-express.html.vue"]]),r=JSON.parse('{"path":"/project/rouyi-vue-pro/mall/trade-delivery-express.html","title":"【交易】快递发货","lang":"en-US","frontmatter":{"title":"【交易】快递发货","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":98,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 快递公司","slug":"_1-快递公司","link":"#_1-快递公司","children":[{"level":3,"title":"# 1.1 表结构","slug":"_1-1-表结构","link":"#_1-1-表结构","children":[]},{"level":3,"title":"# 1.2 管理后台","slug":"_1-2-管理后台","link":"#_1-2-管理后台","children":[]},{"level":3,"title":"# 1.3 物流信息","slug":"_1-3-物流信息","link":"#_1-3-物流信息","children":[]}]},{"level":2,"title":"# 2. 快递运费模板","slug":"_2-快递运费模板","link":"#_2-快递运费模板","children":[{"level":3,"title":"# 2.1 表结构","slug":"_2-1-表结构","link":"#_2-1-表结构","children":[]},{"level":3,"title":"# 2.2 管理后台","slug":"_2-2-管理后台","link":"#_2-2-管理后台","children":[]},{"level":3,"title":"# 2.3 运费计算","slug":"_2-3-运费计算","link":"#_2-3-运费计算","children":[]}]},{"level":2,"title":"# 3. 配送配置","slug":"_3-配送配置","link":"#_3-配送配置","children":[]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":4.11,"words":1233},"filePathRelative":"project/rouyi-vue-pro/mall/trade-delivery-express.md","localizedDate":"July 7, 2024"}');export{c as comp,r as data};
