import{_ as t,o as d,c as e,a as r}from"./app-BRTHG7K9.js";const a={},o=r('<h1 id="流程发起、取消、重新发起" tabindex="-1"><a class="header-anchor" href="#流程发起、取消、重新发起"><span>流程发起、取消、重新发起</span></a></h1><p>相关视频：</p><ul><li><a href="https://t.zsxq.com/04jyvNfqj" target="_blank" rel="noopener noreferrer">11、如何实现流程的发起？</a></li><li><a href="https://t.zsxq.com/046UFqRzz" target="_blank" rel="noopener noreferrer">12、如何实现我的流程列表？</a></li><li><a href="https://t.zsxq.com/04aM72rzv" target="_blank" rel="noopener noreferrer">13、如何实现流程的取消？</a><br> 本文的内容比较简单，主要围绕 [审批中心] 菜单下的 [我的流程]、[发起流程] 子菜单，讲解流程的发起、取消、重新发起的操作流程。</li></ul><h2 id="_1-发起流程" tabindex="-1"><a class="header-anchor" href="#_1-发起流程"><span><a href="#_1-%E5%8F%91%E8%B5%B7%E6%B5%81%E7%A8%8B">#</a> 1. 发起流程</span></a></h2><p>发起流程，对应 [审批中心 -&gt; 发起流程] 菜单，如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/工作流手册/流程列表/发起流程.png" alt="发起流程" tabindex="0" loading="lazy"><figcaption>发起流程</figcaption></figure><h3 id="_1-1-表结构" tabindex="-1"><a class="header-anchor" href="#_1-1-表结构"><span><a href="#_1-1-%E8%A1%A8%E7%BB%93%E6%9E%84">#</a> 1.1 表结构</span></a></h3><p>① 流程实例表，由 Flowable 提供的 <code>ACT_RU_EXECUTION</code> 表实现，如下所示：</p><table><thead><tr><th>字段</th><th>类型</th><th>主键</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>ID_</td><td>NVARCHAR2(64)</td><td>Y</td><td>主键</td><td></td></tr><tr><td>REV_</td><td>INTEGER</td><td>N</td><td>数据版本</td><td></td></tr><tr><td>PROC_INST_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>流程实例 ID</td><td></td></tr><tr><td>BUSINESS_KEY_</td><td>NVARCHAR2(255)</td><td>N</td><td>业务主键 ID</td><td></td></tr><tr><td>PARENT_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>父执行流的 ID</td><td></td></tr><tr><td>PROC_DEF_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>流程定义的数据 ID</td><td></td></tr><tr><td>SUPER_EXEC_</td><td>NVARCHAR2(64)</td><td>N</td><td></td><td></td></tr><tr><td>ROOT_PROC_INST_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td></td><td></td></tr><tr><td>ACT_ID_</td><td>NVARCHAR2(255)</td><td>N</td><td>节点实例 ID</td><td></td></tr><tr><td>IS_ACTIVE_</td><td>NUMBER(1)</td><td>N</td><td>是否存活</td><td></td></tr><tr><td>IS_CONCURRENT_</td><td>NUMBER(1)</td><td>N</td><td>执行流是否正在并行</td><td></td></tr><tr><td>IS_SCOPE_</td><td>NUMBER(1)</td><td>N</td><td></td><td></td></tr><tr><td>IS_EVENT_SCOPE_</td><td>NUMBER(1)</td><td>N</td><td></td><td></td></tr><tr><td>IS_MI_ROOT_</td><td>NUMBER(1)</td><td>N</td><td></td><td></td></tr><tr><td>SUSPENSION_STATE_</td><td>INTEGER</td><td>N</td><td>流程终端状态</td><td></td></tr><tr><td>CACHED_ENT_STATE_</td><td>INTEGER</td><td>N</td><td></td><td></td></tr><tr><td>TENANT_ID_</td><td>NVARCHAR2(255)</td><td>N</td><td></td><td></td></tr><tr><td>NAME_</td><td>NVARCHAR2(255)</td><td>N</td><td></td><td></td></tr><tr><td>START_TIME_</td><td>TIMESTAMP(6)</td><td>N</td><td>开始时间</td><td></td></tr><tr><td>START_USER_ID_</td><td>NVARCHAR2(255)</td><td>N</td><td></td><td></td></tr><tr><td>LOCK_TIME_</td><td>TIMESTAMP(6)</td><td>N</td><td></td><td></td></tr><tr><td>IS_COUNT_ENABLED_</td><td>NUMBER(1)</td><td>N</td><td></td><td></td></tr><tr><td>EVT_SUBSCR_COUNT_</td><td>INTEGER</td><td>N</td><td></td><td></td></tr><tr><td>TASK_COUNT_</td><td>INTEGER</td><td>N</td><td></td><td></td></tr><tr><td>JOB_COUNT_</td><td>INTEGER</td><td>N</td><td></td><td></td></tr><tr><td>TIMER_JOB_COUNT_</td><td>INTEGER</td><td>N</td><td></td><td></td></tr><tr><td>SUSP_JOB_COUNT_</td><td>INTEGER</td><td>N</td><td></td><td></td></tr><tr><td>DEADLETTER_JOB_COUNT_</td><td>INTEGER</td><td>N</td><td></td><td></td></tr><tr><td>VAR_COUNT_</td><td>INTEGER</td><td>N</td><td></td><td></td></tr><tr><td>ID_LINK_COUNT_</td><td>INTEGER</td><td>N</td><td></td><td></td></tr></tbody></table><p>② 流程参数表，由 Flowable 提供的 <code>ACT_RU_VARIABLE</code> 表实现，如下所示：</p><table><thead><tr><th>字段</th><th>类型</th><th>主键</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>ID_</td><td>NVARCHAR2(64)</td><td>Y</td><td>主键</td><td></td></tr><tr><td>REV_</td><td>INTEGER</td><td>N</td><td>数据版本</td><td></td></tr><tr><td>TYPE_</td><td>NVARCHAR2(255)</td><td>N</td><td>参数类型</td><td>可以是基本的类型，也可以用户自行扩展</td></tr><tr><td>NAME_</td><td>NVARCHAR2(255)</td><td>N</td><td>参数名称</td><td></td></tr><tr><td>EXECUTION_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>参数执行 ID</td><td></td></tr><tr><td>PROC_INST_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>流程实例 ID</td><td></td></tr><tr><td>TASK_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>任务 ID</td><td></td></tr><tr><td>BYTEARRAY_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>资源 ID</td><td></td></tr><tr><td>DOUBLE_</td><td>NUMBER(*,10)</td><td>N</td><td>参数为 double，则保存在该字段中</td><td></td></tr><tr><td>LONG_</td><td>NUMBER(19)</td><td>N</td><td>参数为 long，则保存在该字段中</td><td></td></tr><tr><td>TEXT_</td><td>NVARCHAR2(2000)</td><td>N</td><td>用户保存文本类型的参数值</td><td></td></tr><tr><td>TEXT2_</td><td>NVARCHAR2(2000)</td><td>N</td><td>用户保存文本类型的参数值</td><td></td></tr></tbody></table><p>在 Flowable 中，如果想给 Task 增加拓展字段，无法通过 <code>ACT_RU_EXECUTION</code> 实现，而是通过 <code>ACT_RU_VARIABLE</code> 表实现。</p><p>该表是一种 Key-Value 的形式，可以存储任意类型的数据。例如说，项目中给 ProcessInstance 增加了一个 <code>PROCESS_STATUS</code> 字段，表示流程状态，如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/工作流手册/流程列表/PROCESS_STATUS.png" alt="PROCESS_STATUS" tabindex="0" loading="lazy"><figcaption>PROCESS_STATUS</figcaption></figure><h3 id="_1-2-流程状态" tabindex="-1"><a class="header-anchor" href="#_1-2-流程状态"><span><a href="#_1-2-%E6%B5%81%E7%A8%8B%E7%8A%B6%E6%80%81">#</a> 1.2 流程状态</span></a></h3><p>流程状态，由 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-bpm/yudao-module-bpm-api/src/main/java/cn/iocoder/yudao/module/bpm/enums/task/BpmProcessInstanceStatusEnum.java" target="_blank" rel="noopener noreferrer">BpmProcessInstanceStatusEnum</a> 目前有 4 种，如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/工作流手册/流程列表/流程状态.png" alt="流程状态" tabindex="0" loading="lazy"><figcaption>流程状态</figcaption></figure><h3 id="_1-3-具体实现" tabindex="-1"><a class="header-anchor" href="#_1-3-具体实现"><span><a href="#_1-3-%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0">#</a> 1.3 具体实现</span></a></h3><ul><li>前端，对应 <code>/views/bpm/processInstance/create/index.vue</code> 实现界面</li><li>后端，对应 BpmProcessInstanceController 的 <code>#createProcessInstance(...)</code> 提供接口</li></ul><figure><img src="https://doc.iocoder.cn/img/工作流手册/流程列表/发起流程的实现.png" alt="发起流程的实现" tabindex="0" loading="lazy"><figcaption>发起流程的实现</figcaption></figure><p>最核心的，就是调用 Flowable 的 <code>RuntimeService#createProcessInstanceBuilder().start()</code> 方法，创建流程实例。同时因为 Flowable 自身没有流程状态，所以需要我们自己维护任务状态。</p><h2 id="_2-我的流程" tabindex="-1"><a class="header-anchor" href="#_2-我的流程"><span><a href="#_2-%E6%88%91%E7%9A%84%E6%B5%81%E7%A8%8B">#</a> 2. 我的流程</span></a></h2><p>我的流程，对应 [审批中心 -&gt; 我的流程] 菜单，如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/工作流手册/流程列表/我的流程.png" alt="我的流程" tabindex="0" loading="lazy"><figcaption>我的流程</figcaption></figure><h3 id="_2-1-表结构" tabindex="-1"><a class="header-anchor" href="#_2-1-表结构"><span><a href="#_2-1-%E8%A1%A8%E7%BB%93%E6%9E%84">#</a> 2.1 表结构</span></a></h3><p>① 历史流程实例表，由 Flowable 提供的 <code>ACT_HI_PROCINST</code> 表实现，如下所示：</p><table><thead><tr><th>字段</th><th>类型</th><th>主键</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>ID_</td><td>NVARCHAR2(64)</td><td>Y</td><td>主键</td><td></td></tr><tr><td>PROC_INST_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>流程实例 ID</td><td></td></tr><tr><td>BUSINESS_KEY_</td><td>NVARCHAR2(255)</td><td>N</td><td>业务主键</td><td></td></tr><tr><td>PROC_DEF_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>属性 ID</td><td></td></tr><tr><td>START_TIME_</td><td>TIMESTAMP(6)</td><td>N</td><td>开始时间</td><td></td></tr><tr><td>END_TIME_</td><td>TIMESTAMP(6)</td><td>N</td><td>结束时间</td><td></td></tr><tr><td>DURATION_</td><td>NUMBER(19)</td><td>N</td><td>耗时</td><td></td></tr><tr><td>START_USER_ID_</td><td>NVARCHAR2(255)</td><td>N</td><td>起始人</td><td></td></tr><tr><td>START_ACT_ID_</td><td>NVARCHAR2(255)</td><td>N</td><td>起始节点</td><td></td></tr><tr><td>END_ACT_ID_</td><td>NVARCHAR2(255)</td><td>N</td><td>结束节点</td><td></td></tr><tr><td>SUPER_PROCESS_INSTANCE_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>父流程实例 ID</td><td></td></tr><tr><td>DELETE_REASON_</td><td>NVARCHAR2(2000)</td><td>N</td><td>删除原因</td><td></td></tr><tr><td>TENANT_ID_</td><td>NVARCHAR2(255)</td><td>N</td><td></td><td></td></tr><tr><td>NAME_</td><td>NVARCHAR2(255)</td><td>N</td><td>名称</td><td></td></tr></tbody></table><p>在 Flowable 中，如果 ProcessInstance 被完成（全部审批通过、不通过、取消等）时候，会从 <code>ACT_RU_EXECUTION</code> 表中删除，只能在 <code>ACT_HI_PROCINST</code> 表查询到。这是一种“冷热分离”的设计思想，因为进行的任务访问比较频繁，数据量越小，性能会越好。</p><p>而 [我的流程] 需要查询进行中、已完成的流程，所以需要查询 <code>ACT_HI_PROCINST</code> 表，而不能使用 <code>ACT_RU_EXECUTION</code> 表。</p><p>② 流程历史参数表，由 Flowable 提供的 <code>ACT_HI_VARINST</code> 表实现，如下所示：</p><table><thead><tr><th>字段</th><th>类型</th><th>主键</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>ID_</td><td>NVARCHAR2(64)</td><td>Y</td><td>主键</td><td></td></tr><tr><td>PROC_INST_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>流程实例 ID</td><td></td></tr><tr><td>EXECUTION_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>指定 ID</td><td></td></tr><tr><td>TASK_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>任务 ID</td><td></td></tr><tr><td>NAME_</td><td>NVARCHAR2(255)</td><td>N</td><td>名称</td><td></td></tr><tr><td>VAR_TYPE_</td><td>NVARCHAR2(100)</td><td>N</td><td>参数类型</td><td></td></tr><tr><td>REV_</td><td>INTEGER</td><td>N</td><td>数据版本</td><td></td></tr><tr><td>BYTEARRAY_ID_</td><td>NVARCHAR2(64)</td><td>N</td><td>字节表 ID</td><td></td></tr><tr><td>DOUBLE_</td><td>NUMBER(*,10)</td><td>N</td><td>存储 double 类型数据</td><td></td></tr><tr><td>LONG_</td><td>NUMBER(*,10)</td><td>N</td><td>存储 long 类型数据</td><td></td></tr><tr><td>TEXT_</td><td>NVARCHAR2(2000)</td><td>N</td><td></td><td></td></tr><tr><td>TEXT2_</td><td>NVARCHAR2(2000)</td><td>N</td><td></td><td></td></tr><tr><td>CREATE_TIME_</td><td>TIMESTAMP(6)(2000)</td><td>N</td><td></td><td></td></tr><tr><td>LAST_UPDATED_TIME_</td><td>TIMESTAMP(6)(2000)</td><td>N</td><td></td><td></td></tr></tbody></table><p>在 Flowable 中，如果 ProcessInstance 被完成（全部审批通过、不通过、取消等）时候，会从 <code>ACT_RU_VARIABLE</code> 表中删除，只能在 <code>ACT_HI_VARINST</code> 表查询到。这当然也是是一种“冷热分离”的设计思想~</p><h3 id="_2-2-具体实现" tabindex="-1"><a class="header-anchor" href="#_2-2-具体实现"><span><a href="#_2-2-%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0">#</a> 2.2 具体实现</span></a></h3><ul><li>前端，对应 <code>/views/bpm/processInstance/index.vue</code> 实现界面</li><li>后端，对应 BpmProcessInstanceController 的 <code>#getProcessInstanceMyPage(...)</code> 提供接口</li></ul><figure><img src="https://doc.iocoder.cn/img/工作流手册/流程列表/我的流程的实现.png" alt="我的流程的实现" tabindex="0" loading="lazy"><figcaption>我的流程的实现</figcaption></figure><h3 id="_2-1-取消流程" tabindex="-1"><a class="header-anchor" href="#_2-1-取消流程"><span><a href="#_2-1-%E5%8F%96%E6%B6%88%E6%B5%81%E7%A8%8B">#</a> 2.1 取消流程</span></a></h3><p>可点击某个流程的「取消」按钮，进行流程的取消，如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/工作流手册/流程列表/取消流程.png" alt="取消流程" tabindex="0" loading="lazy"><figcaption>取消流程</figcaption></figure><p>后端由 BpmProcessInstanceController 的 <code>#cancelProcessInstance(...)</code> 提供接口，如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/工作流手册/流程列表/取消流程的实现.png" alt="取消流程的实现" tabindex="0" loading="lazy"><figcaption>取消流程的实现</figcaption></figure><ul><li>最核心的，就是调用 Flowable 的 <code>RuntimeService#deleteProcessInstance(...)</code> 方法，取消流程实例。</li></ul><p>可能你会有疑问，哪里将流程状态更新为 <code>CANCEL</code> 已取消呢？答案在 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-bpm/yudao-module-bpm-biz/src/main/java/cn/iocoder/yudao/module/bpm/framework/flowable/core/listener/BpmProcessInstanceEventListener.java" target="_blank" rel="noopener noreferrer">BpmProcessInstanceEventListener</a> 监听器，它会监听到流程实例变更为取消，然后调用 BpmProcessInstanceController 的 <code>#updateProcessInstanceWhenCancel(...)</code> 方法，进行更新。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/工作流手册/流程列表/更新流程为已取消.png" alt="更新流程为已取消" tabindex="0" loading="lazy"><figcaption>更新流程为已取消</figcaption></figure><h3 id="_2-2-重新发起流程" tabindex="-1"><a class="header-anchor" href="#_2-2-重新发起流程"><span><a href="#_2-2-%E9%87%8D%E6%96%B0%E5%8F%91%E8%B5%B7%E6%B5%81%E7%A8%8B">#</a> 2.2 重新发起流程</span></a></h3><p>流程结束后，可点击它的「重新发起」按钮，进行流程的重新发起，如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/工作流手册/流程列表/重新发起.png" alt="重新发起" tabindex="0" loading="lazy"><figcaption>重新发起</figcaption></figure><p>它的效果是，跳转到 [发起流程] 页面，然后将之前的流程参数，填充到表单中，如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/工作流手册/流程列表/重新发起页.png" alt="重新发起" tabindex="0" loading="lazy"><figcaption>重新发起</figcaption></figure><p>因此，它最终调用的还是「1. 发起流程」小节的发起流程接口，再次（重新）发起一个流程。</p><h2 id="_3-流程实例" tabindex="-1"><a class="header-anchor" href="#_3-流程实例"><span><a href="#_3-%E6%B5%81%E7%A8%8B%E5%AE%9E%E4%BE%8B">#</a> 3. 流程实例</span></a></h2><p>流程实例，展示系统中所有的流程，一般用于管理员查询，对应 [流程管理 -&gt; 流程实例] 菜单，如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/工作流手册/流程列表/流程实例.png" alt="流程实例" tabindex="0" loading="lazy"><figcaption>流程实例</figcaption></figure><ul><li>后端，对应 BpmProcessInstanceController 的 <code>#getProcessInstanceManagerPage(...)</code> 提供接口</li><li>前端，对应 <code>/views/bpm/processInstance/manager/index.vue</code> 实现界面</li></ul><p>由于它查询的是所有流程，所以读取的是 <code>ACT_HI_PROCINST</code> 表，而不是 <code>ACT_RU_EXECUTION</code> 表。</p>',54),n=[o];function i(c,_){return d(),e("div",null,n)}const s=t(a,[["render",i],["__file","process-instance.html.vue"]]),N=JSON.parse('{"path":"/project/rouyi-vue-pro/bpm/process-instance.html","title":"流程发起、取消、重新发起","lang":"en-US","frontmatter":{"title":"流程发起、取消、重新发起","tags":["project","java","spring-boot","spring-cloud"],"categories":["project"],"order":69,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"# 1. 发起流程","slug":"_1-发起流程","link":"#_1-发起流程","children":[{"level":3,"title":"# 1.1 表结构","slug":"_1-1-表结构","link":"#_1-1-表结构","children":[]},{"level":3,"title":"# 1.2 流程状态","slug":"_1-2-流程状态","link":"#_1-2-流程状态","children":[]},{"level":3,"title":"# 1.3 具体实现","slug":"_1-3-具体实现","link":"#_1-3-具体实现","children":[]}]},{"level":2,"title":"# 2. 我的流程","slug":"_2-我的流程","link":"#_2-我的流程","children":[{"level":3,"title":"# 2.1 表结构","slug":"_2-1-表结构","link":"#_2-1-表结构","children":[]},{"level":3,"title":"# 2.2 具体实现","slug":"_2-2-具体实现","link":"#_2-2-具体实现","children":[]},{"level":3,"title":"# 2.1 取消流程","slug":"_2-1-取消流程","link":"#_2-1-取消流程","children":[]},{"level":3,"title":"# 2.2 重新发起流程","slug":"_2-2-重新发起流程","link":"#_2-2-重新发起流程","children":[]}]},{"level":2,"title":"# 3. 流程实例","slug":"_3-流程实例","link":"#_3-流程实例","children":[]}],"git":{"createdTime":1720365235000,"updatedTime":1720365235000,"contributors":[{"name":"Hung Nguyen Van","email":"vanhung4499@gmail.com","commits":1}]},"readingTime":{"minutes":7.64,"words":2291},"filePathRelative":"project/rouyi-vue-pro/bpm/process-instance.md","localizedDate":"July 7, 2024"}');export{s as comp,N as data};
